<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="pep.per.mint.database.mapper.su.StatisticsMapper">
	<!--
  	<cache/>
  	-->

	<resultMap id="SubjectStatusResultMap" type="SubjectStatus">
		<id property="groupId1" 				column="GRP_ID1"/>
		<id property="groupId2" 				column="GRP_ID2"/>
		<result property="groupNm1"				column="GRP_NM1"/>
		<result property="groupNm2"				column="GRP_NM2"/>
		<result property="checkTotalCount" 		column="CHECK_TOT_CNT"/>
		<result property="totalCount"			column="TOT_CNT"/>
		<result property="subjectTotalCount"	column="SUB_TOT_CNT"/>
		<result property="subjectIngCount"		column="SUB_ING_CNT"/>
		<result property="subjectDelayCount"	column="SUB_DELAY_CNT"/>
		<result property="applovalIngCount"		column="APP_ING_CNT"/>
		<result property="applovalDelayCount"	column="APP_DELAY_CNT"/>
		<result property="devIngCount"			column="DEV_ING_CNT"/>
		<result property="devDelayCount"		column="DEV_DELAY_CNT"/>
		<result property="testIngCount"			column="TEST_ING_CNT"/>
		<result property="testDelayCount"		column="TEST_DELAY_CNT"/>
		<result property="realFinishCount"		column="REAL_FIN_CNT"/>
		<result property="changeFinishCount"	column="CHG_FIN_CNT"/>
		<result property="rejectCount"			column="REJECT_CNT"/>
		<result property="delCount"				column="DEL_CNT"/>
	</resultMap>

	<resultMap id="DevelopmentStatusRequirementResultMapForList" type="Requirement">
  		<id property="requirementId" 		column="REQUIREMENT_ID"/>
		<result property="requirementNm" 	column="REQUIREMENT_NM"/>
		<result property="status" 			column="STATUS"/>
		<result property="statusNm" 		column="STATUS_NM"/>

		<association property="business" javaType="Business">
			<id property="businessId" 		column="BUSINESS_ID"/>
			<result property="businessNm" 	column="BUSINESS_NM"/>
			<result property="businessCd" 	column="BUSINESS_CD"/>
		</association>

		<association property="interfaceInfo" javaType="Interface">
			<id property="interfaceId" 		column="INTERFACE_ID"/>
			<result property="integrationId" 	column="INTEGRATION_ID"/>
			<result property="interfaceNm" 	column="INTERFACE_NM"/>

			<association property="channel" javaType="Channel">
				<id property="channelId"		column="CHANNEL_ID"/>
				<result property="channelNm" 	column="CHANNEL_NM"/>
			</association>


			<collection property="systemList" ofType="System">
				<id property="systemId" 		column="SYSTEM_ID"/>
				<id property="seq" 				column="SYS_SEQ"/>
				<result property="systemCd" 	column="SYSTEM_CD"/>
				<result property="systemNm" 	column="SYSTEM_NM"/>
				<result property="nodeType" 	column="SYS_NODE_TYPE"/>
				<result property="nodeTypeNm" 	column="SYS_NODE_TYPE_NM"/>
				<result property="service" 		column="SERVICE"/>
				<result property="resourceCd" 	column="RESOURCE_TYPE"/>
				<result property="resourceNm" 	column="RESOURCE_NM"/>
			</collection>


			<collection property="senderSystemInfoList" ofType="DisplaySystemInfo">
				<discriminator javaType="string" column="SYS_NODE_TYPE">
					<case value="0" resultMap="displaySystemInfoResultMap"/>
				</discriminator>
			</collection>

			<collection property="receiverSystemInfoList" ofType="DisplaySystemInfo">
				<discriminator javaType="string" column="SYS_NODE_TYPE">
					<case value="2" resultMap="displaySystemInfoResultMap"/>
				</discriminator>
			</collection>

		</association>
	</resultMap>


	<!--
	  개발진척 현황 조회.
	 -->
	<sql id="subject-status-main">
		  ,((SELECT COUNT(DISTINCT INTERFACE_ID) FROM TAN0101 WHERE DEL_YN='N') -
		  (SELECT COUNT(*) FROM TAN0101 WHERE DEL_YN = 'Y' AND REQUIREMENT_ID NOT IN (SELECT APPROVAL_ITEM_ID FROM TCO0101 WHERE APPROVAL_ITEM_TYPE = '0'))) AS CHECK_TOT_CNT
		  ,SUM(A.APP_ING_CNT + A.APP_DELAY_CNT + A.DEV_ING_CNT + A.DEV_DELAY_CNT + A.TEST_ING_CNT + A.TEST_DELAY_CNT + A.REAL_FIN_CNT + A.CHG_FIN_CNT + A.DEL_CNT + A.REJECT_CNT) AS TOT_CNT
		  ,SUM(A.APP_ING_CNT + A.APP_DELAY_CNT + A.DEV_ING_CNT + A.DEV_DELAY_CNT + A.TEST_ING_CNT + A.TEST_DELAY_CNT) AS SUB_TOT_CNT
		  ,SUM(A.APP_ING_CNT + A.DEV_ING_CNT + A.TEST_ING_CNT) AS SUB_ING_CNT
		  ,SUM(A.APP_DELAY_CNT + A.DEV_DELAY_CNT + A.TEST_DELAY_CNT) AS SUB_DELAY_CNT
		  ,SUM(A.APP_ING_CNT)     AS APP_ING_CNT
		  ,SUM(A.APP_DELAY_CNT)   AS APP_DELAY_CNT
		  ,SUM(A.DEV_ING_CNT)     AS DEV_ING_CNT
		  ,SUM(A.DEV_DELAY_CNT)   AS DEV_DELAY_CNT
		  ,SUM(A.TEST_ING_CNT)    AS TEST_ING_CNT
		  ,SUM(A.TEST_DELAY_CNT)  AS TEST_DELAY_CNT
		  ,SUM(A.REAL_FIN_CNT)    AS REAL_FIN_CNT
		  ,SUM(A.CHG_FIN_CNT)     AS CHG_FIN_CNT
		  ,SUM(A.REJECT_CNT)      AS REJECT_CNT
		  ,SUM(A.DEL_CNT)         AS DEL_CNT
	</sql>

	<sql id="subject-status-join-1-0">
		         INNER JOIN ( SELECT INTERFACE_ID, MIN(REG_DATE) AS REG_DATE FROM TAN0101 WHERE DEL_YN='N' GROUP BY INTERFACE_ID ) ZZ
		         ON A.DEL_YN = 'N' AND A.INTERFACE_ID = ZZ.INTERFACE_ID AND A.REG_DATE = ZZ.REG_DATE
		         INNER JOIN TAN0201 B
		         ON A.DEL_YN = 'N'
		            AND A.INTERFACE_ID = B.INTERFACE_ID
		            AND A.STATUS IN ('A0', 'A1')

	</sql>
	<sql id="subject-status-join-2-0">
		         INNER JOIN ( SELECT INTERFACE_ID, MIN(REG_DATE) AS REG_DATE FROM TAN0101 WHERE DEL_YN='N' GROUP BY INTERFACE_ID ) ZZ
		         ON A.DEL_YN = 'N' AND A.INTERFACE_ID = ZZ.INTERFACE_ID AND A.REG_DATE = ZZ.REG_DATE
		         INNER JOIN TAN0201 B
		         ON A.DEL_YN = 'N'
		            AND A.INTERFACE_ID = B.INTERFACE_ID
		         INNER JOIN TCO0101 D
		         ON A.DEL_YN = 'N'
		            AND A.REQUIREMENT_ID = D.APPROVAL_ITEM_ID
		            /*AND A.STATUS IN ('B1','B2','B4','C1','C2','C4','D1','D2','D4')*/
		            AND A.STATUS IN ('B1','B2','B3','B4','C1','C2','C3','C4','D1','D2','D3','D4')
		            AND A.REQUIREMENT_ID NOT IN ( SELECT APPROVAL_ITEM_ID FROM TCO0101 WHERE APPROVAL_ITEM_TYPE = '0' AND REQ_TYPE='I0')
		            AND D.APPROVAL_ITEM_TYPE = '0'
		            AND D.SEQ = (SELECT MAX(C.SEQ) FROM TCO0101 C WHERE C.APPROVAL_ITEM_ID = D.APPROVAL_ITEM_ID AND C.APPROVAL_ITEM_TYPE = '0')

	</sql>
	<sql id="subject-status-join-3-0">
		         INNER JOIN ( SELECT INTERFACE_ID, MIN(REG_DATE) AS REG_DATE FROM TAN0101 WHERE DEL_YN='N' GROUP BY INTERFACE_ID ) ZZ
		         ON A.DEL_YN = 'N' AND A.INTERFACE_ID = ZZ.INTERFACE_ID AND A.REG_DATE = ZZ.REG_DATE
		         INNER JOIN TAN0201 B
		         ON A.DEL_YN = 'N'
		            AND A.INTERFACE_ID = B.INTERFACE_ID
		            AND A.STATUS IN ('F1','F2')
		            AND A.REQUIREMENT_ID NOT IN ( SELECT APPROVAL_ITEM_ID FROM TCO0101 WHERE APPROVAL_ITEM_TYPE = '0' AND REQ_TYPE='I0' )

	</sql>
	<sql id="subject-status-join-4-0">
		         INNER JOIN ( SELECT INTERFACE_ID, MIN(REG_DATE) AS REG_DATE FROM TAN0101 WHERE DEL_YN='N' GROUP BY INTERFACE_ID ) ZZ
		         ON A.DEL_YN = 'N' AND A.INTERFACE_ID = ZZ.INTERFACE_ID AND A.REG_DATE = ZZ.REG_DATE
		         INNER JOIN TAN0201 B
		         ON A.DEL_YN = 'N'
		            AND A.INTERFACE_ID = B.INTERFACE_ID
		            AND A.STATUS IN ('G0','H0','F4')
		            AND A.REQUIREMENT_ID NOT IN ( SELECT APPROVAL_ITEM_ID FROM TCO0101 WHERE APPROVAL_ITEM_TYPE = '0' AND REQ_TYPE='I0' )

	</sql>
	<sql id="subject-status-join-5-0">
		         INNER JOIN ( SELECT INTERFACE_ID, MIN(REG_DATE) AS REG_DATE FROM TAN0101 WHERE DEL_YN='N' GROUP BY INTERFACE_ID ) ZZ
		         ON A.DEL_YN = 'N' AND A.INTERFACE_ID = ZZ.INTERFACE_ID AND A.REG_DATE = ZZ.REG_DATE
		         INNER JOIN TAN0201 B
		         ON A.DEL_YN = 'N'
		            AND A.INTERFACE_ID = B.INTERFACE_ID
		            AND A.STATUS IN ('I0')
		            AND A.REQUIREMENT_ID IN ( SELECT APPROVAL_ITEM_ID FROM TCO0101 WHERE APPROVAL_ITEM_TYPE = '0' AND REQ_TYPE='I0' )

	</sql>
	<sql id="subject-status-join-6-0">
		         INNER JOIN ( SELECT INTERFACE_ID, MIN(REG_DATE) AS REG_DATE FROM TAN0101 WHERE DEL_YN='N' GROUP BY INTERFACE_ID ) ZZ
		         ON A.DEL_YN = 'N' AND A.INTERFACE_ID = ZZ.INTERFACE_ID AND A.REG_DATE = ZZ.REG_DATE
		         INNER JOIN TAN0201 B
		         ON A.DEL_YN = 'N'
		            AND A.INTERFACE_ID = B.INTERFACE_ID
		            AND A.STATUS != ('I0')
		            AND A.REQUIREMENT_ID IN ( SELECT APPROVAL_ITEM_ID FROM TCO0101 WHERE APPROVAL_ITEM_TYPE = '0' AND REQ_TYPE='I0' )

	</sql>
	<sql id="subject-status-join-7-0">
		         INNER JOIN ( SELECT INTERFACE_ID, MIN(REG_DATE) AS REG_DATE FROM TAN0101 WHERE DEL_YN='Y' GROUP BY INTERFACE_ID ) ZZ
		         ON A.DEL_YN = 'Y' AND A.INTERFACE_ID = ZZ.INTERFACE_ID AND A.REG_DATE = ZZ.REG_DATE
		         INNER JOIN TAN0201 B
		         ON A.DEL_YN = 'Y'
		            AND A.INTERFACE_ID = B.INTERFACE_ID
		         /*
		         INNER JOIN TCO0101 C
		         ON A.DEL_YN = 'Y'
		            AND A.REQUIREMENT_ID = C.APPROVAL_ITEM_ID
		            AND C.APPROVAL_ITEM_TYPE = '0'
		            AND C.SEQ = (SELECT MAX(D.SEQ) FROM TCO0101 D WHERE D.APPROVAL_ITEM_ID = C.APPROVAL_ITEM_ID AND D.APPROVAL_ITEM_TYPE = '0')
		         */
		         /*
		         INNER JOIN TAN0201 B
		         ON A.DEL_YN = 'N'
		            AND A.INTERFACE_ID = B.INTERFACE_ID
		            AND A.STATUS IN ('B3','C3','D3','F3')
		         INNER JOIN TCO0101 C
		         ON A.DEL_YN = 'N'
		            AND A.REQUIREMENT_ID = C.APPROVAL_ITEM_ID
		            AND C.APPROVAL_ITEM_TYPE = '0'
		            AND C.SEQ = (SELECT MAX(D.SEQ) FROM TCO0101 D WHERE D.APPROVAL_ITEM_ID = C.APPROVAL_ITEM_ID AND D.APPROVAL_ITEM_TYPE = '0')
		         */
	</sql>
	<sql id="subject-status-join-8-0">
		         INNER JOIN ( SELECT INTERFACE_ID, MIN(REG_DATE) AS REG_DATE FROM TAN0101 WHERE DEL_YN='N' GROUP BY INTERFACE_ID ) ZZ
		         ON A.DEL_YN = 'N' AND A.INTERFACE_ID = ZZ.INTERFACE_ID AND A.REG_DATE = ZZ.REG_DATE
		         INNER JOIN TAN0201 B
		         ON A.DEL_YN = 'N'
		            AND A.INTERFACE_ID = B.INTERFACE_ID
		            AND A.STATUS IN ('E1','E2','E3','E4')
		            AND A.REQUIREMENT_ID NOT IN ( SELECT APPROVAL_ITEM_ID FROM TCO0101 WHERE APPROVAL_ITEM_TYPE = '0' AND REQ_TYPE='I0' )
		         INNER JOIN TCO0101 C
		         ON A.DEL_YN = 'N'
		            AND A.REQUIREMENT_ID = C.APPROVAL_ITEM_ID
		            AND C.APPROVAL_ITEM_TYPE = '0'
		            AND C.SEQ = (SELECT MAX(D.SEQ) FROM TCO0101 D WHERE D.APPROVAL_ITEM_ID = C.APPROVAL_ITEM_ID AND D.APPROVAL_ITEM_TYPE = '0')
	</sql>




	<select id="getSubjectStatusGroupByUser" resultMap="SubjectStatusResultMap">
		SELECT
		   A.USER_ID AS GRP_ID1
		  ,B.USER_NM AS GRP_NM1
		  <include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-main"/>
		FROM (
		    -------------------------
		    -- 1 사용자별 심의(결재)중인 건수 - (개발선청 건수)
		    -------------------------
		    SELECT
       			 E.USER_ID
				,COUNT(A.REQUIREMENT_ID) AS APP_ING_CNT
				,0 AS APP_DELAY_CNT
				,0 AS DEV_ING_CNT
				,0 AS DEV_DELAY_CNT
				,0 AS TEST_ING_CNT
				,0 AS TEST_DELAY_CNT
				,0 AS REAL_FIN_CNT
				,0 AS CHG_FIN_CNT
				,0 AS REJECT_CNT
				,0 AS DEL_CNT
		    FROM TAN0101 A
		    	 <include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-join-1-0"/>
		         INNER JOIN TAN0219 E
		         ON A.INTERFACE_ID = E.INTERFACE_ID
    		GROUP BY E.USER_ID
		    UNION ALL
		    -------------------------
		    -- 2 사용자별 심의(결재)중인 건수 - (삭제의뢰, 이행건수 제외)
		    -------------------------
		    SELECT
      			 E.USER_ID
				,SUM(CASE WHEN TO_DATE(SUBSTR(D.REQ_DATE,1,12),'YYYYMMDDHH24MI') - (SYSDATE - 3) >= 0 THEN 1 ELSE 0 END) AS APP_ING_CNT
				,SUM(CASE WHEN TO_DATE(SUBSTR(D.REQ_DATE,1,12),'YYYYMMDDHH24MI') - (SYSDATE - 3) >= 0 THEN 0 ELSE 1 END) AS APP_DELAY_CNT
				,0 AS DEV_ING_CNT
				,0 AS DEV_DELAY_CNT
				,0 AS TEST_ING_CNT
				,0 AS TEST_DELAY_CNT
				,0 AS REAL_FIN_CNT
				,0 AS CHG_FIN_CNT
				,0 AS REJECT_CNT
				,0 AS DEL_CNT
		    FROM TAN0101 A
		    	 <include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-join-2-0"/>
		         INNER JOIN TAN0219 E
		         ON A.INTERFACE_ID = E.INTERFACE_ID
    		GROUP BY E.USER_ID
		    UNION ALL
		    -------------------------
		    -- 3 사용자별 개발중인 건수 - (이행건수 제외)
		    -------------------------
		    SELECT
       			 E.USER_ID
				,0 AS APP_ING_CNT
				,0 AS APP_DELAY_CNT
				,SUM(CASE WHEN TO_DATE(SUBSTR(A.DEV_EXP_YMD,1,12),'YYYYMMDDHH24MI') - SYSDATE >= 0 THEN 1 ELSE 0 END) AS DEV_ING_CNT
				,SUM(CASE WHEN TO_DATE(SUBSTR(A.DEV_EXP_YMD,1,12),'YYYYMMDDHH24MI') - SYSDATE >= 0 THEN 0 ELSE 1 END) AS DEV_DELAY_CNT
				,0 AS TEST_ING_CNT
				,0 AS TEST_DELAY_CNT
				,0 AS REAL_FIN_CNT
				,0 AS CHG_FIN_CNT
				,0 AS REJECT_CNT
				,0 AS DEL_CNT
		    FROM TAN0101 A
		    	 <include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-join-3-0"/>
		         INNER JOIN TAN0219 E
		         ON A.INTERFACE_ID = E.INTERFACE_ID
    		GROUP BY E.USER_ID
		    UNION ALL
		    -------------------------
		    -- 4 사용자별 테스트중인 건수
		    -------------------------
		    SELECT
       			 E.USER_ID
				,0 AS APP_ING_CNT
				,0 AS APP_DELAY_CNT
				,0 AS DEV_ING_CNT
				,0 AS DEV_DELAY_CNT
				,SUM(CASE WHEN TO_DATE(SUBSTR(A.DEV_EXP_YMD,1,12),'YYYYMMDDHH24MI') - SYSDATE >= 0 THEN 1 ELSE 0 END) AS TEST_ING_CNT
				,SUM(CASE WHEN TO_DATE(SUBSTR(A.DEV_EXP_YMD,1,12),'YYYYMMDDHH24MI') - SYSDATE >= 0 THEN 0 ELSE 1 END) AS TEST_DELAY_CNT
				,0 AS REAL_FIN_CNT
				,0 AS CHG_FIN_CNT
				,0 AS REJECT_CNT
				,0 AS DEL_CNT
		    FROM TAN0101 A
		    	 <include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-join-4-0"/>
		         INNER JOIN TAN0219 E
		         ON A.INTERFACE_ID = E.INTERFACE_ID
    		GROUP BY E.USER_ID
		    UNION ALL
		    -------------------------
		    -- 5 사용자별 이행(운영) 건수
		    -------------------------
		    SELECT
       			 E.USER_ID
				,0 AS APP_ING_CNT
				,0 AS APP_DELAY_CNT
				,0 AS DEV_ING_CNT
				,0 AS DEV_DELAY_CNT
				,0  AS TEST_ING_CNT
				,0 AS TEST_DELAY_CNT
				,COUNT(A.REQUIREMENT_ID) AS REAL_FIN_CNT
				,0 AS CHG_FIN_CNT
				,0 AS REJECT_CNT
				,0 AS DEL_CNT
		    FROM TAN0101 A
		    	 <include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-join-5-0"/>
		         INNER JOIN TAN0219 E
		         ON A.INTERFACE_ID = E.INTERFACE_ID
    		GROUP BY E.USER_ID
		    UNION ALL
		    -------------------------
		    -- 6 사용자별 이행 후 변경 건수
		    -------------------------
		    SELECT
       			 E.USER_ID
				,0 AS APP_ING_CNT
				,0 AS APP_DELAY_CNT
				,0 AS DEV_ING_CNT
				,0 AS DEV_DELAY_CNT
				,0 AS TEST_ING_CNT
				,0 AS TEST_DELAY_CNT
				,0 AS REAL_FIN_CNT
				,COUNT(A.REQUIREMENT_ID) AS CHG_FIN_CNT
				,0 AS REJECT_CNT
				,0 AS DEL_CNT
		    FROM TAN0101 A
		    	 <include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-join-6-0"/>
		         INNER JOIN TAN0219 E
		         ON A.INTERFACE_ID = E.INTERFACE_ID
    		GROUP BY E.USER_ID
		    UNION ALL
		    -------------------------
		    -- 7 사용자별 반려/삭제 건수 (삭제의뢰)
		    -------------------------
		    SELECT
       			 E.USER_ID
				,0 AS APP_ING_CNT
				,0 AS APP_DELAY_CNT
				,0 AS DEV_ING_CNT
				,0 AS DEV_DELAY_CNT
				,0 AS TEST_ING_CNT
				,0 AS TEST_DELAY_CNT
				,0 AS REAL_FIN_CNT
				,0 AS CHG_FIN_CNT
				,0 AS REJECT_CNT
				,COUNT(A.REQUIREMENT_ID) AS DEL_CNT
		    FROM TAN0101 A
				 <include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-join-7-0"/>
		         INNER JOIN TAN0219 E
		         ON A.INTERFACE_ID = E.INTERFACE_ID
    		GROUP BY E.USER_ID
		    UNION ALL
		    -------------------------
		    -- 8 사용자별 반려/삭제 건수 (반려)
		    -------------------------
		    SELECT
       			 E.USER_ID
				,0 AS APP_ING_CNT
				,0 AS APP_DELAY_CNT
				,0 AS DEV_ING_CNT
				,0 AS DEV_DELAY_CNT
				,0 AS TEST_ING_CNT
				,0 AS TEST_DELAY_CNT
				,0 AS REAL_FIN_CNT
				,0 AS CHG_FIN_CNT
				,COUNT(A.REQUIREMENT_ID) AS REJECT_CNT
		      ,0 AS DEL_CNT
		    FROM TAN0101 A
				 <include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-join-8-0"/>
		         INNER JOIN TAN0219 E
		         ON A.INTERFACE_ID = E.INTERFACE_ID
    		GROUP BY E.USER_ID
		  ) A
		  INNER JOIN TSU0101 B
		  ON A.USER_ID = B.USER_ID
		  <if test="userNm != null">
		  	 AND B.USER_NM LIKE '%'||#{userNm}||'%'
		  </if>
		GROUP BY A.USER_ID, B.USER_NM
		ORDER BY A.USER_ID, B.USER_NM

	</select>


	<select id="getSubjectStatusGroupByResource" resultMap="SubjectStatusResultMap">
		SELECT
		   A.RESOURCE_TYPE AS GRP_ID1
		  ,B.NM AS GRP_NM1
		  <include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-main"/>
		FROM (
		    -------------------------
		    -- 1 리소스별 심의(결재)중인 건수 - (개발선청 건수)
		    -------------------------
		    SELECT
       			 E.RESOURCE_TYPE
				,COUNT(A.REQUIREMENT_ID) AS APP_ING_CNT
				,0 AS APP_DELAY_CNT
				,0 AS DEV_ING_CNT
				,0 AS DEV_DELAY_CNT
				,0 AS TEST_ING_CNT
				,0 AS TEST_DELAY_CNT
				,0 AS REAL_FIN_CNT
				,0 AS CHG_FIN_CNT
				,0 AS REJECT_CNT
				,0 AS DEL_CNT
		    FROM TAN0101 A
				 <include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-join-1-0"/>
		         INNER JOIN ( SELECT DISTINCT INTERFACE_ID, RESOURCE_TYPE FROM TAN0213 ) E
		         ON A.INTERFACE_ID = E.INTERFACE_ID
    		GROUP BY E.RESOURCE_TYPE
		    UNION ALL
		    -------------------------
		    -- 2 리소스별 심의(결재)중인 건수 - (삭제의뢰, 이행건수 제외)
		    -------------------------
		    SELECT
      			 E.RESOURCE_TYPE
				,SUM(CASE WHEN TO_DATE(SUBSTR(D.REQ_DATE,1,12),'YYYYMMDDHH24MI') - (SYSDATE - 3) >= 0 THEN 1 ELSE 0 END) AS APP_ING_CNT
				,SUM(CASE WHEN TO_DATE(SUBSTR(D.REQ_DATE,1,12),'YYYYMMDDHH24MI') - (SYSDATE - 3) >= 0 THEN 0 ELSE 1 END) AS APP_DELAY_CNT
				,0 AS DEV_ING_CNT
				,0 AS DEV_DELAY_CNT
				,0 AS TEST_ING_CNT
				,0 AS TEST_DELAY_CNT
				,0 AS REAL_FIN_CNT
				,0 AS CHG_FIN_CNT
				,0 AS REJECT_CNT
				,0 AS DEL_CNT
		    FROM TAN0101 A
				 <include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-join-2-0"/>
		         INNER JOIN ( SELECT DISTINCT INTERFACE_ID, RESOURCE_TYPE FROM TAN0213 ) E
		         ON A.INTERFACE_ID = E.INTERFACE_ID
    		GROUP BY E.RESOURCE_TYPE
		    UNION ALL
		    -------------------------
		    -- 3 리소스별 개발중인 건수 - (이행건수 제외)
		    -------------------------
		    SELECT
       			 E.RESOURCE_TYPE
				,0 AS APP_ING_CNT
				,0 AS APP_DELAY_CNT
				,SUM(CASE WHEN TO_DATE(SUBSTR(A.DEV_EXP_YMD,1,12),'YYYYMMDDHH24MI') - SYSDATE >= 0 THEN 1 ELSE 0 END) AS DEV_ING_CNT
				,SUM(CASE WHEN TO_DATE(SUBSTR(A.DEV_EXP_YMD,1,12),'YYYYMMDDHH24MI') - SYSDATE >= 0 THEN 0 ELSE 1 END) AS DEV_DELAY_CNT
				,0 AS TEST_ING_CNT
				,0 AS TEST_DELAY_CNT
				,0 AS REAL_FIN_CNT
				,0 AS CHG_FIN_CNT
				,0 AS REJECT_CNT
				,0 AS DEL_CNT
		    FROM TAN0101 A
				 <include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-join-3-0"/>
		         INNER JOIN ( SELECT DISTINCT INTERFACE_ID, RESOURCE_TYPE FROM TAN0213 ) E
		         ON A.INTERFACE_ID = E.INTERFACE_ID
    		GROUP BY E.RESOURCE_TYPE
		    UNION ALL
		    -------------------------
		    -- 4 리소스별 테스트중인 건수
		    -------------------------
		    SELECT
       			 E.RESOURCE_TYPE
				,0 AS APP_ING_CNT
				,0 AS APP_DELAY_CNT
				,0 AS DEV_ING_CNT
				,0 AS DEV_DELAY_CNT
				,SUM(CASE WHEN TO_DATE(SUBSTR(A.DEV_EXP_YMD,1,12),'YYYYMMDDHH24MI') - SYSDATE >= 0 THEN 1 ELSE 0 END) AS TEST_ING_CNT
				,SUM(CASE WHEN TO_DATE(SUBSTR(A.DEV_EXP_YMD,1,12),'YYYYMMDDHH24MI') - SYSDATE >= 0 THEN 0 ELSE 1 END) AS TEST_DELAY_CNT
				,0 AS REAL_FIN_CNT
				,0 AS CHG_FIN_CNT
				,0 AS REJECT_CNT
				,0 AS DEL_CNT
		    FROM TAN0101 A
				 <include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-join-4-0"/>
		         INNER JOIN ( SELECT DISTINCT INTERFACE_ID, RESOURCE_TYPE FROM TAN0213 ) E
		         ON A.INTERFACE_ID = E.INTERFACE_ID
    		GROUP BY E.RESOURCE_TYPE
		    UNION ALL
		    -------------------------
		    -- 5 리소스별 이행(운영) 건수
		    -------------------------
		    SELECT
       			 E.RESOURCE_TYPE
				,0 AS APP_ING_CNT
				,0 AS APP_DELAY_CNT
				,0 AS DEV_ING_CNT
				,0 AS DEV_DELAY_CNT
				,0  AS TEST_ING_CNT
				,0 AS TEST_DELAY_CNT
				,COUNT(A.REQUIREMENT_ID) AS REAL_FIN_CNT
				,0 AS CHG_FIN_CNT
				,0 AS REJECT_CNT
				,0 AS DEL_CNT
		    FROM TAN0101 A
				 <include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-join-5-0"/>
		         INNER JOIN ( SELECT DISTINCT INTERFACE_ID, RESOURCE_TYPE FROM TAN0213 ) E
		         ON A.INTERFACE_ID = E.INTERFACE_ID
    		GROUP BY E.RESOURCE_TYPE
		    UNION ALL
		    -------------------------
		    -- 6 리소스별 이행 후 변경 건수
		    -------------------------
		    SELECT
       			 E.RESOURCE_TYPE
				,0 AS APP_ING_CNT
				,0 AS APP_DELAY_CNT
				,0 AS DEV_ING_CNT
				,0 AS DEV_DELAY_CNT
				,0 AS TEST_ING_CNT
				,0 AS TEST_DELAY_CNT
				,0 AS REAL_FIN_CNT
				,COUNT(A.REQUIREMENT_ID) AS CHG_FIN_CNT
				,0 AS REJECT_CNT
				,0 AS DEL_CNT
		    FROM TAN0101 A
				 <include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-join-6-0"/>
		         INNER JOIN ( SELECT DISTINCT INTERFACE_ID, RESOURCE_TYPE FROM TAN0213 ) E
		         ON A.INTERFACE_ID = E.INTERFACE_ID
    		GROUP BY E.RESOURCE_TYPE
		    UNION ALL
		    -------------------------
		    -- 7 리소스별 반려/삭제 건수 (삭제의뢰)
		    -------------------------
		    SELECT
       			 E.RESOURCE_TYPE
				,0 AS APP_ING_CNT
				,0 AS APP_DELAY_CNT
				,0 AS DEV_ING_CNT
				,0 AS DEV_DELAY_CNT
				,0 AS TEST_ING_CNT
				,0 AS TEST_DELAY_CNT
				,0 AS REAL_FIN_CNT
				,0 AS CHG_FIN_CNT
				,0 AS REJECT_CNT
				,COUNT(A.REQUIREMENT_ID) AS DEL_CNT
		    FROM TAN0101 A
				 <include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-join-7-0"/>
		         INNER JOIN ( SELECT DISTINCT INTERFACE_ID, RESOURCE_TYPE FROM TAN0213 ) E
		         ON A.INTERFACE_ID = E.INTERFACE_ID
    		GROUP BY E.RESOURCE_TYPE
		    UNION ALL
		    -------------------------
		    -- 8 리소스별 반려/삭제 건수 (반려)
		    -------------------------
		    SELECT
       			 E.RESOURCE_TYPE
				,0 AS APP_ING_CNT
				,0 AS APP_DELAY_CNT
				,0 AS DEV_ING_CNT
				,0 AS DEV_DELAY_CNT
				,0 AS TEST_ING_CNT
				,0 AS TEST_DELAY_CNT
				,0 AS REAL_FIN_CNT
				,0 AS CHG_FIN_CNT
				,COUNT(A.REQUIREMENT_ID) AS REJECT_CNT
		      ,0 AS DEL_CNT
		    FROM TAN0101 A
				 <include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-join-8-0"/>
		         INNER JOIN ( SELECT DISTINCT INTERFACE_ID, RESOURCE_TYPE FROM TAN0213 ) E
			     ON A.INTERFACE_ID = E.INTERFACE_ID
    		GROUP BY E.RESOURCE_TYPE
		  ) A
		  INNER JOIN TSU0301 B
		  ON B.LEVEL1 = 'IM' AND B.LEVEL2 = '04'
		  	 AND A.RESOURCE_TYPE = B.CD
		  <if test="resourceType != null">
		  	 AND A.RESOURCE_TYPE = #{resourceType}
		  </if>
		GROUP BY A.RESOURCE_TYPE, B.NM
		ORDER BY B.NM

	</select>

	<select id="getSubjectStatusGroupBySystem" resultMap="SubjectStatusResultMap">
		SELECT
		   A.SYSTEM_ID AS GRP_ID1
		  ,B.SYSTEM_NM AS GRP_NM1
		  ,A.NODE_TYPE AS GRP_ID2
		  ,( SELECT NM FROM TSU0301 WHERE LEVEL1 = 'IM' AND LEVEL2 = '08' AND CD = A.NODE_TYPE ) AS GRP_NM2
		  <include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-main"/>
		FROM (
		    -------------------------
		    -- 1 시스템별 심의(결재)중인 건수 - (개발선청 건수)
		    -------------------------
		    SELECT
				 E.SYSTEM_ID
				,E.NODE_TYPE
				,COUNT(A.REQUIREMENT_ID) AS APP_ING_CNT
				,0 AS APP_DELAY_CNT
				,0 AS DEV_ING_CNT
				,0 AS DEV_DELAY_CNT
				,0 AS TEST_ING_CNT
				,0 AS TEST_DELAY_CNT
				,0 AS REAL_FIN_CNT
				,0 AS CHG_FIN_CNT
				,0 AS REJECT_CNT
				,0 AS DEL_CNT
		    FROM TAN0101 A
				 <include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-join-1-0"/>
		         INNER JOIN ( SELECT DISTINCT INTERFACE_ID, SYSTEM_ID, NODE_TYPE FROM TAN0213 ) E
		         ON A.INTERFACE_ID = E.INTERFACE_ID
	    	GROUP BY  E.SYSTEM_ID, E.NODE_TYPE
		    UNION ALL
		    -------------------------
		    -- 2 시스템별 심의(결재)중인 건수 - (삭제의뢰, 이행건수 제외)
		    -------------------------
		    SELECT
				 E.SYSTEM_ID
				,E.NODE_TYPE
				,SUM(CASE WHEN TO_DATE(SUBSTR(D.REQ_DATE,1,12),'YYYYMMDDHH24MI') - (SYSDATE - 3) >= 0 THEN 1 ELSE 0 END) AS APP_ING_CNT
				,SUM(CASE WHEN TO_DATE(SUBSTR(D.REQ_DATE,1,12),'YYYYMMDDHH24MI') - (SYSDATE - 3) >= 0 THEN 0 ELSE 1 END) AS APP_DELAY_CNT
				,0 AS DEV_ING_CNT
				,0 AS DEV_DELAY_CNT
				,0 AS TEST_ING_CNT
				,0 AS TEST_DELAY_CNT
				,0 AS REAL_FIN_CNT
				,0 AS CHG_FIN_CNT
				,0 AS REJECT_CNT
				,0 AS DEL_CNT
		    FROM TAN0101 A
				 <include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-join-2-0"/>
		         INNER JOIN ( SELECT DISTINCT INTERFACE_ID, SYSTEM_ID, NODE_TYPE FROM TAN0213 ) E
		         ON A.INTERFACE_ID = E.INTERFACE_ID
		    GROUP BY  E.SYSTEM_ID, E.NODE_TYPE
		    UNION ALL
		    -------------------------
		    -- 3 시스템별 개발중인 건수 - (이행건수 제외)
		    -------------------------
		    SELECT
				 E.SYSTEM_ID
				,E.NODE_TYPE
				,0 AS APP_ING_CNT
				,0 AS APP_DELAY_CNT
				,SUM(CASE WHEN TO_DATE(SUBSTR(A.DEV_EXP_YMD,1,12),'YYYYMMDDHH24MI') - SYSDATE >= 0 THEN 1 ELSE 0 END) AS DEV_ING_CNT
				,SUM(CASE WHEN TO_DATE(SUBSTR(A.DEV_EXP_YMD,1,12),'YYYYMMDDHH24MI') - SYSDATE >= 0 THEN 0 ELSE 1 END) AS DEV_DELAY_CNT
				,0 AS TEST_ING_CNT
				,0 AS TEST_DELAY_CNT
				,0 AS REAL_FIN_CNT
				,0 AS CHG_FIN_CNT
				,0 AS REJECT_CNT
				,0 AS DEL_CNT
		    FROM TAN0101 A
				 <include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-join-3-0"/>
		         INNER JOIN ( SELECT DISTINCT INTERFACE_ID, SYSTEM_ID, NODE_TYPE FROM TAN0213 ) E
		         ON A.INTERFACE_ID = E.INTERFACE_ID
		    GROUP BY  E.SYSTEM_ID, E.NODE_TYPE
		    UNION ALL
		    -------------------------
		    -- 4 시스템별 테스트중인 건수
		    -------------------------
		    SELECT
				 E.SYSTEM_ID
				,E.NODE_TYPE
				,0 AS APP_ING_CNT
				,0 AS APP_DELAY_CNT
				,0 AS DEV_ING_CNT
				,0 AS DEV_DELAY_CNT
				,SUM(CASE WHEN TO_DATE(SUBSTR(A.DEV_EXP_YMD,1,12),'YYYYMMDDHH24MI') - SYSDATE >= 0 THEN 1 ELSE 0 END) AS TEST_ING_CNT
				,SUM(CASE WHEN TO_DATE(SUBSTR(A.DEV_EXP_YMD,1,12),'YYYYMMDDHH24MI') - SYSDATE >= 0 THEN 0 ELSE 1 END) AS TEST_DELAY_CNT
				,0 AS REAL_FIN_CNT
				,0 AS CHG_FIN_CNT
				,0 AS REJECT_CNT
				,0 AS DEL_CNT
		    FROM TAN0101 A
				 <include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-join-4-0"/>
		         INNER JOIN ( SELECT DISTINCT INTERFACE_ID, SYSTEM_ID, NODE_TYPE FROM TAN0213 ) E
		         ON A.INTERFACE_ID = E.INTERFACE_ID
		    GROUP BY  E.SYSTEM_ID, E.NODE_TYPE
		    UNION ALL
		    -------------------------
		    -- 5 시스템별 이행(운영) 건수
		    -------------------------
		    SELECT
				 E.SYSTEM_ID
				,E.NODE_TYPE
				,0 AS APP_ING_CNT
				,0 AS APP_DELAY_CNT
				,0 AS DEV_ING_CNT
				,0 AS DEV_DELAY_CNT
				,0  AS TEST_ING_CNT
				,0 AS TEST_DELAY_CNT
				,COUNT(A.REQUIREMENT_ID) AS REAL_FIN_CNT
				,0 AS CHG_FIN_CNT
				,0 AS REJECT_CNT
				,0 AS DEL_CNT
		    FROM TAN0101 A
				 <include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-join-5-0"/>
		         INNER JOIN ( SELECT DISTINCT INTERFACE_ID, SYSTEM_ID, NODE_TYPE FROM TAN0213 ) E
		         ON A.INTERFACE_ID = E.INTERFACE_ID
		    GROUP BY  E.SYSTEM_ID, E.NODE_TYPE
		    UNION ALL
		    -------------------------
		    -- 6 시스템별 이행 후 변경 건수
		    -------------------------
		    SELECT
				 E.SYSTEM_ID
				,E.NODE_TYPE
				,0 AS APP_ING_CNT
				,0 AS APP_DELAY_CNT
				,0 AS DEV_ING_CNT
				,0 AS DEV_DELAY_CNT
				,0 AS TEST_ING_CNT
				,0 AS TEST_DELAY_CNT
				,0 AS REAL_FIN_CNT
				,COUNT(A.REQUIREMENT_ID) AS CHG_FIN_CNT
				,0 AS REJECT_CNT
				,0 AS DEL_CNT
		    FROM TAN0101 A
				 <include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-join-6-0"/>
		         INNER JOIN ( SELECT DISTINCT INTERFACE_ID, SYSTEM_ID, NODE_TYPE FROM TAN0213 ) E
		         ON A.INTERFACE_ID = E.INTERFACE_ID
		    GROUP BY  E.SYSTEM_ID, E.NODE_TYPE
		    UNION ALL
		    -------------------------
		    -- 7 시스템별 반려/삭제 건수 (삭제의뢰)
		    -------------------------
		    SELECT
				 E.SYSTEM_ID
				,E.NODE_TYPE
				,0 AS APP_ING_CNT
				,0 AS APP_DELAY_CNT
				,0 AS DEV_ING_CNT
				,0 AS DEV_DELAY_CNT
				,0 AS TEST_ING_CNT
				,0 AS TEST_DELAY_CNT
				,0 AS REAL_FIN_CNT
				,0 AS CHG_FIN_CNT
				,0 AS REJECT_CNT
				,COUNT(A.REQUIREMENT_ID) AS DEL_CNT
		    FROM TAN0101 A
				 <include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-join-7-0"/>
		         INNER JOIN ( SELECT DISTINCT INTERFACE_ID, SYSTEM_ID, NODE_TYPE FROM TAN0213 ) E
		         ON A.INTERFACE_ID = E.INTERFACE_ID
		    GROUP BY  E.SYSTEM_ID, E.NODE_TYPE
		    UNION ALL
		    -------------------------
		    -- 8 시스템별 반려/삭제 건수 (반려)
		    -------------------------
		    SELECT
				 E.SYSTEM_ID
				,E.NODE_TYPE
				,0 AS APP_ING_CNT
				,0 AS APP_DELAY_CNT
				,0 AS DEV_ING_CNT
				,0 AS DEV_DELAY_CNT
				,0 AS TEST_ING_CNT
				,0 AS TEST_DELAY_CNT
				,0 AS REAL_FIN_CNT
				,0 AS CHG_FIN_CNT
				,COUNT(A.REQUIREMENT_ID) AS REJECT_CNT
		      ,0 AS DEL_CNT
		    FROM TAN0101 A
				 <include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-join-8-0"/>
			     INNER JOIN ( SELECT DISTINCT INTERFACE_ID, SYSTEM_ID, NODE_TYPE FROM TAN0213 ) E
			     ON A.INTERFACE_ID = E.INTERFACE_ID
			GROUP BY  E.SYSTEM_ID, E.NODE_TYPE
		  ) A
		  INNER JOIN TIM0101 B
		  ON A.SYSTEM_ID = B.SYSTEM_ID
		  <if test="systemId != null">
		  	 AND A.SYSTEM_ID = #{systemId}
		  </if>
		GROUP BY A.SYSTEM_ID, B.SYSTEM_NM, A.NODE_TYPE
		ORDER BY B.SYSTEM_NM, A.NODE_TYPE
	</select>


	<select id="getSubjectStatusGroupByChannel" resultMap="SubjectStatusResultMap">
		SELECT
		   A.CHANNEL_ID AS GRP_ID1
		  ,B.CHANNEL_NM AS GRP_NM1
		  <include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-main"/>
		FROM (
		    -------------------------
		    -- 1 솔루션별 심의(결재)중인 건수 - (개발선청 건수)
		    -------------------------
		    SELECT
		       DISTINCT B.INTERFACE_ID
		      ,B.CHANNEL_ID
		      ,COUNT(A.REQUIREMENT_ID) AS APP_ING_CNT
		      ,0 AS APP_DELAY_CNT
		      ,0 AS DEV_ING_CNT
		      ,0 AS DEV_DELAY_CNT
		      ,0 AS TEST_ING_CNT
		      ,0 AS TEST_DELAY_CNT
		      ,0 AS REAL_FIN_CNT
		      ,0 AS CHG_FIN_CNT
		      ,0 AS REJECT_CNT
		      ,0 AS DEL_CNT
		    FROM TAN0101 A
				 <include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-join-1-0"/>
		    GROUP BY B.INTERFACE_ID, B.CHANNEL_ID
		    UNION ALL
		    -------------------------
		    -- 2 솔루션별 심의(결재)중인 건수 - (삭제의뢰, 이행건수 제외)
		    -------------------------
		    SELECT
		       DISTINCT B.INTERFACE_ID
		      ,B.CHANNEL_ID
		      ,SUM(CASE WHEN TO_DATE(SUBSTR(D.REQ_DATE,1,12),'YYYYMMDDHH24MI') - (SYSDATE - 3) >= 0 THEN 1 ELSE 0 END) AS APP_ING_CNT
		      ,SUM(CASE WHEN TO_DATE(SUBSTR(D.REQ_DATE,1,12),'YYYYMMDDHH24MI') - (SYSDATE - 3) >= 0 THEN 0 ELSE 1 END) AS APP_DELAY_CNT
		      ,0 AS DEV_ING_CNT
		      ,0 AS DEV_DELAY_CNT
		      ,0 AS TEST_ING_CNT
		      ,0 AS TEST_DELAY_CNT
		      ,0 AS REAL_FIN_CNT
		      ,0 AS CHG_FIN_CNT
		      ,0 AS REJECT_CNT
		      ,0 AS DEL_CNT
		    FROM TAN0101 A
				 <include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-join-2-0"/>
		    GROUP BY B.INTERFACE_ID, B.CHANNEL_ID
		    UNION ALL
		    -------------------------
		    -- 3 솔루션별 개발중인 건수 - (이행건수 제외)
		    -------------------------
		    SELECT
		      DISTINCT B.INTERFACE_ID
		      ,B.CHANNEL_ID
		      ,0 AS APP_ING_CNT
		      ,0 AS APP_DELAY_CNT
		      ,SUM(CASE WHEN TO_DATE(SUBSTR(A.DEV_EXP_YMD,1,12),'YYYYMMDDHH24MI') - SYSDATE >= 0 THEN 1 ELSE 0 END) AS DEV_ING_CNT
		      ,SUM(CASE WHEN TO_DATE(SUBSTR(A.DEV_EXP_YMD,1,12),'YYYYMMDDHH24MI') - SYSDATE >= 0 THEN 0 ELSE 1 END) AS DEV_DELAY_CNT
		      ,0 AS TEST_ING_CNT
		      ,0 AS TEST_DELAY_CNT
		      ,0 AS REAL_FIN_CNT
		      ,0 AS CHG_FIN_CNT
		      ,0 AS REJECT_CNT
		      ,0 AS DEL_CNT
		    FROM TAN0101 A
				 <include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-join-3-0"/>
		    GROUP BY B.INTERFACE_ID, B.CHANNEL_ID
		    UNION ALL
		    -------------------------
		    -- 4 솔루션별 테스트중인 건수
		    -------------------------
		    SELECT
		       DISTINCT B.INTERFACE_ID
		      ,B.CHANNEL_ID
		      ,0 AS APP_ING_CNT
		      ,0 AS APP_DELAY_CNT
		      ,0 AS DEV_ING_CNT
		      ,0 AS DEV_DELAY_CNT
		      ,SUM(CASE WHEN TO_DATE(SUBSTR(A.DEV_EXP_YMD,1,12),'YYYYMMDDHH24MI') - SYSDATE >= 0 THEN 1 ELSE 0 END) AS TEST_ING_CNT
		      ,SUM(CASE WHEN TO_DATE(SUBSTR(A.DEV_EXP_YMD,1,12),'YYYYMMDDHH24MI') - SYSDATE >= 0 THEN 0 ELSE 1 END) AS TEST_DELAY_CNT
		      ,0 AS REAL_FIN_CNT
		      ,0 AS CHG_FIN_CNT
		      ,0 AS REJECT_CNT
		      ,0 AS DEL_CNT
		    FROM TAN0101 A
				 <include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-join-4-0"/>
		    GROUP BY B.INTERFACE_ID, B.CHANNEL_ID
		    UNION ALL
		    -------------------------
		    -- 5 솔루션별 이행(운영) 건수
		    -------------------------
		    SELECT
		       DISTINCT B.INTERFACE_ID
		      ,B.CHANNEL_ID
		      ,0 AS APP_ING_CNT
		      ,0 AS APP_DELAY_CNT
		      ,0 AS DEV_ING_CNT
		      ,0 AS DEV_DELAY_CNT
		      ,0  AS TEST_ING_CNT
		      ,0 AS TEST_DELAY_CNT
		      ,COUNT(A.REQUIREMENT_ID) AS REAL_FIN_CNT
		      ,0 AS CHG_FIN_CNT
		      ,0 AS REJECT_CNT
		      ,0 AS DEL_CNT
		    FROM TAN0101 A
				 <include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-join-5-0"/>
		    GROUP BY B.INTERFACE_ID, B.CHANNEL_ID
		    UNION ALL
		    -------------------------
		    -- 6 솔루션별 이행 후 변경 건수
		    -------------------------
		    SELECT
		       DISTINCT B.INTERFACE_ID
		      ,B.CHANNEL_ID
		      ,0 AS APP_ING_CNT
		      ,0 AS APP_DELAY_CNT
		      ,0 AS DEV_ING_CNT
		      ,0 AS DEV_DELAY_CNT
		      ,0 AS TEST_ING_CNT
		      ,0 AS TEST_DELAY_CNT
		      ,0 AS REAL_FIN_CNT
		      ,COUNT(A.REQUIREMENT_ID) AS CHG_FIN_CNT
		      ,0 AS REJECT_CNT
		      ,0 AS DEL_CNT
		    FROM TAN0101 A
				 <include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-join-6-0"/>
		    GROUP BY B.INTERFACE_ID, B.CHANNEL_ID
		    UNION ALL
		    -------------------------
		    -- 7 솔루션별 반려/삭제 건수 (삭제의뢰)
		    -------------------------
		    SELECT
		     DISTINCT B.INTERFACE_ID
		    ,B.CHANNEL_ID
		    ,0 AS APP_ING_CNT
		    ,0 AS APP_DELAY_CNT
		    ,0 AS DEV_ING_CNT
		    ,0 AS DEV_DELAY_CNT
		    ,0 AS TEST_ING_CNT
		    ,0 AS TEST_DELAY_CNT
		    ,0 AS REAL_FIN_CNT
		    ,0 AS CHG_FIN_CNT
		    ,0 AS REJECT_CNT
		    ,COUNT(A.REQUIREMENT_ID) AS DEL_CNT
		    FROM TAN0101 A
				 <include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-join-7-0"/>
		    GROUP BY B.INTERFACE_ID, B.CHANNEL_ID
		    UNION ALL
		    -------------------------
		    -- 8 솔루션별 반려/삭제 건수 (반려)
		    -------------------------
		    SELECT
		       DISTINCT B.INTERFACE_ID
		      ,B.CHANNEL_ID
		      ,0 AS APP_ING_CNT
		      ,0 AS APP_DELAY_CNT
		      ,0 AS DEV_ING_CNT
		      ,0 AS DEV_DELAY_CNT
		      ,0 AS TEST_ING_CNT
		      ,0 AS TEST_DELAY_CNT
		      ,0 AS REAL_FIN_CNT
		      ,0 AS CHG_FIN_CNT
		      ,COUNT(A.REQUIREMENT_ID) AS REJECT_CNT
		      ,0 AS DEL_CNT
		    FROM TAN0101 A
				<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-join-8-0"/>
		    GROUP BY B.INTERFACE_ID, B.CHANNEL_ID
		  ) A
		  INNER JOIN TIM0002 B
		  ON A.CHANNEL_ID = B.CHANNEL_ID
		  <if test="channelId != null">
		  	 AND A.CHANNEL_ID = #{channelId}
		  </if>
		GROUP BY A.CHANNEL_ID, B.CHANNEL_NM
		ORDER BY B.CHANNEL_NM
	</select>


	<!--
	  개발진척 현황 상세 조회.
	 -->

	<sql id="subject-status-detail-main">
	SELECT
	  A.REQUIREMENT_ID
	  ,A.REQUIREMENT_NM
	  ,A.STATUS
	  ,( SELECT NM FROM TSU0301 WHERE DEL_YN = 'N' AND LEVEL1 = 'AN' AND LEVEL2 = '01' AND CD = A.STATUS ) AS STATUS_NM
	  ,A.BUSINESS_ID
	  ,( SELECT BUSINESS_NM FROM TIM0301 WHERE BUSINESS_ID = A.BUSINESS_ID ) AS BUSINESS_NM
	  ,( SELECT BUSINESS_CD FROM TIM0301 WHERE BUSINESS_ID = A.BUSINESS_ID ) AS BUSINESS_CD
	  ,A.INTERFACE_ID
	  ,B.INTEGRATION_ID
	  ,B.INTERFACE_NM
	  ,B.CHANNEL_ID
	  ,( SELECT CHANNEL_NM FROM TIM0002 WHERE CHANNEL_ID = B.CHANNEL_ID ) AS CHANNEL_NM
	  ,E.SYSTEM_ID
	  ,F.SYSTEM_NM AS SYSTEM_NM
	  ,F.SYSTEM_CD AS SYSTEM_CD
	  ,E.SEQ AS SYS_SEQ
	  ,E.NODE_TYPE AS SYS_NODE_TYPE
	  ,( SELECT NM FROM TSU0301 WHERE DEL_YN = 'N' AND LEVEL1 = 'IM' AND LEVEL2 = '08' AND CD = E.NODE_TYPE ) AS SYS_NODE_TYPE_NM
	  ,E.SERVICE
	  ,E.RESOURCE_TYPE
	  ,( SELECT NM FROM TSU0301 WHERE DEL_YN ='N' AND LEVEL1 = 'IM' AND LEVEL2 = '04' AND CD = E.RESOURCE_TYPE ) AS RESOURCE_NM
	FROM TAN0101 A
	</sql>

	<sql id="subject-status-detail-status-0-0">
		<![CDATA[
	     INNER JOIN ( SELECT INTERFACE_ID, MIN(REG_DATE) AS REG_DATE FROM TAN0101 WHERE DEL_YN='N' GROUP BY INTERFACE_ID ) ZZ
	     ON A.DEL_YN = 'N' AND A.INTERFACE_ID = ZZ.INTERFACE_ID AND A.REG_DATE = ZZ.REG_DATE
	     INNER JOIN TAN0201 B
	     ON A.DEL_YN = 'N'
	        AND A.INTERFACE_ID = B.INTERFACE_ID
	        AND A.STATUS IN ('A0', 'A1')
		]]>
	</sql>

	<sql id="subject-status-detail-status-0-1">
		<![CDATA[
	     INNER JOIN ( SELECT INTERFACE_ID, MIN(REG_DATE) AS REG_DATE FROM TAN0101 WHERE DEL_YN='N' GROUP BY INTERFACE_ID ) ZZ
	     ON A.DEL_YN = 'N' AND A.INTERFACE_ID = ZZ.INTERFACE_ID AND A.REG_DATE = ZZ.REG_DATE
	     INNER JOIN TAN0201 B
	     ON A.DEL_YN = 'N'
	        AND A.INTERFACE_ID = B.INTERFACE_ID
	     INNER JOIN TCO0101 D
	     ON A.DEL_YN = 'N'
	        AND A.REQUIREMENT_ID = D.APPROVAL_ITEM_ID
	        /*AND A.STATUS IN ('B1','B2','B4','C1','C2','C4','D1','D2','D4')*/
	        AND A.STATUS IN ('B1','B2','B3','B4','C1','C2','C3','C4','D1','D2','D3','D4')
	        AND A.REQUIREMENT_ID NOT IN ( SELECT APPROVAL_ITEM_ID FROM TCO0101 WHERE APPROVAL_ITEM_TYPE = '0' AND REQ_TYPE='I0')
	        AND D.APPROVAL_ITEM_TYPE = '0'
	        AND D.SEQ = (SELECT MAX(C.SEQ) FROM TCO0101 C WHERE C.APPROVAL_ITEM_ID = D.APPROVAL_ITEM_ID AND C.APPROVAL_ITEM_TYPE = '0')
	        AND TO_DATE(SUBSTR(D.REQ_DATE,1,12),'YYYYMMDDHH24MI') - (SYSDATE - 3) >= 0
		]]>
	</sql>

	<sql id="subject-status-detail-status-1-0">
		<![CDATA[
	     INNER JOIN ( SELECT INTERFACE_ID, MIN(REG_DATE) AS REG_DATE FROM TAN0101 WHERE DEL_YN='N' GROUP BY INTERFACE_ID ) ZZ
	     ON A.DEL_YN = 'N' AND A.INTERFACE_ID = ZZ.INTERFACE_ID AND A.REG_DATE = ZZ.REG_DATE
	     INNER JOIN TAN0201 B
	     ON A.DEL_YN = 'N'
	        AND A.INTERFACE_ID = B.INTERFACE_ID
	     INNER JOIN TCO0101 D
	     ON A.DEL_YN = 'N'
	        AND A.REQUIREMENT_ID = D.APPROVAL_ITEM_ID
	        /*AND A.STATUS IN ('B1','B2','B4','C1','C2','C4','D1','D2','D4')*/
	        AND A.STATUS IN ('B1','B2','B3','B4','C1','C2','C3','C4','D1','D2','D3','D4')
	        AND A.REQUIREMENT_ID NOT IN ( SELECT APPROVAL_ITEM_ID FROM TCO0101 WHERE APPROVAL_ITEM_TYPE = '0' AND REQ_TYPE='I0')
	        AND D.APPROVAL_ITEM_TYPE = '0'
	        AND D.SEQ = (SELECT MAX(C.SEQ) FROM TCO0101 C WHERE C.APPROVAL_ITEM_ID = D.APPROVAL_ITEM_ID AND C.APPROVAL_ITEM_TYPE = '0')
	        AND TO_DATE(SUBSTR(D.REQ_DATE,1,12),'YYYYMMDDHH24MI') - (SYSDATE - 3) < 0
		]]>
	</sql>

	<sql id="subject-status-detail-status-2-0">
		<![CDATA[
	     INNER JOIN ( SELECT INTERFACE_ID, MIN(REG_DATE) AS REG_DATE FROM TAN0101 WHERE DEL_YN='N' GROUP BY INTERFACE_ID ) ZZ
	     ON A.DEL_YN = 'N' AND A.INTERFACE_ID = ZZ.INTERFACE_ID AND A.REG_DATE = ZZ.REG_DATE
	     INNER JOIN TAN0201 B
	     ON A.DEL_YN = 'N'
	        AND A.INTERFACE_ID = B.INTERFACE_ID
	        AND A.STATUS IN ('F1','F2')
	        AND A.REQUIREMENT_ID NOT IN ( SELECT APPROVAL_ITEM_ID FROM TCO0101 WHERE APPROVAL_ITEM_TYPE = '0' AND REQ_TYPE='I0' )
	        AND TO_DATE(SUBSTR(A.DEV_EXP_YMD,1,12), 'YYYYMMDDHH24MI') - SYSDATE >=0
		]]>
	</sql>

	<sql id="subject-status-detail-status-3-0">
		<![CDATA[
	     INNER JOIN ( SELECT INTERFACE_ID, MIN(REG_DATE) AS REG_DATE FROM TAN0101 WHERE DEL_YN='N' GROUP BY INTERFACE_ID ) ZZ
	     ON A.DEL_YN = 'N' AND A.INTERFACE_ID = ZZ.INTERFACE_ID AND A.REG_DATE = ZZ.REG_DATE
	     INNER JOIN TAN0201 B
	     ON A.DEL_YN = 'N'
	        AND A.INTERFACE_ID = B.INTERFACE_ID
	        AND A.STATUS IN ('F1','F2')
	        AND A.REQUIREMENT_ID NOT IN ( SELECT APPROVAL_ITEM_ID FROM TCO0101 WHERE APPROVAL_ITEM_TYPE = '0' AND REQ_TYPE='I0' )
	        AND TO_DATE(SUBSTR(A.DEV_EXP_YMD,1,12), 'YYYYMMDDHH24MI') - SYSDATE < 0
		]]>
	</sql>

	<sql id="subject-status-detail-status-4-0">
		<![CDATA[
	     INNER JOIN ( SELECT INTERFACE_ID, MIN(REG_DATE) AS REG_DATE FROM TAN0101 WHERE DEL_YN='N' GROUP BY INTERFACE_ID ) ZZ
	     ON A.DEL_YN = 'N' AND A.INTERFACE_ID = ZZ.INTERFACE_ID AND A.REG_DATE = ZZ.REG_DATE
	     INNER JOIN TAN0201 B
	     ON A.DEL_YN = 'N'
	        AND A.INTERFACE_ID = B.INTERFACE_ID
	        AND A.STATUS IN ('G0','H0','F4')
	        AND A.REQUIREMENT_ID NOT IN ( SELECT APPROVAL_ITEM_ID FROM TCO0101 WHERE APPROVAL_ITEM_TYPE = '0' AND REQ_TYPE='I0' )
	        AND TO_DATE(SUBSTR(A.TEST_EXP_YMD,1,12), 'YYYYMMDDHH24MI') - SYSDATE >= 0
		]]>
	</sql>

	<sql id="subject-status-detail-status-5-0">
		<![CDATA[
	     INNER JOIN ( SELECT INTERFACE_ID, MIN(REG_DATE) AS REG_DATE FROM TAN0101 WHERE DEL_YN='N' GROUP BY INTERFACE_ID ) ZZ
	     ON A.DEL_YN = 'N' AND A.INTERFACE_ID = ZZ.INTERFACE_ID AND A.REG_DATE = ZZ.REG_DATE
	     INNER JOIN TAN0201 B
	     ON A.DEL_YN = 'N'
	        AND A.INTERFACE_ID = B.INTERFACE_ID
	        AND A.STATUS IN ('G0','H0','F4')
	        AND A.REQUIREMENT_ID NOT IN ( SELECT APPROVAL_ITEM_ID FROM TCO0101 WHERE APPROVAL_ITEM_TYPE = '0' AND REQ_TYPE='I0' )
	        AND TO_DATE(SUBSTR(A.TEST_EXP_YMD,1,12), 'YYYYMMDDHH24MI') - SYSDATE < 0
		]]>
	</sql>

	<sql id="subject-status-detail-status-6-0">
		<![CDATA[
	     INNER JOIN ( SELECT INTERFACE_ID, MIN(REG_DATE) AS REG_DATE FROM TAN0101 WHERE DEL_YN='N' GROUP BY INTERFACE_ID ) ZZ
	     ON A.DEL_YN = 'N' AND A.INTERFACE_ID = ZZ.INTERFACE_ID AND A.REG_DATE = ZZ.REG_DATE
	     INNER JOIN TAN0201 B
	     ON A.DEL_YN = 'N'
	        AND A.INTERFACE_ID = B.INTERFACE_ID
	        AND A.STATUS IN ('I0')
	        AND A.REQUIREMENT_ID IN ( SELECT APPROVAL_ITEM_ID FROM TCO0101 WHERE APPROVAL_ITEM_TYPE = '0' AND REQ_TYPE='I0' )
		]]>
	</sql>

	<sql id="subject-status-detail-status-7-0">
		<![CDATA[
	     INNER JOIN ( SELECT INTERFACE_ID, MIN(REG_DATE) AS REG_DATE FROM TAN0101 WHERE DEL_YN='N' GROUP BY INTERFACE_ID ) ZZ
	     ON A.DEL_YN = 'N' AND A.INTERFACE_ID = ZZ.INTERFACE_ID AND A.REG_DATE = ZZ.REG_DATE
	     INNER JOIN TAN0201 B
	     ON A.DEL_YN = 'N'
	        AND A.INTERFACE_ID = B.INTERFACE_ID
	        AND A.STATUS != ('I0')
	        AND A.REQUIREMENT_ID IN ( SELECT APPROVAL_ITEM_ID FROM TCO0101 WHERE APPROVAL_ITEM_TYPE = '0' AND REQ_TYPE='I0' )
		]]>
	</sql>

	<sql id="subject-status-detail-status-8-0">
		<![CDATA[

	     INNER JOIN ( SELECT INTERFACE_ID, MIN(REG_DATE) AS REG_DATE FROM TAN0101 WHERE DEL_YN='N' GROUP BY INTERFACE_ID ) ZZ
	     ON A.DEL_YN = 'N' AND A.INTERFACE_ID = ZZ.INTERFACE_ID AND A.REG_DATE = ZZ.REG_DATE
	     INNER JOIN TAN0201 B
	     ON A.DEL_YN = 'N'
	        AND A.INTERFACE_ID = B.INTERFACE_ID
	        AND A.STATUS IN ('E1','E2','E3','E4')
	        AND A.REQUIREMENT_ID NOT IN ( SELECT APPROVAL_ITEM_ID FROM TCO0101 WHERE APPROVAL_ITEM_TYPE = '0' AND REQ_TYPE='I0' )
	     INNER JOIN TCO0101 C
	     ON A.DEL_YN = 'N'
	        AND A.REQUIREMENT_ID = C.APPROVAL_ITEM_ID
	        AND C.APPROVAL_ITEM_TYPE = '0'
	        AND C.SEQ = (SELECT MAX(D.SEQ) FROM TCO0101 D WHERE D.APPROVAL_ITEM_ID = C.APPROVAL_ITEM_ID AND D.APPROVAL_ITEM_TYPE = '0')
		]]>
	</sql>

	<sql id="subject-status-detail-status-9-0">
		<![CDATA[
	     INNER JOIN ( SELECT INTERFACE_ID, MIN(REG_DATE) AS REG_DATE FROM TAN0101 WHERE DEL_YN='Y' GROUP BY INTERFACE_ID ) ZZ
	     ON A.DEL_YN = 'Y' AND A.INTERFACE_ID = ZZ.INTERFACE_ID AND A.REG_DATE = ZZ.REG_DATE
	     INNER JOIN TAN0201 B
	     ON A.DEL_YN = 'Y'
	        AND A.INTERFACE_ID = B.INTERFACE_ID
	     /*
	     INNER JOIN TCO0101 C
	     ON A.DEL_YN = 'Y'
	        AND A.REQUIREMENT_ID = C.APPROVAL_ITEM_ID
	        AND C.APPROVAL_ITEM_TYPE = '0'
	        AND C.SEQ = (SELECT MAX(D.SEQ) FROM TCO0101 D WHERE D.APPROVAL_ITEM_ID = C.APPROVAL_ITEM_ID AND D.APPROVAL_ITEM_TYPE = '0')
	     */
		]]>
	</sql>

	<sql id="subject-status-detail-tail">
		INNER JOIN
		(
			SELECT *
			FROM TAN0213
			WHERE DEL_YN ='N'
			<if test="systemId != null and nodeType != null">
				 AND SYSTEM_ID = #{systemId}
				 AND NODE_TYPE = #{nodeType}
			</if>
			<if test="resourceType != null">
				 AND RESOURCE_TYPE = #{resourceType}
			</if>
		) EE
		ON A.INTERFACE_ID = EE.INTERFACE_ID

		LEFT OUTER JOIN TAN0213 E
		ON E.DEL_YN ='N'
		   AND A.INTERFACE_ID = E.INTERFACE_ID

		INNER JOIN TIM0101 F
		ON E.SYSTEM_ID = F.SYSTEM_ID

		INNER JOIN TIM0301 G
		ON A.BUSINESS_ID = G.BUSINESS_ID

		INNER JOIN TIM0002 H
		ON B.CHANNEL_ID = H.CHANNEL_ID
		<if test="channelId != null">
		   AND B.CHANNEL_ID = #{channelId}
		</if>

		<if test="userId != null">
		INNER JOIN TAN0219 I
		ON A.INTERFACE_ID = I.INTERFACE_ID
		   AND I.USER_ID = #{userId}
		</if>

	</sql>

	<select id="getSubjectStatusDetail" resultMap="DevelopmentStatusRequirementResultMapForList">
		<if test="status != null and (status eq '0'.toString())">
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-detail-main"/>
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-detail-status-0-0"/>
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-detail-tail"/>
			UNION ALL
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-detail-main"/>
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-detail-status-0-1"/>
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-detail-tail"/>
		</if>

		<if test="status != null and (status eq '1'.toString())">
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-detail-main"/>
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-detail-status-1-0"/>
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-detail-tail"/>
		</if>

		<if test="status != null and (status eq '2'.toString())">
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-detail-main"/>
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-detail-status-2-0"/>
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-detail-tail"/>
		</if>

		<if test="status != null and (status eq '3'.toString())">
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-detail-main"/>
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-detail-status-3-0"/>
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-detail-tail"/>
		</if>

		<if test="status != null and (status eq '4'.toString())">
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-detail-main"/>
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-detail-status-4-0"/>
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-detail-tail"/>
		</if>

		<if test="status != null and (status eq '5'.toString())">
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-detail-main"/>
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-detail-status-5-0"/>
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-detail-tail"/>
		</if>

		<if test="status != null and (status eq '6'.toString())">
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-detail-main"/>
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-detail-status-6-0"/>
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-detail-tail"/>
		</if>

		<if test="status != null and (status eq '7'.toString())">
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-detail-main"/>
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-detail-status-7-0"/>
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-detail-tail"/>
		</if>

		<if test="status != null and (status eq '8'.toString())">
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-detail-main"/>
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-detail-status-8-0"/>
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-detail-tail"/>
		</if>

		<if test="status != null and (status eq '9'.toString())">
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-detail-main"/>
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-detail-status-9-0"/>
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.subject-status-detail-tail"/>
		</if>

	</select>



	<select id="getDevelopmentStatusRequirementList" resultMap="DevelopmentStatusRequirementResultMapForList">
		select

		     a.REQUIREMENT_ID
		    ,a.REQUIREMENT_NM
		    ,a.STATUS
		    ,b.NM as STATUS_NM

		    ,a.BUSINESS_ID
		    ,a.BUSINESS_NM
		    ,a.BUSINESS_CD

		    ,a.INTERFACE_ID
		    ,a.INTEGRATION_ID
		    ,a.INTERFACE_NM
		    ,a.CHANNEL_ID
		    ,a.CHANNEL_NM

		    ,a.SYSTEM_ID
		    ,a.SYSTEM_NM
		    ,a.SYSTEM_CD
		    ,a.SEQ as SYS_SEQ
		    ,a.NODE_TYPE as SYS_NODE_TYPE
		    ,c.NM as SYS_NODE_TYPE_NM
		    ,a.SERVICE
		    ,a.RESOURCE_TYPE
		    ,d.NM as RESOURCE_NM

		  from (
		      select
		         a.REQUIREMENT_ID
		        ,a.REQUIREMENT_NM
		        ,a.STATUS
		        ,b.BUSINESS_ID
		        ,b.BUSINESS_NM
		        ,b.BUSINESS_CD
		        ,c.INTERFACE_ID
		        ,c.INTEGRATION_ID
		        ,c.INTERFACE_NM
		        ,c.SYSTEM_ID
		        ,c.SYSTEM_NM
		        ,c.SYSTEM_CD
		        ,c.SEQ
		        ,c.NODE_TYPE
		        ,c.SERVICE
		        ,c.RESOURCE_TYPE
		        ,e.CHANNEL_ID
        		,e.CHANNEL_NM
		      from TAN0101 a
		        inner join TIM0301 b on a.BUSINESS_ID = b.BUSINESS_ID

		        <if test="criteriaId != null and (criteriaId eq 'Representative'.toString())">
		        	<if test="criteriaDetailId != null and criteriaDetailId != ''">
		        inner join (
				 select
				        a.REQUIREMENT_ID
				    from TAN0101 a
				    inner join TAN0201 b on a.INTERFACE_ID = b.INTERFACE_ID
				    inner join TAN0219 c on b.INTERFACE_ID = c.INTERFACE_ID
				   where c.USER_ID = #{criteriaDetailId}
				    <!-- union
				    select
				         a.REQUIREMENT_ID
				    from TAN0101 a
				   where a.REG_USER = #{userId} -->
				) f on a.REQUIREMENT_ID = f.REQUIREMENT_ID
		        	</if>
		        </if>
		        <if test="criteriaId != null and (criteriaId eq 'Process'.toString())">
		        	<if test="criteriaDetailId != null and criteriaDetailId != ''">
		        inner Join (
		            select distinct C_BIZ_ID
		              from TIM0302
		             where DEL_YN = 'N'
		               and P_BIZ_ID = #{criteriaDetailId}
		        ) g On g.C_BIZ_ID = a.BUSINESS_ID
		        	</if>
		        </if>
		        left outer join (
                  select
                     a.SYSTEM_ID
                    ,a.SYSTEM_NM
                    ,a.SYSTEM_CD
                    ,b.INTERFACE_ID
                    ,c.INTEGRATION_ID
                    ,c.INTERFACE_NM
                    ,b.SEQ
                    ,b.NODE_TYPE
                    ,b.SERVICE
                    ,b.RESOURCE_TYPE
                  from TAN0213 b
                    inner join TIM0101 a on a.SYSTEM_ID = b.SYSTEM_ID
                    inner join TAN0201 c on c.INTERFACE_ID = b.INTERFACE_ID
                  where b.DEL_YN = 'N'
                ) c on a.INTERFACE_ID = c.INTERFACE_ID
		        left outer join TAN0201 d on d.INTERFACE_ID = a.INTERFACE_ID and d.DEL_YN = 'N'
		        inner join (
		        	select
		        		 CHANNEL_ID
		        		,CHANNEL_NM
		        	  from TIM0002
		        	 where DEL_YN = 'N'
		        	 <if test="criteriaId != null and (criteriaId eq 'Channel'.toString())">
						<if test="criteriaDetailId != null and criteriaDetailId != ''">
		        	   and CHANNEL_ID = #{criteriaDetailId}
						</if>
		        	 </if>
		        ) e on d.CHANNEL_ID = e.CHANNEL_ID
		      WHERE a.DEL_YN = 'N'
      			<if test="status != null and status != ''">
					<choose>
						<when test="statusMode != null and (statusMode eq 'Like'.toString())">
				and a.STATUS like #{status}
							<if test="status != null and (status eq 'F%'.toString())">
				and a.STATUS <![CDATA[<>]]> 'F4'
							</if>
						</when>
						<otherwise>
				and a.STATUS = #{status}
						</otherwise>
					</choose>
				</if>
				<if test="criteriaId != null and (criteriaId eq 'System'.toString())">
					<if test="criteriaDetailId != null and criteriaDetailId != ''">
				and c.SYSTEM_ID = #{criteriaDetailId}
					</if>
					<if test="nodeTypeCd != null and nodeTypeCd != ''">
				and c.NODE_TYPE = #{nodeTypeCd}
					</if>
				</if>
				<if test="criteriaId != null and (criteriaId eq 'Resource'.toString())">
					<if test="criteriaDetailId != null and criteriaDetailId != ''">
				and c.RESOURCE_TYPE = #{criteriaDetailId}
					</if>
				</if>
				<if test="criteriaId != null and (criteriaId eq 'Requirement'.toString())">
					<if test="criteriaDetailId != null and criteriaDetailId != ''">
				and a.REQUIREMENT_ID = #{criteriaDetailId}
					</if>
				</if>
		    ) a
		    left outer join (select CD, NM from TSU0301 where LEVEL1 = 'AN' and LEVEL2 = '01') b on a.STATUS = b.cd
		    left outer join (select CD, NM from TSU0301 where LEVEL1 = 'IM' and LEVEL2 = '08') c on a.NODE_TYPE = c.cd
		    left outer join (select CD, NM from TSU0301 where LEVEL1 = 'IM' and LEVEL2 = '04') d on a.RESOURCE_TYPE = d.cd
		where 1 = 1
		<if test="criteriaId != null and (criteriaId eq 'Interface'.toString())">
			<if test="criteriaDetailId != null and criteriaDetailId != ''">
		  <!-- and a.INTERFACE_ID = #{criteriaDetailId} -->
		  and a.INTEGRATION_ID = #{criteriaDetailId}
			</if>
		</if>
		order by a.CHANNEL_NM, 	a.BUSINESS_NM, 	a.REQUIREMENT_NM, a.INTERFACE_NM, a.STATUS
	</select>



  	<!--
	기준조건별 인터페이스 현황 - 통계를 조회한다.
	public List<StatisticsDevelopmentStatus> getInterfaceStatus throws Exception;
	 -->
  	<select id="getDevelopmentStatus" resultMap="InterfaceStatusResultMapForList">
		select
		         CRITERIA_DETAIL_ID
		       , CRITERIA_DETAIL_NM
		       , NODE_TYPE_NM
		       <if test="criteriaId != null and (criteriaId eq 'Process'.toString())">
		       , (SELECT COUNT(P_BIZ_ID)   FROM TIM0302   WHERE P_BIZ_ID = CRITERIA_DETAIL_ID   AND DEPTH <![CDATA[<>]]> 0) as CHILD_CNT
		       </if>
		       , nvl(min(decode(STATUS_TYPE, '심의완료', cnt)), 0) as REVIEW_C_CNT
		       , nvl(min(decode(STATUS_TYPE, '결재완료', cnt)), 0) as APPROVAL_C_CNT
		       , nvl(min(decode(STATUS_TYPE, '개발완료', cnt)), 0) as DEV_C_CNT
		       , nvl(min(decode(STATUS_TYPE, '테스트완료', cnt)), 0) as TEST_C_CNT
		       , nvl(min(decode(STATUS_TYPE, '이행결재완료', cnt)), 0) as REAL_APPROVAL_C_CNT
		       , nvl(min(decode(STATUS_TYPE, '이행완료', cnt)), 0) as REAL_C_CNT

		       , nvl(min(decode(STATUS_TYPE, '심의완료', cnt)), 0)
		         + nvl(min(decode(STATUS_TYPE, '결재완료', cnt)), 0)
		         + nvl(min(decode(STATUS_TYPE, '개발완료', cnt)), 0)
		         + nvl(min(decode(STATUS_TYPE, '테스트완료', cnt)), 0)
		         + nvl(min(decode(STATUS_TYPE, '이행결재완료', cnt)), 0) as T_R_CNT

		       , nvl(min(decode(STATUS_TYPE, '미지정', cnt)), 0)
		         + nvl(min(decode(STATUS_TYPE, '심의완료', cnt)), 0)
		         + nvl(min(decode(STATUS_TYPE, '결재완료', cnt)), 0)
		         + nvl(min(decode(STATUS_TYPE, '개발완료', cnt)), 0)
		         + nvl(min(decode(STATUS_TYPE, '이행완료', cnt)), 0)
		         + nvl(min(decode(STATUS_TYPE, '이행결재완료', cnt)), 0)
		         + nvl(min(decode(STATUS_TYPE, '테스트완료', cnt)), 0) as T_CNT

		from
		      (
		        select
		                 STATUS_TYPE
		               , CRITERIA_DETAIL_ID
		               , CRITERIA_DETAIL_NM
		               , NODE_TYPE_NM
		               , count(*) as cnt
		        from
		              (
		                select
		                         CASE
		                           WHEN a.STATUS like 'D%' then '심의완료'
		                           WHEN (a.STATUS = 'F0'
		                           		or a.STATUS = 'F1'
		                           		or a.STATUS = 'F2'
		                           		or a.STATUS = 'F3') then '결재완료'
		                           WHEN a.STATUS = 'G0' then '개발완료'
		                           WHEN a.STATUS = 'H0' then '테스트완료'
		                           WHEN a.STATUS = 'F4' then '이행결재완료'
		                           WHEN a.STATUS = 'I0' then '이행완료'
		                           ELSE '미지정'
		                         END AS STATUS_TYPE
		                       <if test="criteriaId != null and (criteriaId eq 'System'.toString())">
		                       , c.SYSTEM_ID as CRITERIA_DETAIL_ID
		                       , c.SYSTEM_NM||'('||c.SYSTEM_CD||')' as CRITERIA_DETAIL_NM
		                       , cdim08.NM as NODE_TYPE_NM
		                       </if>
		                       <if test="criteriaId != null and (criteriaId eq 'Resource'.toString())">
		                       , cdim04.CD AS CRITERIA_DETAIL_ID
		                       , cdim04.NM AS CRITERIA_DETAIL_NM
		                       , '' AS NODE_TYPE_NM
		                       </if>
		                       <if test="criteriaId != null and (criteriaId eq 'Representative'.toString())">
		                       , c.USER_ID as CRITERIA_DETAIL_ID
		                       , c.USER_NM as CRITERIA_DETAIL_NM
		                       , cdim08.NM as NODE_TYPE_NM
		                       </if>
		                       <if test="criteriaId != null and (criteriaId eq 'Channel'.toString())">
		                       , c.CHANNEL_ID as CRITERIA_DETAIL_ID
		                       , c.CHANNEL_NM as CRITERIA_DETAIL_NM
		                       , '' as NODE_TYPE_NM
		                       </if>
		                       <if test="criteriaId != null and (criteriaId eq 'Requirement'.toString())">
		                       , a.REQUIREMENT_ID as CRITERIA_DETAIL_ID
		                       , a.REQUIREMENT_NM as CRITERIA_DETAIL_NM
		                       , '' as NODE_TYPE_NM
		                       </if>
		                       <if test="criteriaId != null and (criteriaId eq 'Interface'.toString())">
		                       <!-- , b.INTERFACE_ID as CRITERIA_DETAIL_ID -->
		                       , b.INTEGRATION_ID as CRITERIA_DETAIL_ID
		                       , b.INTERFACE_NM as CRITERIA_DETAIL_NM
		                       , '' as NODE_TYPE_NM
		                       </if>
		                       <if test="criteriaId != null and (criteriaId eq 'Process'.toString())">
		                       , c.BUSINESS_ID as CRITERIA_DETAIL_ID
				               , c.BUSINESS_NM as CRITERIA_DETAIL_NM
				               , '' as NODE_TYPE_NM
		                       </if>
		                from
                               TAN0101 a
                               <if test="criteriaId != null and (criteriaId eq 'System'.toString())">
                               inner join (SELECT distinct INTERFACE_ID, SYSTEM_ID, NODE_TYPE FROM TAN0213 WHERE DEL_YN='N') b ON b.INTERFACE_ID = a.INTERFACE_ID
                               inner join (SELECT SYSTEM_ID, SYSTEM_NM, SYSTEM_CD FROM TIM0101 WHERE DEL_YN='N' and grp_yn = 'N'
                                 <if test="criteriaDetailId != null and criteriaDetailId != ''">
                                 and SYSTEM_ID = #{criteriaDetailId}
                                 </if>
                               ) c ON b.SYSTEM_ID = c.SYSTEM_ID
                               left outer join (select CD, NM from TSU0301  where LEVEL1 = 'IM' and LEVEL2 = '08' and DEL_YN = 'N' ) cdim08 on b.NODE_TYPE = cdim08.CD
                               </if>
                               <if test="criteriaId != null and (criteriaId eq 'Resource'.toString())">
                               inner join (select distinct INTERFACE_ID, SYSTEM_ID, RESOURCE_TYPE from TAN0213 where DEL_YN = 'N'
                                 <if test="criteriaDetailId != null and criteriaDetailId != ''">
                                 and RESOURCE_TYPE = #{criteriaDetailId}
                                 </if>
                               ) b on a.INTERFACE_ID = b.INTERFACE_ID
                               inner join (select SYSTEM_ID from TIM0101 where DEL_YN = 'N' and grp_yn = 'N') c on b.SYSTEM_ID = c.SYSTEM_ID
                               left outer join (select CD, NM from TSU0301  where LEVEL1 = 'IM' and LEVEL2 = '04' and DEL_YN = 'N' ) cdim04 on b.RESOURCE_TYPE = cdim04.CD
		                       </if>
		                       <if test="criteriaId != null and (criteriaId eq 'Representative'.toString())">
		                       inner join (select distinct INTERFACE_ID, USER_ID from TAN0219 where DEL_YN = 'N') b on a.INTERFACE_ID = b.INTERFACE_ID
		                       inner join (select USER_ID, USER_NM from TSU0101 where DEL_YN = 'N'
		                         <if test="criteriaDetailNm != null and criteriaDetailNm != ''">
		                         <!-- and USER_ID = #{criteriaDetailId} -->
		                         and USER_NM like '%'||#{criteriaDetailNm}||'%'
		                         </if>
		                       ) c on b.USER_ID = c.USER_ID
		                       inner join (select distinct INTERFACE_ID, NODE_TYPE from TAN0213 where DEL_YN = 'N') d on b.INTERFACE_ID = d.INTERFACE_ID
		                       left outer join (select CD, NM from TSU0301  where LEVEL1 = 'IM' and LEVEL2 = '08' and DEL_YN = 'N' ) cdim08 on d.NODE_TYPE = cdim08.CD
		                       </if>
		                       <if test="criteriaId != null and (criteriaId eq 'Channel'.toString())">
		                       inner join (SELECT INTERFACE_ID, CHANNEL_ID FROM TAN0201 WHERE DEL_YN='N') b ON b.INTERFACE_ID = a.INTERFACE_ID
		                       inner join (SELECT CHANNEL_ID, CHANNEL_NM FROM TIM0002 WHERE DEL_YN='N'
		                         <if test="criteriaDetailId != null and criteriaDetailId != ''">
		                         and CHANNEL_ID = #{criteriaDetailId}
		                         </if>
		                       ) c ON b.CHANNEL_ID = c.CHANNEL_ID
		                       </if>
		                       <if test="criteriaId != null and (criteriaId eq 'Interface'.toString())">
		                       inner join (SELECT INTEGRATION_ID, INTERFACE_ID, INTERFACE_NM FROM TAN0201 WHERE DEL_YN='N'
		                         <if test="criteriaDetailId != null and criteriaDetailId != ''">
		                         <!-- and INTERFACE_ID = #{criteriaDetailId} -->
		                         and INTEGRATION_ID = #{criteriaDetailId}
		                         </if>
		                         <if test="criteriaDetailNm != null and criteriaDetailNm != ''">
		                         and INTERFACE_NM like '%'||#{criteriaDetailNm}||'%'
		                         </if>
		                       ) b ON b.INTERFACE_ID = a.INTERFACE_ID
		                       </if>
		                       <if test="criteriaId != null and (criteriaId eq 'Process'.toString())">
		                         <choose>
		                           <when test="criteriaDetailId != null and criteriaDetailId != ''">
		                             <if test="searchMode != null and (searchMode eq 'DEFAULT'.toString())">
		                       inner JOIN ( SELECT b1.P_BIZ_ID, b1.C_BIZ_ID AS BUSINESS_ID   FROM TIM0302 b1   WHERE b1.DEL_YN = 'N'   AND b1.P_BIZ_ID = #{criteriaDetailId} ) b ON a.BUSINESS_ID = b.BUSINESS_ID
		                             </if>
		                             <if test="searchMode != null and (searchMode eq 'DETAIL'.toString())">
                               inner JOIN (
	                               SELECT  b1.P_BIZ_ID, b1.C_BIZ_ID AS BUSINESS_ID
	                               FROM   TIM0302 b1
	                                 inner JOIN (
	                                   SELECT  b21.C_BIZ_ID
	                                   FROM    TIM0302 b21
	                                   WHERE   b21.DEL_YN = 'N'
	                                     AND   b21.P_BIZ_ID = #{criteriaDetailId}
	                                     AND   b21.DEPTH = 1
	                               ) b2 ON b1.P_BIZ_ID = b2.C_BIZ_ID
	                               WHERE b1.DEL_YN = 'N'
                               ) b ON a.BUSINESS_ID = b.BUSINESS_ID
		                             </if>
		                       inner JOIN ( SELECT c1.BUSINESS_ID, c1.BUSINESS_NM   FROM TIM0301 c1   WHERE c1.DEL_YN = 'N' ) c ON b.P_BIZ_ID = c.BUSINESS_ID
		                           </when>
		                           <otherwise>
		                       inner JOIN ( SELECT b1.P_BIZ_ID, b1.C_BIZ_ID AS BUSINESS_ID   FROM TIM0302 b1   WHERE b1.DEL_YN = 'N' ) b ON a.BUSINESS_ID = b.BUSINESS_ID
		                       inner JOIN ( SELECT c1.BUSINESS_ID, c1.BUSINESS_NM   FROM TIM0301 c1   WHERE c1.DEL_YN = 'N'   AND c1.ROOT_YN = 'Y' ) c ON b.P_BIZ_ID = c.BUSINESS_ID
		                           </otherwise>
		                         </choose>
		                       </if>
                        where
                               a.DEL_YN = 'N'
                          <if test="criteriaId != null and (criteriaId eq 'Requirement'.toString())">
                            <if test="criteriaDetailNm != null and criteriaDetailNm != ''">
                          and  a.REQUIREMENT_NM like '%'||#{criteriaDetailNm}||'%'
                            </if>
                          </if>
				)
		        group by
		            STATUS_TYPE
		          , CRITERIA_DETAIL_ID
		          , CRITERIA_DETAIL_NM
		          , NODE_TYPE_NM
		)
		group by CRITERIA_DETAIL_ID, CRITERIA_DETAIL_NM, NODE_TYPE_NM
		order by CRITERIA_DETAIL_ID asc
  	</select>

  	<resultMap id="InterfaceStatusResultMapForList" type="StatisticsDevelopmentStatus">
  		<id property="criteriaDetailId" 		column="CRITERIA_DETAIL_ID"/>
		<result property="criteriaDetailNm" 	column="CRITERIA_DETAIL_NM"/>
		<result property="nodeTypeNm" 			column="NODE_TYPE_NM"/>
		<result property="child_Cnt" 			column="CHILD_CNT"/>

		<result property="review_C" 		column="REVIEW_C_CNT"/>
	    <result property="approval_C" 		column="APPROVAL_C_CNT"/>
	    <result property="dev_C" 		column="DEV_C_CNT"/>
	    <result property="test_C" 		column="TEST_C_CNT"/>
	    <result property="real_approval_C" 		column="REAL_APPROVAL_C_CNT"/>
	    <result property="real_C" 		column="REAL_C_CNT"/>
	    <result property="total_R_Cnt" 		column="T_R_CNT"/>
	    <result property="total_Cnt" 		column="T_CNT"/>
	</resultMap>


	<sql id="period-summary-main">
					(
						SELECT
							GROUP_ID
							, INTF_ID
							, SUM( NVL(ST_COMPSIZE, 0) + NVL(ST_N_COMPSIZE, 0) ) AS DATA_SIZE
							, SUM( NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0) ) AS ERROR_CNT
							, SUM( NVL(ST_PROCESSING, 0) ) AS PROCESSING_CNT
							, SUM( NVL(ST_FINISHED, 0) ) AS FINISHED_CNT
							, SUM( NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0) + NVL(ST_PROCESSING, 0) + NVL(ST_FINISHED, 0) ) AS TOTAL_CNT
						<if test="scCriteriaType != null and (scCriteriaType eq 'hourly'.toString())">
						FROM  SI_STAT_INTF_HOUR
						WHERE
							1=1
							AND ST_YEAR||ST_MONTH||ST_DAY||ST_HOUR BETWEEN #{scPeriodFrom} AND #{scPeriodTo}
						</if>
						<if test="scCriteriaType != null and (scCriteriaType eq 'daily'.toString())">
						FROM  SI_STAT_INTF_DAY
						WHERE
							1=1
							AND ST_YEAR||ST_MONTH||ST_DAY BETWEEN #{scPeriodFrom} AND #{scPeriodTo}
						</if>
						<if test="scCriteriaType != null and (scCriteriaType eq 'monthly'.toString())">
						FROM  SI_STAT_INTF_MONTH
						WHERE
							1=1
							AND ST_YEAR||ST_MONTH BETWEEN #{scPeriodFrom} AND #{scPeriodTo}
						</if>
						GROUP BY GROUP_ID, INTF_ID
					) A
	</sql>

	<sql id="period-list-main">
					(
						<if test="scCriteriaType != null and (scCriteriaType eq 'hourly'.toString())">
						SELECT
							GROUP_ID
							, INTF_ID
							, ST_YEAR||ST_MONTH||ST_DAY||ST_HOUR AS RANGE
							, NVL(ST_COMPSIZE, 0) + NVL(ST_N_COMPSIZE, 0) AS DATA_SIZE
							, NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0) AS ERROR_CNT
							, NVL(ST_PROCESSING, 0) AS PROCESSING_CNT
							, NVL(ST_FINISHED, 0) AS FINISHED_CNT
							, NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0) + NVL(ST_PROCESSING, 0) + NVL(ST_FINISHED, 0) AS TOTAL_CNT
						FROM  SI_STAT_INTF_HOUR
						WHERE
							1=1
							AND ST_YEAR||ST_MONTH||ST_DAY||ST_HOUR BETWEEN #{scPeriodFrom} AND #{scPeriodTo}
						</if>
						<if test="scCriteriaType != null and (scCriteriaType eq 'daily'.toString())">
						SELECT
							GROUP_ID
							, INTF_ID
							, ST_YEAR||ST_MONTH||ST_DAY AS RANGE
							, NVL(ST_COMPSIZE, 0) + NVL(ST_N_COMPSIZE, 0) AS DATA_SIZE
							, NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0) AS ERROR_CNT
							, NVL(ST_PROCESSING, 0) AS PROCESSING_CNT
							, NVL(ST_FINISHED, 0) AS FINISHED_CNT
							, NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0) + NVL(ST_PROCESSING, 0) + NVL(ST_FINISHED, 0) AS TOTAL_CNT
						FROM  SI_STAT_INTF_DAY
						WHERE
							1=1
							AND ST_YEAR||ST_MONTH||ST_DAY BETWEEN #{scPeriodFrom} AND #{scPeriodTo}
						</if>
						<if test="scCriteriaType != null and (scCriteriaType eq 'monthly'.toString())">
						SELECT
							GROUP_ID
							, INTF_ID
							, ST_YEAR||ST_MONTH AS RANGE
							, NVL(ST_COMPSIZE, 0) + NVL(ST_N_COMPSIZE, 0) AS DATA_SIZE
							, NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0) AS ERROR_CNT
							, NVL(ST_PROCESSING, 0) AS PROCESSING_CNT
							, NVL(ST_FINISHED, 0) AS FINISHED_CNT
							, NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0) + NVL(ST_PROCESSING, 0) + NVL(ST_FINISHED, 0) AS TOTAL_CNT
						FROM  SI_STAT_INTF_MONTH
						WHERE
							1=1
							AND ST_YEAR||ST_MONTH BETWEEN #{scPeriodFrom} AND #{scPeriodTo}
						</if>
					) A
	</sql>

	<sql id="period-innerJoin-interface">
					<if test="scCategory != null and (scCategory eq 'interface'.toString())">
					INNER JOIN
					(
						SELECT
							  INTEGRATION_ID AS CATEGORY_ID
							, INTERFACE_NM AS CATEGORY_NM
						FROM TAN0201
						WHERE
							DEL_YN = 'N'
						<if test="scCategoryDetailNm != null and scCategoryDetailNm != ''">
							AND INTERFACE_NM like '%'||#{scCategoryDetailNm}||'%'
						</if>
						<if test="scCategoryDetailId != null and scCategoryDetailId != ''">
							AND INTEGRATION_ID like '%'||#{scCategoryDetailId}||'%'
						</if>
					) B
					ON A.INTF_ID = B.CATEGORY_ID OR A.GROUP_ID || '_' || A.INTF_ID = B.CATEGORY_ID
					</if>
	</sql>

	<sql id="period-innerJoin-process">
					<if test="scCategory != null and (scCategory eq 'process'.toString())">
					INNER JOIN
					(
						SELECT
							  B4.INTEGRATION_ID
							, B3.BUSINESS_ID AS CATEGORY_ID
							, B3.BUSINESS_NM AS CATEGORY_NM
						FROM
							TAN0218 B1

							INNER JOIN
							(
								TAN0201 B4
							)
							ON B4.INTERFACE_ID = B1.INTERFACE_ID

							<if test="searchMode != null and (searchMode eq 'DEFAULT'.toString())">

							INNER JOIN
							(
								SELECT
									  B21.P_BIZ_ID
									, B21.C_BIZ_ID AS BUSINESS_ID
								FROM TIM0302 B21
								WHERE B21.DEL_YN = 'N'
							) B2
							ON B1.BUSINESS_ID = B2.BUSINESS_ID

							INNER JOIN
							(
								SELECT
								  	  B31.BUSINESS_ID
									, B31.BUSINESS_NM
								FROM TIM0301 B31
								WHERE
									B31.DEL_YN = 'N'
									AND B31.ROOT_YN = 'Y'
							) B3
							ON B2.P_BIZ_ID = B3.BUSINESS_ID
							</if>

							<if test="searchMode != null and (searchMode eq 'DETAIL'.toString())">

							INNER JOIN
							(
								SELECT
									B21.P_BIZ_ID,
									B21.C_BIZ_ID AS BUSINESS_ID
								FROM
									TIM0302 B21
									INNER JOIN
									(
										SELECT
											B221.C_BIZ_ID
										FROM
											TIM0302 B221
										WHERE
											B221.DEL_YN = 'N'
											<if test="categoryId != null and categoryId != ''">
											AND B221.P_BIZ_ID = #{categoryId}
											AND B221.DEPTH = 1
											</if>
											<if test="scCategoryDetailId != null and scCategoryDetailId != ''">
											AND B221.C_BIZ_ID = #{scCategoryDetailId}
											</if>
									) B22
									ON B21.P_BIZ_ID = B22.C_BIZ_ID
								WHERE B21.DEL_YN = 'N'
							) B2
							ON B1.BUSINESS_ID = B2.BUSINESS_ID

							INNER JOIN
							(
								SELECT
									  B31.BUSINESS_ID
									, B31.BUSINESS_NM
								FROM TIM0301 B31
								WHERE B31.DEL_YN = 'N'
							) B3
							ON B2.P_BIZ_ID = B3.BUSINESS_ID
						</if>
						WHERE
							B1.DEL_YN = 'N'
							<if test="scNodeType != null and scNodeType != ''">
							AND B1.NODE_TYPE = #{scNodeType}
							</if>
						GROUP BY B4.INTEGRATION_ID, B3.BUSINESS_ID, B3.BUSINESS_NM
					) B
					ON A.INTF_ID = B.INTEGRATION_ID OR A.GROUP_ID || '_' || A.INTF_ID = B.INTEGRATION_ID
					</if>
	</sql>

	<sql id="period-innerJoin-requirement">
					<if test="scCategory != null and (scCategory eq 'requirement'.toString())">
					INNER JOIN
					(
						SELECT
							  B2.INTEGRATION_ID
							, B1.REQUIREMENT_ID AS CATEGORY_ID
							, B1.REQUIREMENT_NM AS CATEGORY_NM
						FROM
							TAN0101 B1, TAN0201 B2
						WHERE
							B1.INTERFACE_ID = B2.INTERFACE_ID
							AND B1.DEL_YN = 'N'
							<if test="scCategoryDetailId != null and scCategoryDetailId != ''">
							AND B1.REQUIREMENT_ID = #{scCategoryDetailId}
							</if>
							<if test="scCategoryDetailNm != null and scCategoryDetailNm != ''">
							AND B1.REQUIREMENT_NM like '%'||#{scCategoryDetailNm}||'%'
							</if>
					) B
					ON A.INTF_ID = B.INTEGRATION_ID OR A.GROUP_ID || '_' || A.INTF_ID = B.INTEGRATION_ID
					</if>
	</sql>

	<sql id="period-innerJoin-channel">
					<if test="scCategory != null and (scCategory eq 'channel'.toString())">
					INNER JOIN
					(
						SELECT
							  B1.INTEGRATION_ID
							, B2.CHANNEL_ID AS CATEGORY_ID
							, B2.CHANNEL_NM AS CATEGORY_NM
						FROM
							TAN0201 B1
							INNER JOIN
							(
								SELECT
									  CHANNEL_ID
									, CHANNEL_NM
								FROM TIM0002
								WHERE DEL_YN='N'
							) B2 ON B2.CHANNEL_ID = B1.CHANNEL_ID
						WHERE
						B1.DEL_YN = 'N'
						<if test="scCategoryDetailId != null and scCategoryDetailId != ''">
						AND B1.CHANNEL_ID = #{scCategoryDetailId}
						</if>
					) B
					ON A.INTF_ID = B.INTEGRATION_ID OR A.GROUP_ID || '_' || A.INTF_ID = B.INTEGRATION_ID
					</if>
 	</sql>

	<sql id="period-innerJoin-system">
					<if test="scCategory != null and (scCategory eq 'system'.toString())">
					INNER JOIN (
						SELECT
							  B3.INTEGRATION_ID
							, B2.SYSTEM_ID AS CATEGORY_ID
							, B2.SYSTEM_NM||'('||B2.SYSTEM_CD||')' AS CATEGORY_NM
						FROM
							TAN0213 B1
							INNER JOIN TAN0201 B3 ON B3.INTERFACE_ID = B1.INTERFACE_ID
							INNER JOIN
							(
								SELECT
									  SYSTEM_ID
									, SYSTEM_NM
									, SYSTEM_CD
								FROM
									TIM0101
								WHERE
									DEL_YN = 'N'
									AND GRP_YN = 'N'
									<if test="scCategoryDetailId != null and scCategoryDetailId != ''">
									AND SYSTEM_ID = #{scCategoryDetailId}
									</if>
							) B2
							ON B2.SYSTEM_ID = B1.SYSTEM_ID
						WHERE
							B1.DEL_YN = 'N'
							<if test="scNodeType != null and scNodeType != ''">
							AND B1.NODE_TYPE = #{scNodeType}
							</if>
						GROUP BY B3.INTEGRATION_ID, B2.SYSTEM_ID, B2.SYSTEM_NM||'('||B2.SYSTEM_CD||')'
					) B
					ON A.INTF_ID = B.INTEGRATION_ID OR A.GROUP_ID || '_' || A.INTF_ID = B.INTEGRATION_ID
					</if>
	</sql>

	<sql id="period-innerJoin-type">
					<if test="scCategory != null and (scCategory eq 'type'.toString())">
					INNER JOIN (
						SELECT

							  B1.INTEGRATION_ID
							, B2.CD AS CATEGORY_ID
							, B2.NM AS CATEGORY_NM
							, B1.START_RES_TYPE
							, B3.NM AS START_RES_TYPE_NM
							, B1.END_RES_TYPE
							, B4.NM AS END_RES_TYPE_NM
						FROM
							TAN0201 B1
							INNER JOIN
							(
								SELECT
									CD
									, NM
								FROM TSU0301
								WHERE
									LEVEL1 = 'IM'
									AND LEVEL2 = '12'
									AND DEL_YN = 'N'
							) B2
							ON B2.cd = B1.DATA_PR_METHOD
							LEFT OUTER JOIN (SELECT CD, NM FROM TSU0301 WHERE LEVEL1 = 'IM' AND LEVEL2='04' AND DEL_YN='N') B3 ON B3.CD = B1.START_RES_TYPE
							LEFT OUTER JOIN (SELECT CD, NM FROM TSU0301 WHERE LEVEL1 = 'IM' AND LEVEL2='04' AND DEL_YN='N') B4 ON B4.CD = B1.END_RES_TYPE
						WHERE
							DEL_YN = 'N'
							<if test="scDataPrMethodType != null and scDataPrMethodType != ''">
							AND B1.DATA_PR_METHOD = #{scDataPrMethodType}
							</if>
							<if test="scStartResourceType != null and scStartResourceType != ''">
							AND B1.START_RES_TYPE = #{scStartResourceType}
							</if>
							<if test="scEndResourceType != null and scEndResourceType != ''">
							AND B1.END_RES_TYPE = #{scEndResourceType}
							</if>
					) B
					ON A.INTF_ID = B.INTEGRATION_ID OR A.GROUP_ID || '_' || A.INTF_ID = B.INTEGRATION_ID
					</if>
	</sql>


	<select id="getStatisticsInterfacePeriodSummary" resultMap="StatisticsInterfacePeriodSummaryMap">
		SELECT
			  CATEGORY_ID
			, CATEGORY_NM
			, DATA_SIZE
			, ERROR_CNT
			, PROCESSING_CNT
			, FINISHED_CNT
			, TOTAL_CNT
		FROM
			(
				SELECT
					  B.CATEGORY_ID
					, B.CATEGORY_NM
					, NVL( SUM(A.DATA_SIZE), 0 ) AS DATA_SIZE
					, NVL( SUM(A.ERROR_CNT), 0 ) AS ERROR_CNT
					, NVL( SUM(A.PROCESSING_CNT), 0 ) AS PROCESSING_CNT
					, NVL( SUM(A.FINISHED_CNT), 0 ) AS FINISHED_CNT
					, NVL( SUM(A.TOTAL_CNT), 0 ) AS TOTAL_CNT
				FROM
					<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.period-summary-main"/>
					<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.period-innerJoin-interface"/>
					<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.period-innerJoin-process"/>
					<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.period-innerJoin-requirement"/>
					<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.period-innerJoin-channel"/>
					<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.period-innerJoin-system"/>
					<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.period-innerJoin-type"/>
				GROUP BY B.CATEGORY_ID, B.CATEGORY_NM
				ORDER BY CATEGORY_NM ASC
			)

		UNION ALL


		SELECT
			  '-' AS CATEGORY_ID
			, 'TOTAL-SUM' AS CATEGORY_NM
			, NVL( SUM(A.DATA_SIZE), 0 ) AS DATA_SIZE
			, NVL( SUM(A.ERROR_CNT), 0 ) AS ERROR_CNT
			, NVL( SUM(A.PROCESSING_CNT), 0 ) AS PROCESSING_CNT
			, NVL( SUM(A.FINISHED_CNT), 0 ) AS FINISHED_CNT
			, NVL( SUM(A.TOTAL_CNT), 0 ) AS TOTAL_CNT
		FROM
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.period-summary-main"/>
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.period-innerJoin-interface"/>
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.period-innerJoin-process"/>
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.period-innerJoin-requirement"/>
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.period-innerJoin-channel"/>
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.period-innerJoin-system"/>
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.period-innerJoin-type"/>
	</select>

	<resultMap id="StatisticsInterfacePeriodSummaryMap" type="Map">
		<id property="categoryId" 			column="CATEGORY_ID"/>
		<result property="categoryId" 		column="CATEGORY_ID"/>
		<result property="categoryNm" 		column="CATEGORY_NM"/>
		<result property="dataSize" 		column="DATA_SIZE"/>
		<result property="errorCnt" 		column="ERROR_CNT"/>
		<result property="processingCnt"	column="PROCESSING_CNT"/>
		<result property="finishedCnt"		column="FINISHED_CNT"/>
		<result property="totalCnt"			column="TOTAL_CNT"/>
		<result property="range"			column="RANGE"/>
	</resultMap>

	<select id="getStatisticsInterfacePeriodList" resultMap="StatisticsInterfacePeriodListMap">
		SELECT
			  CATEGORY_ID
			, CATEGORY_NM
			, RANGE
			, DATA_SIZE
			, ERROR_CNT
			, PROCESSING_CNT
			, FINISHED_CNT
			, TOTAL_CNT
		FROM
			(
				SELECT
					  B.CATEGORY_ID
					, B.CATEGORY_NM
					, A.RANGE
					, NVL( SUM(A.DATA_SIZE), 0 ) AS DATA_SIZE
					, NVL( SUM(A.ERROR_CNT), 0 ) AS ERROR_CNT
					, NVL( SUM(A.PROCESSING_CNT), 0 ) AS PROCESSING_CNT
					, NVL( SUM(A.FINISHED_CNT), 0 ) AS FINISHED_CNT
					, NVL( SUM(A.TOTAL_CNT), 0 ) AS TOTAL_CNT
				FROM
					<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.period-list-main"/>
					<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.period-innerJoin-interface"/>
					<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.period-innerJoin-process"/>
					<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.period-innerJoin-requirement"/>
					<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.period-innerJoin-channel"/>
					<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.period-innerJoin-system"/>
					<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.period-innerJoin-type"/>
				GROUP BY B.CATEGORY_ID, B.CATEGORY_NM, A.RANGE
				ORDER BY RANGE ASC
			)

		UNION ALL

		SELECT
			  '-' AS CATEGORY_ID
			, 'TOTAL-SUM' AS CATEGORY_NM
			, '-' AS RANGE
			, NVL( SUM(A.DATA_SIZE), 0 ) AS DATA_SIZE
			, NVL( SUM(A.ERROR_CNT), 0 ) AS ERROR_CNT
			, NVL( SUM(A.PROCESSING_CNT), 0 ) AS PROCESSING_CNT
			, NVL( SUM(A.FINISHED_CNT), 0 ) AS FINISHED_CNT
			, NVL( SUM(A.TOTAL_CNT), 0 ) AS TOTAL_CNT
		FROM
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.period-summary-main"/>
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.period-innerJoin-interface"/>
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.period-innerJoin-process"/>
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.period-innerJoin-requirement"/>
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.period-innerJoin-channel"/>
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.period-innerJoin-system"/>
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.period-innerJoin-type"/>

	</select>

	<resultMap id="StatisticsInterfacePeriodListMap" type="Map">
		<id property="categoryId" 			column="CATEGORY_ID"/>
		<result property="categoryId" 		column="CATEGORY_ID"/>
		<result property="categoryNm" 		column="CATEGORY_NM"/>
		<result property="range" 			column="RANGE"/>
		<result property="dataSize" 		column="DATA_SIZE"/>
		<result property="errorCnt" 		column="ERROR_CNT"/>
		<result property="processingCnt"	column="PROCESSING_CNT"/>
		<result property="finishedCnt"		column="FINISHED_CNT"/>
		<result property="totalCnt"			column="TOTAL_CNT"/>
	</resultMap>





	<!--
	@deprecated
	기준조건별 인터페이스 기간별 - 통계를 조회한다.
	public List<StatisticsInterfacePeriod> getStatisticsInterfacePeriod throws Exception;
	 -->
	<select id="getStatisticsInterfacePeriod" resultMap="StatisticsPeriodResultMapForList">
		SELECT a.STATUS_TYPE,
		       b.CATEGORY_ID,
		       b.CATEGORY_NM,
		       SUM(NVL(a.ROW_SUM, 0)) as ROW_SUM,
		       SUM(NVL(a.DATA_SIZE, 0)) AS DATA_SIZE,
		       <if test="scCriteriaType != null and (scCriteriaType eq 'hourly'.toString())">
		       SUM(NVL(a.CNT00, 0)) as CNT00,
		       SUM(NVL(a.CNT01, 0)) as CNT01,
		       SUM(NVL(a.CNT02, 0)) as CNT02,
		       SUM(NVL(a.CNT03, 0)) as CNT03,
		       SUM(NVL(a.CNT04, 0)) as CNT04,
		       SUM(NVL(a.CNT05, 0)) as CNT05,
		       SUM(NVL(a.CNT06, 0)) as CNT06,
		       SUM(NVL(a.CNT07, 0)) as CNT07,
		       SUM(NVL(a.CNT08, 0)) as CNT08,
		       SUM(NVL(a.CNT09, 0)) as CNT09,
		       SUM(NVL(a.CNT10, 0)) as CNT10,
		       SUM(NVL(a.CNT11, 0)) as CNT11,
		       SUM(NVL(a.CNT12, 0)) as CNT12,
		       SUM(NVL(a.CNT13, 0)) as CNT13,
		       SUM(NVL(a.CNT14, 0)) as CNT14,
		       SUM(NVL(a.CNT15, 0)) as CNT15,
		       SUM(NVL(a.CNT16, 0)) as CNT16,
		       SUM(NVL(a.CNT17, 0)) as CNT17,
		       SUM(NVL(a.CNT18, 0)) as CNT18,
		       SUM(NVL(a.CNT19, 0)) as CNT19,
		       SUM(NVL(a.CNT20, 0)) as CNT20,
		       SUM(NVL(a.CNT21, 0)) as CNT21,
		       SUM(NVL(a.CNT22, 0)) as CNT22,
		       SUM(NVL(a.CNT23, 0)) as CNT23
		       </if>
		       <if test="scCriteriaType != null and (scCriteriaType eq 'daily'.toString())">
		       SUM(NVL(a.CNT01, 0)) as CNT01,
		       SUM(NVL(a.CNT02, 0)) as CNT02,
		       SUM(NVL(a.CNT03, 0)) as CNT03,
		       SUM(NVL(a.CNT04, 0)) as CNT04,
		       SUM(NVL(a.CNT05, 0)) as CNT05,
		       SUM(NVL(a.CNT06, 0)) as CNT06,
		       SUM(NVL(a.CNT07, 0)) as CNT07,
		       SUM(NVL(a.CNT08, 0)) as CNT08,
		       SUM(NVL(a.CNT09, 0)) as CNT09,
		       SUM(NVL(a.CNT10, 0)) as CNT10,
		       SUM(NVL(a.CNT11, 0)) as CNT11,
		       SUM(NVL(a.CNT12, 0)) as CNT12,
		       SUM(NVL(a.CNT13, 0)) as CNT13,
		       SUM(NVL(a.CNT14, 0)) as CNT14,
		       SUM(NVL(a.CNT15, 0)) as CNT15,
		       SUM(NVL(a.CNT16, 0)) as CNT16,
		       SUM(NVL(a.CNT17, 0)) as CNT17,
		       SUM(NVL(a.CNT18, 0)) as CNT18,
		       SUM(NVL(a.CNT19, 0)) as CNT19,
		       SUM(NVL(a.CNT20, 0)) as CNT20,
		       SUM(NVL(a.CNT21, 0)) as CNT21,
		       SUM(NVL(a.CNT22, 0)) as CNT22,
		       SUM(NVL(a.CNT23, 0)) as CNT23,
		       SUM(NVL(a.CNT24, 0)) as CNT24,
		       SUM(NVL(a.CNT25, 0)) as CNT25,
		       SUM(NVL(a.CNT26, 0)) as CNT26,
		       SUM(NVL(a.CNT27, 0)) as CNT27,
		       SUM(NVL(a.CNT28, 0)) as CNT28,
		       SUM(NVL(a.CNT29, 0)) as CNT29,
		       SUM(NVL(a.CNT30, 0)) as CNT30,
		       SUM(NVL(a.CNT31, 0)) as CNT31
		       </if>
		       <if test="scCriteriaType != null and (scCriteriaType eq 'monthly'.toString())">
		       SUM(NVL(a.CNT01, 0)) as CNT01,
		       SUM(NVL(a.CNT02, 0)) as CNT02,
		       SUM(NVL(a.CNT03, 0)) as CNT03,
		       SUM(NVL(a.CNT04, 0)) as CNT04,
		       SUM(NVL(a.CNT05, 0)) as CNT05,
		       SUM(NVL(a.CNT06, 0)) as CNT06,
		       SUM(NVL(a.CNT07, 0)) as CNT07,
		       SUM(NVL(a.CNT08, 0)) as CNT08,
		       SUM(NVL(a.CNT09, 0)) as CNT09,
		       SUM(NVL(a.CNT10, 0)) as CNT10,
		       SUM(NVL(a.CNT11, 0)) as CNT11,
		       SUM(NVL(a.CNT12, 0)) as CNT12
		       </if>
		  FROM
		       (
		              (
		              SELECT '99' AS STATUS_TYPE,
		                     SUM(NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)) AS ROW_SUM ,
		                     SUM(NVL(ST_COMPSIZE, 0) + NVL(ST_N_COMPSIZE, 0)) AS DATA_SIZE,
		                     INTF_ID,
		                     <if test="scCriteriaType != null and (scCriteriaType eq 'hourly'.toString())">
		                     SUM(NVL(DECODE(ST_HOUR, '00', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT00,
		                     SUM(NVL(DECODE(ST_HOUR, '01', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT01,
		                     SUM(NVL(DECODE(ST_HOUR, '02', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT02,
		                     SUM(NVL(DECODE(ST_HOUR, '03', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT03,
		                     SUM(NVL(DECODE(ST_HOUR, '04', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT04,
		                     SUM(NVL(DECODE(ST_HOUR, '05', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT05,
		                     SUM(NVL(DECODE(ST_HOUR, '06', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT06,
		                     SUM(NVL(DECODE(ST_HOUR, '07', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT07,
		                     SUM(NVL(DECODE(ST_HOUR, '08', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT08,
		                     SUM(NVL(DECODE(ST_HOUR, '09', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT09,
		                     SUM(NVL(DECODE(ST_HOUR, '10', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT10,
		                     SUM(NVL(DECODE(ST_HOUR, '11', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT11,
		                     SUM(NVL(DECODE(ST_HOUR, '12', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT12,
		                     SUM(NVL(DECODE(ST_HOUR, '13', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT13,
		                     SUM(NVL(DECODE(ST_HOUR, '14', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT14,
		                     SUM(NVL(DECODE(ST_HOUR, '15', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT15,
		                     SUM(NVL(DECODE(ST_HOUR, '16', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT16,
		                     SUM(NVL(DECODE(ST_HOUR, '17', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT17,
		                     SUM(NVL(DECODE(ST_HOUR, '18', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT18,
		                     SUM(NVL(DECODE(ST_HOUR, '19', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT19,
		                     SUM(NVL(DECODE(ST_HOUR, '20', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT20,
		                     SUM(NVL(DECODE(ST_HOUR, '21', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT21,
		                     SUM(NVL(DECODE(ST_HOUR, '22', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT22,
		                     SUM(NVL(DECODE(ST_HOUR, '23', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT23
		                     </if>
		                     <if test="scCriteriaType != null and (scCriteriaType eq 'daily'.toString())">
		                     SUM(NVL(DECODE(ST_DAY, '01', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT01,
		                     SUM(NVL(DECODE(ST_DAY, '02', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT02,
		                     SUM(NVL(DECODE(ST_DAY, '03', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT03,
		                     SUM(NVL(DECODE(ST_DAY, '04', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT04,
		                     SUM(NVL(DECODE(ST_DAY, '05', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT05,
		                     SUM(NVL(DECODE(ST_DAY, '06', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT06,
		                     SUM(NVL(DECODE(ST_DAY, '07', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT07,
		                     SUM(NVL(DECODE(ST_DAY, '08', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT08,
		                     SUM(NVL(DECODE(ST_DAY, '09', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT09,
		                     SUM(NVL(DECODE(ST_DAY, '10', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT10,
		                     SUM(NVL(DECODE(ST_DAY, '11', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT11,
		                     SUM(NVL(DECODE(ST_DAY, '12', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT12,
		                     SUM(NVL(DECODE(ST_DAY, '13', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT13,
		                     SUM(NVL(DECODE(ST_DAY, '14', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT14,
		                     SUM(NVL(DECODE(ST_DAY, '15', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT15,
		                     SUM(NVL(DECODE(ST_DAY, '16', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT16,
		                     SUM(NVL(DECODE(ST_DAY, '17', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT17,
		                     SUM(NVL(DECODE(ST_DAY, '18', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT18,
		                     SUM(NVL(DECODE(ST_DAY, '19', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT19,
		                     SUM(NVL(DECODE(ST_DAY, '20', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT20,
		                     SUM(NVL(DECODE(ST_DAY, '21', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT21,
		                     SUM(NVL(DECODE(ST_DAY, '22', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT22,
		                     SUM(NVL(DECODE(ST_DAY, '23', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT23,
		                     SUM(NVL(DECODE(ST_DAY, '24', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT24,
		                     SUM(NVL(DECODE(ST_DAY, '25', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT25,
		                     SUM(NVL(DECODE(ST_DAY, '26', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT26,
		                     SUM(NVL(DECODE(ST_DAY, '27', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT27,
		                     SUM(NVL(DECODE(ST_DAY, '28', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT28,
		                     SUM(NVL(DECODE(ST_DAY, '29', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT29,
		                     SUM(NVL(DECODE(ST_DAY, '30', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT30,
		                     SUM(NVL(DECODE(ST_DAY, '31', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT31
		                     </if>
		                     <if test="scCriteriaType != null and (scCriteriaType eq 'monthly'.toString())">
		                     SUM(NVL(DECODE(ST_MONTH, '01', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT01,
		                     SUM(NVL(DECODE(ST_MONTH, '02', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT02,
		                     SUM(NVL(DECODE(ST_MONTH, '03', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT03,
		                     SUM(NVL(DECODE(ST_MONTH, '04', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT04,
		                     SUM(NVL(DECODE(ST_MONTH, '05', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT05,
		                     SUM(NVL(DECODE(ST_MONTH, '06', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT06,
		                     SUM(NVL(DECODE(ST_MONTH, '07', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT07,
		                     SUM(NVL(DECODE(ST_MONTH, '08', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT08,
		                     SUM(NVL(DECODE(ST_MONTH, '09', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT09,
		                     SUM(NVL(DECODE(ST_MONTH, '10', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT10,
		                     SUM(NVL(DECODE(ST_MONTH, '11', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT11,
		                     SUM(NVL(DECODE(ST_MONTH, '12', NVL(ST_SEND_ERR, 0) + NVL(ST_RECV_ERR, 0)), 0)) AS CNT12
		                     </if>
		                FROM
		                	SI_STAT_INTF_HOUR
		               WHERE 1=1
		                     <if test="scCriteriaType != null and (scCriteriaType eq 'hourly'.toString())">
		                     AND ST_YEAR = #{scPeriodYearFrom}
		                     AND ST_MONTH = #{scPeriodMonthFrom}
		                     AND ST_DAY = #{scPeriodDayFrom}
		                     AND ST_HOUR <![CDATA[>=]]> #{scPeriodHourFrom}
		                     AND ST_HOUR <![CDATA[<]]> #{scPeriodHourTo}
		                     </if>
		                     <if test="scCriteriaType != null and (scCriteriaType eq 'daily'.toString())">
		                     AND ST_YEAR = #{scPeriodYearFrom}
		                     AND ST_MONTH = #{scPeriodMonthFrom}
		                     AND ST_DAY <![CDATA[>=]]> #{scPeriodDayFrom}
		                     AND ST_DAY <![CDATA[<=]]> #{scPeriodDayTo}
		                     </if>
		                     <if test="scCriteriaType != null and (scCriteriaType eq 'monthly'.toString())">
		                     AND ST_YEAR = #{scPeriodYearFrom}
		                     AND ST_MONTH <![CDATA[>=]]> #{scPeriodMonthFrom}
		                     AND ST_MONTH <![CDATA[<=]]> #{scPeriodMonthTo}
		                     </if>
		               GROUP BY INTF_ID
		              )
		           UNION ALL
		              (
		              SELECT '01' AS STATUS_TYPE,
		                     SUM(NVL(ST_PROCESSING, 0)) AS ROW_SUM ,
		                     SUM(NVL(ST_COMPSIZE, 0) + NVL(ST_N_COMPSIZE, 0)) AS DATA_SIZE,
		                     INTF_ID,
		                     <if test="scCriteriaType != null and (scCriteriaType eq 'hourly'.toString())">
		                     SUM(NVL(DECODE(ST_HOUR, '00', NVL(ST_PROCESSING, 0)), 0)) AS CNT00,
		                     SUM(NVL(DECODE(ST_HOUR, '01', NVL(ST_PROCESSING, 0)), 0)) AS CNT01,
		                     SUM(NVL(DECODE(ST_HOUR, '02', NVL(ST_PROCESSING, 0)), 0)) AS CNT02,
		                     SUM(NVL(DECODE(ST_HOUR, '03', NVL(ST_PROCESSING, 0)), 0)) AS CNT03,
		                     SUM(NVL(DECODE(ST_HOUR, '04', NVL(ST_PROCESSING, 0)), 0)) AS CNT04,
		                     SUM(NVL(DECODE(ST_HOUR, '05', NVL(ST_PROCESSING, 0)), 0)) AS CNT05,
		                     SUM(NVL(DECODE(ST_HOUR, '06', NVL(ST_PROCESSING, 0)), 0)) AS CNT06,
		                     SUM(NVL(DECODE(ST_HOUR, '07', NVL(ST_PROCESSING, 0)), 0)) AS CNT07,
		                     SUM(NVL(DECODE(ST_HOUR, '08', NVL(ST_PROCESSING, 0)), 0)) AS CNT08,
		                     SUM(NVL(DECODE(ST_HOUR, '09', NVL(ST_PROCESSING, 0)), 0)) AS CNT09,
		                     SUM(NVL(DECODE(ST_HOUR, '10', NVL(ST_PROCESSING, 0)), 0)) AS CNT10,
		                     SUM(NVL(DECODE(ST_HOUR, '11', NVL(ST_PROCESSING, 0)), 0)) AS CNT11,
		                     SUM(NVL(DECODE(ST_HOUR, '12', NVL(ST_PROCESSING, 0)), 0)) AS CNT12,
		                     SUM(NVL(DECODE(ST_HOUR, '13', NVL(ST_PROCESSING, 0)), 0)) AS CNT13,
		                     SUM(NVL(DECODE(ST_HOUR, '14', NVL(ST_PROCESSING, 0)), 0)) AS CNT14,
		                     SUM(NVL(DECODE(ST_HOUR, '15', NVL(ST_PROCESSING, 0)), 0)) AS CNT15,
		                     SUM(NVL(DECODE(ST_HOUR, '16', NVL(ST_PROCESSING, 0)), 0)) AS CNT16,
		                     SUM(NVL(DECODE(ST_HOUR, '17', NVL(ST_PROCESSING, 0)), 0)) AS CNT17,
		                     SUM(NVL(DECODE(ST_HOUR, '18', NVL(ST_PROCESSING, 0)), 0)) AS CNT18,
		                     SUM(NVL(DECODE(ST_HOUR, '19', NVL(ST_PROCESSING, 0)), 0)) AS CNT19,
		                     SUM(NVL(DECODE(ST_HOUR, '20', NVL(ST_PROCESSING, 0)), 0)) AS CNT20,
		                     SUM(NVL(DECODE(ST_HOUR, '21', NVL(ST_PROCESSING, 0)), 0)) AS CNT21,
		                     SUM(NVL(DECODE(ST_HOUR, '22', NVL(ST_PROCESSING, 0)), 0)) AS CNT22,
		                     SUM(NVL(DECODE(ST_HOUR, '23', NVL(ST_PROCESSING, 0)), 0)) AS CNT23
		                     </if>
		                     <if test="scCriteriaType != null and (scCriteriaType eq 'daily'.toString())">
		                     SUM(NVL(DECODE(ST_DAY, '01', NVL(ST_PROCESSING, 0)), 0)) AS CNT01,
		                     SUM(NVL(DECODE(ST_DAY, '02', NVL(ST_PROCESSING, 0)), 0)) AS CNT02,
		                     SUM(NVL(DECODE(ST_DAY, '03', NVL(ST_PROCESSING, 0)), 0)) AS CNT03,
		                     SUM(NVL(DECODE(ST_DAY, '04', NVL(ST_PROCESSING, 0)), 0)) AS CNT04,
		                     SUM(NVL(DECODE(ST_DAY, '05', NVL(ST_PROCESSING, 0)), 0)) AS CNT05,
		                     SUM(NVL(DECODE(ST_DAY, '06', NVL(ST_PROCESSING, 0)), 0)) AS CNT06,
		                     SUM(NVL(DECODE(ST_DAY, '07', NVL(ST_PROCESSING, 0)), 0)) AS CNT07,
		                     SUM(NVL(DECODE(ST_DAY, '08', NVL(ST_PROCESSING, 0)), 0)) AS CNT08,
		                     SUM(NVL(DECODE(ST_DAY, '09', NVL(ST_PROCESSING, 0)), 0)) AS CNT09,
		                     SUM(NVL(DECODE(ST_DAY, '10', NVL(ST_PROCESSING, 0)), 0)) AS CNT10,
		                     SUM(NVL(DECODE(ST_DAY, '11', NVL(ST_PROCESSING, 0)), 0)) AS CNT11,
		                     SUM(NVL(DECODE(ST_DAY, '12', NVL(ST_PROCESSING, 0)), 0)) AS CNT12,
		                     SUM(NVL(DECODE(ST_DAY, '13', NVL(ST_PROCESSING, 0)), 0)) AS CNT13,
		                     SUM(NVL(DECODE(ST_DAY, '14', NVL(ST_PROCESSING, 0)), 0)) AS CNT14,
		                     SUM(NVL(DECODE(ST_DAY, '15', NVL(ST_PROCESSING, 0)), 0)) AS CNT15,
		                     SUM(NVL(DECODE(ST_DAY, '16', NVL(ST_PROCESSING, 0)), 0)) AS CNT16,
		                     SUM(NVL(DECODE(ST_DAY, '17', NVL(ST_PROCESSING, 0)), 0)) AS CNT17,
		                     SUM(NVL(DECODE(ST_DAY, '18', NVL(ST_PROCESSING, 0)), 0)) AS CNT18,
		                     SUM(NVL(DECODE(ST_DAY, '19', NVL(ST_PROCESSING, 0)), 0)) AS CNT19,
		                     SUM(NVL(DECODE(ST_DAY, '20', NVL(ST_PROCESSING, 0)), 0)) AS CNT20,
		                     SUM(NVL(DECODE(ST_DAY, '21', NVL(ST_PROCESSING, 0)), 0)) AS CNT21,
		                     SUM(NVL(DECODE(ST_DAY, '22', NVL(ST_PROCESSING, 0)), 0)) AS CNT22,
		                     SUM(NVL(DECODE(ST_DAY, '23', NVL(ST_PROCESSING, 0)), 0)) AS CNT23,
		                     SUM(NVL(DECODE(ST_DAY, '24', NVL(ST_PROCESSING, 0)), 0)) AS CNT24,
		                     SUM(NVL(DECODE(ST_DAY, '25', NVL(ST_PROCESSING, 0)), 0)) AS CNT25,
		                     SUM(NVL(DECODE(ST_DAY, '26', NVL(ST_PROCESSING, 0)), 0)) AS CNT26,
		                     SUM(NVL(DECODE(ST_DAY, '27', NVL(ST_PROCESSING, 0)), 0)) AS CNT27,
		                     SUM(NVL(DECODE(ST_DAY, '28', NVL(ST_PROCESSING, 0)), 0)) AS CNT28,
		                     SUM(NVL(DECODE(ST_DAY, '29', NVL(ST_PROCESSING, 0)), 0)) AS CNT29,
		                     SUM(NVL(DECODE(ST_DAY, '30', NVL(ST_PROCESSING, 0)), 0)) AS CNT30,
		                     SUM(NVL(DECODE(ST_DAY, '31', NVL(ST_PROCESSING, 0)), 0)) AS CNT31
		                     </if>
		                     <if test="scCriteriaType != null and (scCriteriaType eq 'monthly'.toString())">
		                     SUM(NVL(DECODE(ST_MONTH, '01', NVL(ST_PROCESSING, 0)), 0)) AS CNT01,
		                     SUM(NVL(DECODE(ST_MONTH, '02', NVL(ST_PROCESSING, 0)), 0)) AS CNT02,
		                     SUM(NVL(DECODE(ST_MONTH, '03', NVL(ST_PROCESSING, 0)), 0)) AS CNT03,
		                     SUM(NVL(DECODE(ST_MONTH, '04', NVL(ST_PROCESSING, 0)), 0)) AS CNT04,
		                     SUM(NVL(DECODE(ST_MONTH, '05', NVL(ST_PROCESSING, 0)), 0)) AS CNT05,
		                     SUM(NVL(DECODE(ST_MONTH, '06', NVL(ST_PROCESSING, 0)), 0)) AS CNT06,
		                     SUM(NVL(DECODE(ST_MONTH, '07', NVL(ST_PROCESSING, 0)), 0)) AS CNT07,
		                     SUM(NVL(DECODE(ST_MONTH, '08', NVL(ST_PROCESSING, 0)), 0)) AS CNT08,
		                     SUM(NVL(DECODE(ST_MONTH, '09', NVL(ST_PROCESSING, 0)), 0)) AS CNT09,
		                     SUM(NVL(DECODE(ST_MONTH, '10', NVL(ST_PROCESSING, 0)), 0)) AS CNT10,
		                     SUM(NVL(DECODE(ST_MONTH, '11', NVL(ST_PROCESSING, 0)), 0)) AS CNT11,
		                     SUM(NVL(DECODE(ST_MONTH, '12', NVL(ST_PROCESSING, 0)), 0)) AS CNT12
		                     </if>
		                FROM
		                	SI_STAT_INTF_HOUR
		               WHERE 1=1
		                     <if test="scCriteriaType != null and (scCriteriaType eq 'hourly'.toString())">
		                     AND ST_YEAR = #{scPeriodYearFrom}
		                     AND ST_MONTH = #{scPeriodMonthFrom}
		                     AND ST_DAY = #{scPeriodDayFrom}
		                     AND ST_HOUR <![CDATA[>=]]> #{scPeriodHourFrom}
		                     AND ST_HOUR <![CDATA[<]]> #{scPeriodHourTo}
		                     </if>
		                     <if test="scCriteriaType != null and (scCriteriaType eq 'daily'.toString())">
		                     AND ST_YEAR = #{scPeriodYearFrom}
		                     AND ST_MONTH = #{scPeriodMonthFrom}
		                     AND ST_DAY <![CDATA[>=]]> #{scPeriodDayFrom}
		                     AND ST_DAY <![CDATA[<=]]> #{scPeriodDayTo}
		                     </if>
		                     <if test="scCriteriaType != null and (scCriteriaType eq 'monthly'.toString())">
		                     AND ST_YEAR = #{scPeriodYearFrom}
		                     AND ST_MONTH <![CDATA[>=]]> #{scPeriodMonthFrom}
		                     AND ST_MONTH <![CDATA[<=]]> #{scPeriodMonthTo}
		                     </if>
		               GROUP BY INTF_ID
		              )
		           UNION ALL
		              (
		              SELECT '00' AS STATUS_TYPE,
		                     SUM(NVL(ST_FINISHED, 0)) AS ROW_SUM ,
		                     SUM(NVL(ST_COMPSIZE, 0) + NVL(ST_N_COMPSIZE, 0)) AS DATA_SIZE,
		                     INTF_ID,
		                     <if test="scCriteriaType != null and (scCriteriaType eq 'hourly'.toString())">
		                     SUM(NVL(DECODE(ST_HOUR, '00', NVL(ST_FINISHED, 0)), 0)) AS CNT00,
		                     SUM(NVL(DECODE(ST_HOUR, '01', NVL(ST_FINISHED, 0)), 0)) AS CNT01,
		                     SUM(NVL(DECODE(ST_HOUR, '02', NVL(ST_FINISHED, 0)), 0)) AS CNT02,
		                     SUM(NVL(DECODE(ST_HOUR, '03', NVL(ST_FINISHED, 0)), 0)) AS CNT03,
		                     SUM(NVL(DECODE(ST_HOUR, '04', NVL(ST_FINISHED, 0)), 0)) AS CNT04,
		                     SUM(NVL(DECODE(ST_HOUR, '05', NVL(ST_FINISHED, 0)), 0)) AS CNT05,
		                     SUM(NVL(DECODE(ST_HOUR, '06', NVL(ST_FINISHED, 0)), 0)) AS CNT06,
		                     SUM(NVL(DECODE(ST_HOUR, '07', NVL(ST_FINISHED, 0)), 0)) AS CNT07,
		                     SUM(NVL(DECODE(ST_HOUR, '08', NVL(ST_FINISHED, 0)), 0)) AS CNT08,
		                     SUM(NVL(DECODE(ST_HOUR, '09', NVL(ST_FINISHED, 0)), 0)) AS CNT09,
		                     SUM(NVL(DECODE(ST_HOUR, '10', NVL(ST_FINISHED, 0)), 0)) AS CNT10,
		                     SUM(NVL(DECODE(ST_HOUR, '11', NVL(ST_FINISHED, 0)), 0)) AS CNT11,
		                     SUM(NVL(DECODE(ST_HOUR, '12', NVL(ST_FINISHED, 0)), 0)) AS CNT12,
		                     SUM(NVL(DECODE(ST_HOUR, '13', NVL(ST_FINISHED, 0)), 0)) AS CNT13,
		                     SUM(NVL(DECODE(ST_HOUR, '14', NVL(ST_FINISHED, 0)), 0)) AS CNT14,
		                     SUM(NVL(DECODE(ST_HOUR, '15', NVL(ST_FINISHED, 0)), 0)) AS CNT15,
		                     SUM(NVL(DECODE(ST_HOUR, '16', NVL(ST_FINISHED, 0)), 0)) AS CNT16,
		                     SUM(NVL(DECODE(ST_HOUR, '17', NVL(ST_FINISHED, 0)), 0)) AS CNT17,
		                     SUM(NVL(DECODE(ST_HOUR, '18', NVL(ST_FINISHED, 0)), 0)) AS CNT18,
		                     SUM(NVL(DECODE(ST_HOUR, '19', NVL(ST_FINISHED, 0)), 0)) AS CNT19,
		                     SUM(NVL(DECODE(ST_HOUR, '20', NVL(ST_FINISHED, 0)), 0)) AS CNT20,
		                     SUM(NVL(DECODE(ST_HOUR, '21', NVL(ST_FINISHED, 0)), 0)) AS CNT21,
		                     SUM(NVL(DECODE(ST_HOUR, '22', NVL(ST_FINISHED, 0)), 0)) AS CNT22,
		                     SUM(NVL(DECODE(ST_HOUR, '23', NVL(ST_FINISHED, 0)), 0)) AS CNT23
		                     </if>
		                     <if test="scCriteriaType != null and (scCriteriaType eq 'daily'.toString())">
		                     SUM(NVL(DECODE(ST_DAY, '01', NVL(ST_FINISHED, 0)), 0)) AS CNT01,
		                     SUM(NVL(DECODE(ST_DAY, '02', NVL(ST_FINISHED, 0)), 0)) AS CNT02,
		                     SUM(NVL(DECODE(ST_DAY, '03', NVL(ST_FINISHED, 0)), 0)) AS CNT03,
		                     SUM(NVL(DECODE(ST_DAY, '04', NVL(ST_FINISHED, 0)), 0)) AS CNT04,
		                     SUM(NVL(DECODE(ST_DAY, '05', NVL(ST_FINISHED, 0)), 0)) AS CNT05,
		                     SUM(NVL(DECODE(ST_DAY, '06', NVL(ST_FINISHED, 0)), 0)) AS CNT06,
		                     SUM(NVL(DECODE(ST_DAY, '07', NVL(ST_FINISHED, 0)), 0)) AS CNT07,
		                     SUM(NVL(DECODE(ST_DAY, '08', NVL(ST_FINISHED, 0)), 0)) AS CNT08,
		                     SUM(NVL(DECODE(ST_DAY, '09', NVL(ST_FINISHED, 0)), 0)) AS CNT09,
		                     SUM(NVL(DECODE(ST_DAY, '10', NVL(ST_FINISHED, 0)), 0)) AS CNT10,
		                     SUM(NVL(DECODE(ST_DAY, '11', NVL(ST_FINISHED, 0)), 0)) AS CNT11,
		                     SUM(NVL(DECODE(ST_DAY, '12', NVL(ST_FINISHED, 0)), 0)) AS CNT12,
		                     SUM(NVL(DECODE(ST_DAY, '13', NVL(ST_FINISHED, 0)), 0)) AS CNT13,
		                     SUM(NVL(DECODE(ST_DAY, '14', NVL(ST_FINISHED, 0)), 0)) AS CNT14,
		                     SUM(NVL(DECODE(ST_DAY, '15', NVL(ST_FINISHED, 0)), 0)) AS CNT15,
		                     SUM(NVL(DECODE(ST_DAY, '16', NVL(ST_FINISHED, 0)), 0)) AS CNT16,
		                     SUM(NVL(DECODE(ST_DAY, '17', NVL(ST_FINISHED, 0)), 0)) AS CNT17,
		                     SUM(NVL(DECODE(ST_DAY, '18', NVL(ST_FINISHED, 0)), 0)) AS CNT18,
		                     SUM(NVL(DECODE(ST_DAY, '19', NVL(ST_FINISHED, 0)), 0)) AS CNT19,
		                     SUM(NVL(DECODE(ST_DAY, '20', NVL(ST_FINISHED, 0)), 0)) AS CNT20,
		                     SUM(NVL(DECODE(ST_DAY, '21', NVL(ST_FINISHED, 0)), 0)) AS CNT21,
		                     SUM(NVL(DECODE(ST_DAY, '22', NVL(ST_FINISHED, 0)), 0)) AS CNT22,
		                     SUM(NVL(DECODE(ST_DAY, '23', NVL(ST_FINISHED, 0)), 0)) AS CNT23,
		                     SUM(NVL(DECODE(ST_DAY, '24', NVL(ST_FINISHED, 0)), 0)) AS CNT24,
		                     SUM(NVL(DECODE(ST_DAY, '25', NVL(ST_FINISHED, 0)), 0)) AS CNT25,
		                     SUM(NVL(DECODE(ST_DAY, '26', NVL(ST_FINISHED, 0)), 0)) AS CNT26,
		                     SUM(NVL(DECODE(ST_DAY, '27', NVL(ST_FINISHED, 0)), 0)) AS CNT27,
		                     SUM(NVL(DECODE(ST_DAY, '28', NVL(ST_FINISHED, 0)), 0)) AS CNT28,
		                     SUM(NVL(DECODE(ST_DAY, '29', NVL(ST_FINISHED, 0)), 0)) AS CNT29,
		                     SUM(NVL(DECODE(ST_DAY, '30', NVL(ST_FINISHED, 0)), 0)) AS CNT30,
		                     SUM(NVL(DECODE(ST_DAY, '31', NVL(ST_FINISHED, 0)), 0)) AS CNT31
		                     </if>
		                     <if test="scCriteriaType != null and (scCriteriaType eq 'monthly'.toString())">
		                     SUM(NVL(DECODE(ST_MONTH, '01', NVL(ST_FINISHED, 0)), 0)) AS CNT01,
		                     SUM(NVL(DECODE(ST_MONTH, '02', NVL(ST_FINISHED, 0)), 0)) AS CNT02,
		                     SUM(NVL(DECODE(ST_MONTH, '03', NVL(ST_FINISHED, 0)), 0)) AS CNT03,
		                     SUM(NVL(DECODE(ST_MONTH, '04', NVL(ST_FINISHED, 0)), 0)) AS CNT04,
		                     SUM(NVL(DECODE(ST_MONTH, '05', NVL(ST_FINISHED, 0)), 0)) AS CNT05,
		                     SUM(NVL(DECODE(ST_MONTH, '06', NVL(ST_FINISHED, 0)), 0)) AS CNT06,
		                     SUM(NVL(DECODE(ST_MONTH, '07', NVL(ST_FINISHED, 0)), 0)) AS CNT07,
		                     SUM(NVL(DECODE(ST_MONTH, '08', NVL(ST_FINISHED, 0)), 0)) AS CNT08,
		                     SUM(NVL(DECODE(ST_MONTH, '09', NVL(ST_FINISHED, 0)), 0)) AS CNT09,
		                     SUM(NVL(DECODE(ST_MONTH, '10', NVL(ST_FINISHED, 0)), 0)) AS CNT10,
		                     SUM(NVL(DECODE(ST_MONTH, '11', NVL(ST_FINISHED, 0)), 0)) AS CNT11,
		                     SUM(NVL(DECODE(ST_MONTH, '12', NVL(ST_FINISHED, 0)), 0)) AS CNT12
		                     </if>
		                FROM
		                	SI_STAT_INTF_HOUR
		               WHERE 1=1
		                     <if test="scCriteriaType != null and (scCriteriaType eq 'hourly'.toString())">
		                     AND ST_YEAR = #{scPeriodYearFrom}
		                     AND ST_MONTH = #{scPeriodMonthFrom}
		                     AND ST_DAY = #{scPeriodDayFrom}
		                     AND ST_HOUR <![CDATA[>=]]> #{scPeriodHourFrom}
		                     AND ST_HOUR <![CDATA[<]]> #{scPeriodHourTo}
		                     </if>
		                     <if test="scCriteriaType != null and (scCriteriaType eq 'daily'.toString())">
		                     AND ST_YEAR = #{scPeriodYearFrom}
		                     AND ST_MONTH = #{scPeriodMonthFrom}
		                     AND ST_DAY <![CDATA[>=]]> #{scPeriodDayFrom}
		                     AND ST_DAY <![CDATA[<=]]> #{scPeriodDayTo}
		                     </if>
		                     <if test="scCriteriaType != null and (scCriteriaType eq 'monthly'.toString())">
		                     AND ST_YEAR = #{scPeriodYearFrom}
		                     AND ST_MONTH <![CDATA[>=]]> #{scPeriodMonthFrom}
		                     AND ST_MONTH <![CDATA[<=]]> #{scPeriodMonthTo}
		                     </if>
		               GROUP BY INTF_ID
		              )
		       ) a
		       <if test="scCategory != null and (scCategory eq 'interface'.toString())">
		       inner JOIN (
		       		SELECT
		            	  <!-- INTERFACE_ID AS CATEGORY_ID -->
		            	  INTEGRATION_ID AS CATEGORY_ID
		                , INTERFACE_NM AS CATEGORY_NM
		            FROM
		            	TAN0201
		            WHERE
		            	DEL_YN = 'N'
		           	<if test="scCategoryDetailNm != null and scCategoryDetailNm != ''">
                    	and INTERFACE_NM like '%'||#{scCategoryDetailNm}||'%'
                    </if>
                    <if test="scCategoryDetailId != null and scCategoryDetailId != ''">
                    	<!-- and INTERFACE_ID = #{scCategoryDetailId} -->
                    	and INTEGRATION_ID like '%'||#{scCategoryDetailId}||'%'
                    </if>
		       ) b ON a.INTF_ID = b.CATEGORY_ID
		       </if>
		       <if test="scCategory != null and (scCategory eq 'process'.toString())">
		       inner JOIN (
                    SELECT
                          <!-- b1.INTERFACE_ID -->
                          b4.INTEGRATION_ID
                        , b3.BUSINESS_ID AS CATEGORY_ID
                        , b3.BUSINESS_NM AS CATEGORY_NM
                    FROM
                        TAN0218 b1
                        inner join TAN0201 b4 on b4.INTERFACE_ID = b1.INTERFACE_ID
                        <if test="searchMode != null and (searchMode eq 'DEFAULT'.toString())">
                        inner JOIN ( SELECT b21.P_BIZ_ID, b21.C_BIZ_ID AS BUSINESS_ID   FROM TIM0302 b21   WHERE b21.DEL_YN = 'N' ) b2 ON b1.BUSINESS_ID = b2.BUSINESS_ID
						inner JOIN ( SELECT b31.BUSINESS_ID, b31.BUSINESS_NM   FROM TIM0301 b31   WHERE b31.DEL_YN = 'N'   AND b31.ROOT_YN = 'Y' ) b3 ON b2.P_BIZ_ID = b3.BUSINESS_ID
                        </if>
                        <if test="searchMode != null and (searchMode eq 'DETAIL'.toString())">
                        inner JOIN  (
                        	SELECT
                        		b21.P_BIZ_ID,
                        		b21.C_BIZ_ID AS BUSINESS_ID
					    	FROM
					    		TIM0302 b21
					       		INNER JOIN  (
					       			SELECT
					       				 b221.C_BIZ_ID
					             	FROM
					             		 TIM0302 b221
					            	WHERE b221.DEL_YN = 'N'
					                  AND b221.P_BIZ_ID = #{categoryId}
					                  AND b221.DEPTH = 1
					           ) b22  ON b21.P_BIZ_ID = b22.C_BIZ_ID
					     	WHERE b21.DEL_YN = 'N'
					    ) b2 ON b1.BUSINESS_ID = b2.BUSINESS_ID
					    inner JOIN (SELECT b31.BUSINESS_ID, b31.BUSINESS_NM   FROM TIM0301 b31   WHERE b31.DEL_YN = 'N'  ) b3 ON b2.P_BIZ_ID = b3.BUSINESS_ID
                        </if>
                    WHERE
                        b1.DEL_YN = 'N'
                        <if test="scNodeType != null and scNodeType != ''">
                        AND b1.NODE_TYPE = #{scNodeType}
                        </if>
                    GROUP BY
                    	  <!-- b1.INTERFACE_ID -->
                    	  b4.INTEGRATION_ID
                        , b3.BUSINESS_ID
                        , b3.BUSINESS_NM
               <!-- ) b ON a.INTF_ID = b.INTERFACE_ID -->
               ) b ON a.INTF_ID = b.INTEGRATION_ID
		       </if>
		       <if test="scCategory != null and (scCategory eq 'requirement'.toString())">
		       inner JOIN (
               		SELECT
                    	  <!-- b1.INTERFACE_ID -->
                    	  b2.INTEGRATION_ID
                        , b1.REQUIREMENT_ID AS CATEGORY_ID
                        , b1.REQUIREMENT_NM AS CATEGORY_NM
                    FROM
                    	TAN0101 b1, TAN0201 b2
                    WHERE b1.INTERFACE_ID = b2.INTERFACE_ID
                    	and b1.DEL_YN = 'N'
                    <if test="scCategoryDetailNm != null and scCategoryDetailNm != ''">
                    	and b1.REQUIREMENT_NM like '%'||#{scCategoryDetailNm}||'%'
                    </if>
               <!-- ) b ON a.INTF_ID = b.INTERFACE_ID -->
               ) b ON a.INTF_ID = b.INTEGRATION_ID
		       </if>
		       <if test="scCategory != null and (scCategory eq 'channel'.toString())">
		        inner JOIN (
               		SELECT
                    	  <!-- b1.INTERFACE_ID -->
                    	  b1.INTEGRATION_ID
                        , b2.CHANNEL_ID AS CATEGORY_ID
                        , b2.CHANNEL_NM AS CATEGORY_NM
                    FROM
                    	TAN0201 b1
                        inner JOIN (SELECT CHANNEL_ID, CHANNEL_NM FROM TIM0002 WHERE DEL_YN='N') b2 ON b2.CHANNEL_ID = b1.CHANNEL_ID
                    WHERE
                    	b1.DEL_YN = 'N'
               <!-- ) b ON a.INTF_ID = b.INTERFACE_ID -->
               ) b ON a.INTF_ID = b.INTEGRATION_ID
               </if>
               <if test="scCategory != null and (scCategory eq 'system'.toString())">
               inner JOIN (
               		SELECT
                    	  <!-- b1.INTERFACE_ID -->
                    	  b3.INTEGRATION_ID
                        , b2.SYSTEM_ID AS CATEGORY_ID
                        , b2.SYSTEM_NM||'('||b2.SYSTEM_CD||')' AS CATEGORY_NM
                    FROM
                    	TAN0213 b1
                    	inner join TAN0201 b3 on b3.INTERFACE_ID = b1.INTERFACE_ID
                        inner JOIN (
                        	SELECT
                        		  SYSTEM_ID
                        		, SYSTEM_NM
                        		, SYSTEM_CD
                        	FROM
                        		  TIM0101
                        	WHERE
                        		  DEL_YN = 'N'
                        		and grp_yn = 'N'
                        	<if test="scCategoryDetailId != null and scCategoryDetailId != ''">
                            	and SYSTEM_ID = #{scCategoryDetailId}
                            </if>
                        ) b2 ON b2.SYSTEM_ID = b1.SYSTEM_ID
                    WHERE
                    	b1.DEL_YN = 'N'
                    	<if test="scNodeType != null and scNodeType != ''">
                    	AND b1.NODE_TYPE = #{scNodeType}
                    	</if>
                    GROUP BY
                    	  <!-- b1.INTERFACE_ID -->
                    	  b3.INTEGRATION_ID
                        , b2.SYSTEM_ID
                        , b2.SYSTEM_NM||'('||b2.SYSTEM_CD||')'
               <!-- ) b ON a.INTF_ID = b.INTERFACE_ID -->
               ) b ON a.INTF_ID = b.INTEGRATION_ID
               </if>
               <if test="scCategory != null and (scCategory eq 'type'.toString())">
               inner JOIN (
               		SELECT
                    	  <!-- b1.INTERFACE_ID -->
                    	  b1.INTEGRATION_ID
                        , b2.CD AS CATEGORY_ID
                        , b2.NM AS CATEGORY_NM
                        , b1.START_RES_TYPE
		                , b3.NM AS START_RES_TYPE_NM
		                , b1.END_RES_TYPE
		                , b4.NM AS END_RES_TYPE_NM
                    FROM
                    	TAN0201 b1
                        inner JOIN (SELECT CD, NM FROM TSU0301 WHERE LEVEL1 = 'IM' AND LEVEL2 = '12' AND DEL_YN = 'N') b2 ON b2.cd = b1.DATA_PR_METHOD
                        left outer JOIN (SELECT CD, NM FROM TSU0301 WHERE LEVEL1 = 'IM' AND LEVEL2='04' AND DEL_YN='N') b3 ON b3.CD = b1.START_RES_TYPE
              			left outer JOIN (SELECT CD, NM FROM TSU0301 WHERE LEVEL1 = 'IM' AND LEVEL2='04' AND DEL_YN='N') b4 ON b4.CD = b1.END_RES_TYPE
              		where DEL_YN = 'N'
					<if test="scDataPrMethodType != null and scDataPrMethodType != ''">
						AND b1.DATA_PR_METHOD = #{scDataPrMethodType}
					</if>
					<if test="scStartResourceType != null and scStartResourceType != ''">
						AND b1.START_RES_TYPE = #{scStartResourceType}
					</if>
					<if test="scEndResourceType != null and scEndResourceType != ''">
						AND b1.END_RES_TYPE = #{scEndResourceType}
					</if>
               <!-- ) b ON a.INTF_ID = b.INTERFACE_ID -->
               ) b ON a.INTF_ID = b.INTEGRATION_ID
               </if>
		    <if test="scStatusType != null and scStatusType!=''">
		    WHERE a.STATUS_TYPE = #{scStatusType}
		    </if>
		    GROUP BY
		    	 a.STATUS_TYPE,
		         b.CATEGORY_ID,
		         b.CATEGORY_NM
		 ORDER BY
		 	b.CATEGORY_NM asc,
		    a.STATUS_TYPE desc
	</select>

	<resultMap id="StatisticsPeriodResultMapForList" type="StatisticsInterfacePeriod">
		<id property="categoryId" 		column="CATEGORY_ID"/>
		<result property="categoryId" 	column="CATEGORY_ID"/>
		<result property="categoryNm" 	column="CATEGORY_NM"/>
		<result property="interfaceStatusType" column="STATUS_TYPE"/>
		<result property="cnt00" column="CNT00"/>
		<result property="cnt01" column="CNT01"/>
		<result property="cnt02" column="CNT02"/>
		<result property="cnt03" column="CNT03"/>
		<result property="cnt04" column="CNT04"/>
		<result property="cnt05" column="CNT05"/>
		<result property="cnt06" column="CNT06"/>
		<result property="cnt07" column="CNT07"/>
		<result property="cnt08" column="CNT08"/>
		<result property="cnt09" column="CNT09"/>
		<result property="cnt10" column="CNT10"/>
		<result property="cnt11" column="CNT11"/>
		<result property="cnt12" column="CNT12"/>
		<result property="cnt13" column="CNT13"/>
		<result property="cnt14" column="CNT14"/>
		<result property="cnt15" column="CNT15"/>
		<result property="cnt16" column="CNT16"/>
		<result property="cnt17" column="CNT17"/>
		<result property="cnt18" column="CNT18"/>
		<result property="cnt19" column="CNT19"/>
		<result property="cnt20" column="CNT20"/>
		<result property="cnt21" column="CNT21"/>
		<result property="cnt22" column="CNT22"/>
		<result property="cnt23" column="CNT23"/>
		<result property="cnt24" column="CNT24"/>
		<result property="cnt25" column="CNT25"/>
		<result property="cnt26" column="CNT26"/>
		<result property="cnt27" column="CNT27"/>
		<result property="cnt28" column="CNT28"/>
		<result property="cnt29" column="CNT29"/>
		<result property="cnt30" column="CNT30"/>
		<result property="cnt31" column="CNT31"/>
		<result property="rowSum" column="ROW_SUM"/>
		<result property="dataSize" column="DATA_SIZE"/>
	</resultMap>

	<!--
	기준조건별 인터페이스 유형별 - 통계를 조회한다.
	public List<StatisticsInterfacePeriod> getStatisticsInterfaceType throws Exception;
	 -->


	<select id="getStatisticsInterfaceType" resultMap="StatisticsTypeResultMapForList">
		SELECT
		    B.DATA_PR_METHOD
		  , NVL(B.DATA_PR_METHOD_NM, 'N/A') AS DATA_PR_METHOD_NM
		  , B.SNDR_RESOURCE_TYPE AS START_RES_TYPE
		  , NVL(B.SNDR_RESOURCE_TYPE_NM, 'N/A') AS START_RES_TYPE_NM
		  , B.RCVR_RESOURCE_TYPE AS END_RES_TYPE
		  , NVL(B.RCVR_RESOURCE_TYPE_NM, 'N/A') AS END_RES_TYPE_NM
		  , SUM(NVL(A.ST_COMPSIZE, 0) + NVL(A.ST_N_COMPSIZE, 0)) AS DATA_SIZE
		  , SUM(NVL(A.ST_SEND_ERR, 0) +  NVL(A.ST_RECV_ERR, 0)) AS ERROR_CNT
		  , SUM(NVL(A.ST_PROCESSING, 0)) AS PROCESSING_CNT
		  , SUM(NVL(A.ST_FINISHED, 0)) AS FINISHED_CNT
		  , (SUM(NVL(A.ST_SEND_ERR, 0) +  NVL(A.ST_RECV_ERR, 0)) + SUM(NVL(A.ST_PROCESSING, 0)) + SUM(NVL(A.ST_FINISHED, 0))) AS TOTAL_CNT
		FROM
		  SI_STAT_INTF_HOUR A
		  INNER JOIN
		  (
		    SELECT
		        A.INTEGRATION_ID
		      , A.INTERFACE_ID
		      , A.INTERFACE_NM
		      , A.DATA_PR_METHOD
		      , (SELECT NM FROM TSU0301 WHERE LEVEL1 = 'IM' AND LEVEL2='12' AND DEL_YN='N' AND CD = A.DATA_PR_METHOD) AS DATA_PR_METHOD_NM
		      , B.SEQ AS SNDR_SEQ
		      , B.NODE_TYPE AS SNDR_NODE_TYPE
		      , B.RESOURCE_TYPE AS SNDR_RESOURCE_TYPE
		      , (SELECT NM FROM TSU0301 WHERE LEVEL1 = 'IM' AND LEVEL2='04' AND DEL_YN='N' AND CD = B.RESOURCE_TYPE) AS SNDR_RESOURCE_TYPE_NM
		      , C.SEQ AS RCVR_SEQ
		      , C.NODE_TYPE AS RCVR_NODE_TYPE
		      , C.RESOURCE_TYPE AS RCVR_RESOURCE_TYPE
		      , (SELECT NM FROM TSU0301 WHERE LEVEL1 = 'IM' AND LEVEL2='04' AND DEL_YN='N' AND CD = C.RESOURCE_TYPE) AS RCVR_RESOURCE_TYPE_NM
		    FROM
		      TAN0201 A
		      INNER JOIN
		      (
		        SELECT
		            A.INTERFACE_ID
		          , A.SEQ
		          , A.NODE_TYPE
		          , A.RESOURCE_TYPE
		        FROM TAN0213 A
		        WHERE
		          A.DEL_YN = 'N'
		          AND A.NODE_TYPE = '0'
		          AND A.SEQ = ( SELECT MIN(SEQ) AS SEQ FROM TAN0213 WHERE A.INTERFACE_ID = INTERFACE_ID AND A.NODE_TYPE = NODE_TYPE )
		      ) B ON
		        A.INTERFACE_ID = B.INTERFACE_ID
		      INNER JOIN
		      (
		        SELECT
		            A.INTERFACE_ID
		          , A.SEQ
		          , A.NODE_TYPE
		          , A.RESOURCE_TYPE
		        FROM TAN0213 A
		        WHERE
		          A.DEL_YN = 'N'
		          AND A.NODE_TYPE = '2'
		          AND A.SEQ = ( SELECT MIN(SEQ) AS SEQ FROM TAN0213 WHERE A.INTERFACE_ID = INTERFACE_ID AND A.NODE_TYPE = NODE_TYPE )
		      ) C ON
		        A.INTERFACE_ID = C.INTERFACE_ID
		    ORDER BY A.INTERFACE_ID
		  ) B ON
		    A.INTF_ID = B.INTEGRATION_ID
		WHERE 1=1
			AND A.ST_YEAR||A.ST_MONTH||A.ST_DAY||A.ST_HOUR BETWEEN #{scPeriodFrom} AND #{scPeriodTo}
			<if test="scDataMethodType != null and scDataMethodType != ''">
			AND B.DATA_PR_METHOD = #{scDataMethodType}
			</if>
			<if test="scStartResourceType != null and scStartResourceType != ''">
			AND B.SNDR_RESOURCE_TYPE = #{scStartResourceType}
			</if>
			<if test="scEndResourceType != null and scEndResourceType != ''">
			AND B.RCVR_RESOURCE_TYPE = #{scEndResourceType}
			</if>
		GROUP BY
		    B.DATA_PR_METHOD
		  , B.DATA_PR_METHOD_NM
		  , B.SNDR_RESOURCE_TYPE
		  , B.SNDR_RESOURCE_TYPE_NM
		  , B.RCVR_RESOURCE_TYPE
		  , B.RCVR_RESOURCE_TYPE_NM
		ORDER BY
		    B.DATA_PR_METHOD_NM
		  , B.SNDR_RESOURCE_TYPE_NM
		  , B.RCVR_RESOURCE_TYPE_NM
	</select>

	<!--
		(삭제대상 :: 쓰레기 SQL)
	 -->
	<select id="getStatisticsInterfaceType-OLD" resultMap="StatisticsTypeResultMapForList">
		SELECT
			   b.DATA_PR_METHOD
		     , nvl(b.DATA_PR_METHOD_NM, 'N/A') as DATA_PR_METHOD_NM
		     , b.START_RES_TYPE
		     , nvl(b.START_RES_TYPE_NM, 'N/A') as START_RES_TYPE_NM
		     , b.END_RES_TYPE
		     , nvl(b.END_RES_TYPE_NM, 'N/A') as END_RES_TYPE_NM
		     , SUM(NVL(a.ST_COMPSIZE, 0) + NVL(a.ST_N_COMPSIZE, 0)) AS DATA_SIZE
		     , (SUM(NVL(a.ST_SEND_ERR, 0) +  NVL(a.ST_RECV_ERR, 0))
		      	+ SUM(NVL(a.ST_PROCESSING, 0))
		        + SUM(NVL(a.ST_FINISHED, 0))) AS TOTAL_CNT
		     , SUM(NVL(a.ST_SEND_ERR, 0) +  NVL(a.ST_RECV_ERR, 0)) AS ERROR_CNT
		     , SUM(NVL(a.ST_PROCESSING, 0)) AS PROCESSING_CNT
		     , SUM(NVL(a.ST_FINISHED, 0)) AS FINISHED_CNT
		FROM
			 SI_STAT_INTF_HOUR a
			 inner JOIN (
		     	SELECT
		        	  <!-- b1.INTERFACE_ID -->
		        	  b1.INTEGRATION_ID
		        	, b1.DATA_PR_METHOD
		            , b2.NM AS DATA_PR_METHOD_NM
		            , b1.START_RES_TYPE
		            , b3.NM AS START_RES_TYPE_NM
		            , b1.END_RES_TYPE
		            , b4.NM AS END_RES_TYPE_NM
		        FROM
		        	 TAN0201 b1
		             left outer JOIN (SELECT CD, NM FROM TSU0301 WHERE LEVEL1 = 'IM' AND LEVEL2='12' AND DEL_YN='N') b2 ON b2.CD = b1.DATA_PR_METHOD
		             left outer JOIN (SELECT CD, NM FROM TSU0301 WHERE LEVEL1 = 'IM' AND LEVEL2='04' AND DEL_YN='N') b3 ON b3.CD = b1.START_RES_TYPE
		             left outer JOIN (SELECT CD, NM FROM TSU0301 WHERE LEVEL1 = 'IM' AND LEVEL2='04' AND DEL_YN='N') b4 ON b4.CD = b1.END_RES_TYPE
		        WHERE
		        	 b1.DEL_YN = 'N'
		        	 <if test="scDataMethodType != null and scDataMethodType != ''">
		        	 AND b1.DATA_PR_METHOD = #{scDataMethodType}
		        	 </if>
		        	 <if test="scStartResourceType != null and scStartResourceType != ''">
		        	 AND b1.START_RES_TYPE = #{scStartResourceType}
		        	 </if>
		        	 <if test="scEndResourceType != null and scEndResourceType != ''">
		        	 AND b1.END_RES_TYPE = #{scEndResourceType}
		        	 </if>
		     <!-- ) b ON b.INTERFACE_ID = a.INTF_ID -->
		     ) b ON b.INTEGRATION_ID = a.INTF_ID
		WHERE 1=1
			 AND a.ST_YEAR||a.ST_MONTH||a.ST_DAY||a.ST_HOUR <![CDATA[>=]]> #{scPeriodFrom}
    		 AND a.ST_YEAR||a.ST_MONTH||a.ST_DAY||a.ST_HOUR <![CDATA[<]]> #{scPeriodTo}
		GROUP BY
		       b.DATA_PR_METHOD
		     , b.DATA_PR_METHOD_NM
		     , b.START_RES_TYPE
		     , b.START_RES_TYPE_NM
		     , b.END_RES_TYPE
		     , b.END_RES_TYPE_NM
		ORDER BY
		       b.DATA_PR_METHOD_NM asc
		     , b.START_RES_TYPE_NM
		     , b.END_RES_TYPE_NM
	</select>
	<resultMap id="StatisticsTypeResultMapForList" type="StatisticsInterfaceType">
		<id property="dataProcessMethodCd" 		column="DATA_PR_METHOD"/>
		<result property="dataProcessMethodNm" 	column="DATA_PR_METHOD_NM"/>
		<result property="startResourceTypeCd" 	column="START_RES_TYPE"/>
		<result property="startResourceTypeNm" 	column="START_RES_TYPE_NM"/>
		<result property="endResourceTypeCd" 	column="END_RES_TYPE"/>
		<result property="endResourceTypeNm" 	column="END_RES_TYPE_NM"/>
		<result property="totalCnt" 	column="TOTAL_CNT"/>
		<result property="errorCnt" 	column="ERROR_CNT"/>
		<result property="processingCnt" 	column="PROCESSING_CNT"/>
		<result property="finishedCnt" 	column="FINISHED_CNT"/>
		<result property="dataSize" column="DATA_SIZE"/>
	</resultMap>


	<!--
	기준조건별 인터페이스 유형별 - 통계를 조회한다.
	public List<StatisticsInterfacePeriod> getStatisticsInterfaceType throws Exception;
	 -->
	<select id="getStatisticsInterfaceTypeDetail" resultMap="StatisticsTypeDetailResultMapForList">
		SELECT
			B.INTEGRATION_ID
		  , B.INTERFACE_ID
		  , B.INTERFACE_NM
		  , B.DATA_PR_METHOD
		  , NVL(B.DATA_PR_METHOD_NM, 'N/A') AS DATA_PR_METHOD_NM
		  , B.SNDR_RESOURCE_TYPE AS START_RES_TYPE
		  , NVL(B.SNDR_RESOURCE_TYPE_NM, 'N/A') AS START_RES_TYPE_NM
		  , B.RCVR_RESOURCE_TYPE AS END_RES_TYPE
		  , NVL(B.RCVR_RESOURCE_TYPE_NM, 'N/A') AS END_RES_TYPE_NM
		  , SUM(NVL(A.ST_COMPSIZE, 0) + NVL(A.ST_N_COMPSIZE, 0)) AS DATA_SIZE
		  , SUM(NVL(A.ST_SEND_ERR, 0) +  NVL(A.ST_RECV_ERR, 0)) AS ERROR_CNT
		  , SUM(NVL(A.ST_PROCESSING, 0)) AS PROCESSING_CNT
		  , SUM(NVL(A.ST_FINISHED, 0)) AS FINISHED_CNT
		  , (SUM(NVL(A.ST_SEND_ERR, 0) +  NVL(A.ST_RECV_ERR, 0)) + SUM(NVL(A.ST_PROCESSING, 0)) + SUM(NVL(A.ST_FINISHED, 0))) AS TOTAL_CNT
		FROM
		  SI_STAT_INTF_HOUR A
		  INNER JOIN
		  (
		    SELECT
		        A.INTEGRATION_ID
		      , A.INTERFACE_ID
		      , A.INTERFACE_NM
		      , A.DATA_PR_METHOD
		      , (SELECT NM FROM TSU0301 WHERE LEVEL1 = 'IM' AND LEVEL2='12' AND DEL_YN='N' AND CD = A.DATA_PR_METHOD) AS DATA_PR_METHOD_NM
		      , B.SEQ AS SNDR_SEQ
		      , B.NODE_TYPE AS SNDR_NODE_TYPE
		      , B.RESOURCE_TYPE AS SNDR_RESOURCE_TYPE
		      , (SELECT NM FROM TSU0301 WHERE LEVEL1 = 'IM' AND LEVEL2='04' AND DEL_YN='N' AND CD = B.RESOURCE_TYPE) AS SNDR_RESOURCE_TYPE_NM
		      , C.SEQ AS RCVR_SEQ
		      , C.NODE_TYPE AS RCVR_NODE_TYPE
		      , C.RESOURCE_TYPE AS RCVR_RESOURCE_TYPE
		      , (SELECT NM FROM TSU0301 WHERE LEVEL1 = 'IM' AND LEVEL2='04' AND DEL_YN='N' AND CD = C.RESOURCE_TYPE) AS RCVR_RESOURCE_TYPE_NM
		    FROM
		      TAN0201 A
		      INNER JOIN
		      (
		        SELECT
		            A.INTERFACE_ID
		          , A.SEQ
		          , A.NODE_TYPE
		          , A.RESOURCE_TYPE
		        FROM TAN0213 A
		        WHERE
		          A.DEL_YN = 'N'
		          AND A.NODE_TYPE = '0'
		          AND A.SEQ = ( SELECT MIN(SEQ) AS SEQ FROM TAN0213 WHERE A.INTERFACE_ID = INTERFACE_ID AND A.NODE_TYPE = NODE_TYPE )
		      ) B ON
		        A.INTERFACE_ID = B.INTERFACE_ID
		      INNER JOIN
		      (
		        SELECT
		            A.INTERFACE_ID
		          , A.SEQ
		          , A.NODE_TYPE
		          , A.RESOURCE_TYPE
		        FROM TAN0213 A
		        WHERE
		          A.DEL_YN = 'N'
		          AND A.NODE_TYPE = '2'
		          AND A.SEQ = ( SELECT MIN(SEQ) AS SEQ FROM TAN0213 WHERE A.INTERFACE_ID = INTERFACE_ID AND A.NODE_TYPE = NODE_TYPE )
		      ) C ON
		        A.INTERFACE_ID = C.INTERFACE_ID
		    ORDER BY A.INTERFACE_ID
		  ) B ON
		    A.INTF_ID = B.INTEGRATION_ID
		WHERE 1=1
			AND A.ST_YEAR||A.ST_MONTH||A.ST_DAY||A.ST_HOUR BETWEEN #{scPeriodFrom} AND #{scPeriodTo}
			<if test="scDataMethodType != null and scDataMethodType != ''">
			AND B.DATA_PR_METHOD = #{scDataMethodType}
			</if>
			<if test="scStartResourceType != null and scStartResourceType != ''">
			AND B.SNDR_RESOURCE_TYPE = #{scStartResourceType}
			</if>
			<if test="scEndResourceType != null and scEndResourceType != ''">
			AND B.RCVR_RESOURCE_TYPE = #{scEndResourceType}
			</if>
		GROUP BY
		    B.INTEGRATION_ID
		  , B.INTERFACE_ID
		  , B.INTERFACE_NM
		  , B.DATA_PR_METHOD
		  , B.DATA_PR_METHOD_NM
		  , B.SNDR_RESOURCE_TYPE
		  , B.SNDR_RESOURCE_TYPE_NM
		  , B.RCVR_RESOURCE_TYPE
		  , B.RCVR_RESOURCE_TYPE_NM
	</select>




	<select id="getStatisticsInterfaceTypeDetail-OLD" resultMap="StatisticsTypeDetailResultMapForList">
		SELECT
			   b.INTERFACE_ID
			 , b.INTEGRATION_ID
		     , b.INTERFACE_NM
		     , b.DATA_PR_METHOD
		     , nvl(b.DATA_PR_METHOD_NM, 'N/A') as DATA_PR_METHOD_NM
		     , b.START_RES_TYPE
		     , nvl(b.START_RES_TYPE_NM, 'N/A') as START_RES_TYPE_NM
		     , b.END_RES_TYPE
		     , nvl(b.END_RES_TYPE_NM, 'N/A') as END_RES_TYPE_NM
		     , SUM(NVL(a.ST_COMPSIZE, 0) + NVL(a.ST_N_COMPSIZE, 0)) AS DATA_SIZE
		     , (SUM(NVL(a.ST_SEND_ERR, 0) +  NVL(a.ST_RECV_ERR, 0))
		      	+ SUM(NVL(a.ST_PROCESSING, 0))
		        + SUM(NVL(a.ST_FINISHED, 0))) AS TOTAL_CNT
		     , SUM(NVL(a.ST_SEND_ERR, 0) +  NVL(a.ST_RECV_ERR, 0)) AS ERROR_CNT
		     , SUM(NVL(a.ST_PROCESSING, 0)) AS PROCESSING_CNT
		     , SUM(NVL(a.ST_FINISHED, 0)) AS FINISHED_CNT
		FROM
			 SI_STAT_INTF_HOUR a
			 inner JOIN (
		     	SELECT
		        	  b1.INTERFACE_ID
		        	, b1.INTEGRATION_ID
		        	, b1.INTERFACE_NM
		        	, b1.DATA_PR_METHOD
		            , b2.NM AS DATA_PR_METHOD_NM
		            , b1.START_RES_TYPE
		            , b3.NM AS START_RES_TYPE_NM
		            , b1.END_RES_TYPE
		            , b4.NM AS END_RES_TYPE_NM
		        FROM
		        	 TAN0201 b1
		             left outer JOIN (SELECT CD, NM FROM TSU0301 WHERE LEVEL1 = 'IM' AND LEVEL2='12' AND DEL_YN='N') b2 ON b2.CD = b1.DATA_PR_METHOD
		             left outer JOIN (SELECT CD, NM FROM TSU0301 WHERE LEVEL1 = 'IM' AND LEVEL2='04' AND DEL_YN='N') b3 ON b3.CD = b1.START_RES_TYPE
		             left outer JOIN (SELECT CD, NM FROM TSU0301 WHERE LEVEL1 = 'IM' AND LEVEL2='04' AND DEL_YN='N') b4 ON b4.CD = b1.END_RES_TYPE
		        WHERE
		        	 b1.DEL_YN = 'N'
		        	 <if test="scDataMethodType != null and scDataMethodType != ''">
		        	 	<choose>
			        	 	<when test="scDataMethodType eq 'isnull'.toString()">
			         AND b1.DATA_PR_METHOD is null
			        	 	</when>
			        	 	<otherwise>
			         AND b1.DATA_PR_METHOD = #{scDataMethodType}
			        	 	</otherwise>
			        	 </choose>
		        	 </if>
		        	 <if test="scStartResourceType != null and scStartResourceType != ''">
		        	 	<choose>
			        	 	<when test="scStartResourceType eq 'isnull'.toString()">
			         AND b1.START_RES_TYPE is null
			        	 	</when>
			        	 	<otherwise>
			         AND b1.START_RES_TYPE = #{scStartResourceType}
			        	 	</otherwise>
			        	 </choose>
		        	 </if>
		        	 <if test="scEndResourceType != null and scEndResourceType != ''">
		        	 	<choose>
			        	 	<when test="scEndResourceType eq 'isnull'.toString()">
			       	 AND b1.END_RES_TYPE is null
			        	 	</when>
			        	 	<otherwise>
			         AND b1.END_RES_TYPE = #{scEndResourceType}
			        	 	</otherwise>
			        	 </choose>
		        	 </if>
		     <!-- ) b ON b.INTERFACE_ID = a.INTF_ID -->
		     ) b ON b.INTEGRATION_ID = a.INTF_ID
		WHERE 1=1
			 AND a.ST_YEAR||a.ST_MONTH||a.ST_DAY||a.ST_HOUR <![CDATA[>=]]> #{scPeriodFrom}
    		 AND a.ST_YEAR||a.ST_MONTH||a.ST_DAY||a.ST_HOUR <![CDATA[<]]> #{scPeriodTo}
		GROUP BY
		       b.INTERFACE_ID
		     , b.INTEGRATION_ID
		     , b.INTERFACE_NM
		     , b.DATA_PR_METHOD
		     , b.DATA_PR_METHOD_NM
		     , b.START_RES_TYPE
		     , b.START_RES_TYPE_NM
		     , b.END_RES_TYPE
		     , b.END_RES_TYPE_NM
	</select>
	<resultMap id="StatisticsTypeDetailResultMapForList" type="StatisticsInterfaceType">
		<id property="interfaceId" 		column="INTERFACE_ID"/>
		<result property="integrationId" 	column="INTEGRATION_ID"/>
		<result property="interfaceNm" 	column="INTERFACE_NM"/>
		<result property="dataProcessMethodCd" 	column="DATA_PR_METHOD"/>
		<result property="dataProcessMethodNm" 	column="DATA_PR_METHOD_NM"/>
		<result property="startResourceTypeCd" 	column="START_RES_TYPE"/>
		<result property="startResourceTypeNm" 	column="START_RES_TYPE_NM"/>
		<result property="endResourceTypeCd" 	column="END_RES_TYPE"/>
		<result property="endResourceTypeNm" 	column="END_RES_TYPE_NM"/>
		<result property="totalCnt" 	column="TOTAL_CNT"/>
		<result property="errorCnt" 	column="ERROR_CNT"/>
		<result property="processingCnt" 	column="PROCESSING_CNT"/>
		<result property="finishedCnt" 	column="FINISHED_CNT"/>
		<result property="dataSize" column="DATA_SIZE"/>
	</resultMap>


	<!--
	기준조건별 인터페이스 기간병(비교) 기본 - 통계를 조회한다.
	public List<Map> getStatisticsInterfacePeriodForCompareDefault throws Exception;
	 -->
	<select id="getStatisticsInterfacePeriodForCompareDefault" parameterType="Map" resultType="java.util.LinkedHashMap">
		select
				  nvl(prev.CATEGORY_ID, curr.CATEGORY_ID) as "categoryId"
				, nvl(prev.CATEGORY_NM, curr.CATEGORY_NM) as "categoryNm"
				, nvl(prev.TOTAL_CNT, 0) as "totalCount_prev"
				, nvl(prev.FINISHED_CNT, 0) as "finishedCount_prev"
        		, nvl(prev.ERROR_CNT, 0) as "errorCount_prev"
				, nvl(prev.DATA_SIZE, 0) as "dataSize_prev"
        		, nvl(curr.TOTAL_CNT, 0) as "totalCount_curr"
				, nvl(curr.FINISHED_CNT, 0) as "finishedCount_curr"
        		, nvl(curr.ERROR_CNT, 0) as "errorCount_curr"
				, nvl(curr.DATA_SIZE, 0) as "dataSize_curr"
		from
				(
					select
							  SUM(NVL(a.ST_FINISHED, 0)) + SUM(NVL(a.ST_PROCESSING, 0)) + SUM(NVL(a.ST_SEND_ERR, 0) + NVL(a.ST_RECV_ERR, 0)) AS TOTAL_CNT
							, SUM(NVL(a.ST_FINISHED, 0)) AS FINISHED_CNT
							, SUM(NVL(a.ST_PROCESSING, 0)) + SUM(NVL(a.ST_SEND_ERR, 0) + NVL(a.ST_RECV_ERR, 0)) AS ERROR_CNT
							, SUM(NVL(a.ST_COMPSIZE, 0) + NVL(a.ST_N_COMPSIZE, 0)) AS DATA_SIZE
							<if test="scCategory != null and (scCategory eq 'interface'.toString())">
							, a.INTF_ID as CATEGORY_ID
							, b.INTERFACE_NM as CATEGORY_NM
							</if>
							<if test="scCategory != null and (scCategory eq 'channel'.toString())">
							, b.CHANNEL_ID as CATEGORY_ID
							, c.CHANNEL_NM as CATEGORY_NM
							</if>
							<if test="scCategory != null and (scCategory eq 'process'.toString())">
							, b.BUSINESS_ID as CATEGORY_ID
							, c.BUSINESS_NM as CATEGORY_NM
							</if>
							<if test="scCategory != null and (scCategory eq 'system'.toString())">
							, b.SYSTEM_ID as CATEGORY_ID
							, b.SYSTEM_NM||'('||b.SYSTEM_CD||')' as CATEGORY_NM
							</if>
					from
							(
								select
										  aa.ST_YEAR
										, aa.ST_MONTH
										, aa.ST_DAY
										, aa.ST_FINISHED
										, aa.ST_PROCESSING
										, aa.ST_SEND_ERR
										, aa.ST_RECV_ERR
										, aa.ST_COMPSIZE
										, aa.ST_N_COMPSIZE
										, aa.INTF_ID
								from
										SI_STAT_INTF_HOUR aa
										<if test="isInterfaceAdmin == null or isInterfaceAdmin eq 'N'.toString()">
											<if test="isLinked != null and (isLinked eq 'YES'.toString())">
										<!-- inner join tan0219 bb on aa.intf_id = bb.interface_id and bb.del_yn = 'N' and bb.user_id = #{userId} -->
										inner join (
											select y.INTEGRATION_ID
											from tan0219 x, TAN0201 y
											where x.INTERFACE_ID = y.INTERFACE_ID
												and x.del_yn = 'N'
												and x.user_id = #{userId}
										) bb on aa.intf_id = bb.INTEGRATION_ID
											</if>
										</if>
								where 	1=1
								<if test="scCriteria != null and (scCriteria eq 'Days'.toString())">
									and aa.ST_YEAR = #{paramYearPrev}
									and aa.ST_MONTH = #{paramMonthPrev}
									and aa.ST_DAY = #{paramDayPrev}
								</if>
								<if test="scCriteria != null and (scCriteria eq 'Weeks'.toString())">
									and aa.ST_YEAR||aa.ST_MONTH||aa.ST_DAY <![CDATA[>=]]> #{paramFromDatePrev}
									and aa.ST_YEAR||aa.ST_MONTH||aa.ST_DAY <![CDATA[<=]]> #{paramToDatePrev}
								</if>
								<if test="scCriteria != null and (scCriteria eq 'Months'.toString())">
									and aa.ST_YEAR = #{paramYearPrev}
									and aa.ST_MONTH = #{paramMonthPrev}
								</if>
							) a
							<if test="scCategory != null and (scCategory eq 'interface'.toString())">
							inner join (
								select
										  <!-- INTERFACE_ID -->
										  INTEGRATION_ID
										, INTERFACE_NM
								from
										TAN0201
								where	1=1
								<if test="scCategoryDetailId != null and scCategoryDetailId != ''">
									<!-- and	INTERFACE_ID = #{scCategoryDetailId} -->
									and	INTEGRATION_ID = #{scCategoryDetailId}
								</if>
								<if test="scCategoryDetailNm != null and scCategoryDetailNm != ''">
									and	INTERFACE_NM like '%'||#{scCategoryDetailNm}||'%'
								</if>
							<!-- ) b on b.INTERFACE_ID = a.INTF_ID -->
							) b on b.INTEGRATION_ID = a.INTF_ID
							</if>
							<if test="scCategory != null and (scCategory eq 'channel'.toString())">
							inner join (
								select
										  <!-- INTERFACE_ID -->
										  INTEGRATION_ID
										, CHANNEL_ID
								from
										TAN0201
							<!-- ) b on b.INTERFACE_ID = a.INTF_ID -->
							) b on b.INTEGRATION_ID = a.INTF_ID
							inner join (
								select
										  CHANNEL_ID
										, CHANNEL_NM
								from
										TIM0002
								<if test="scCategoryDetailId != null and scCategoryDetailId != ''">
								where 	CHANNEL_ID = #{scCategoryDetailId}
								</if>
							) c on c.CHANNEL_ID = b.CHANNEL_ID
							</if>
							<if test="scCategory != null and (scCategory eq 'process'.toString())">
							inner join (
								select
										  <!-- x.INTERFACE_ID -->
										  y.INTEGRATION_ID
										, x.BUSINESS_ID
								from
										TAN0101 x, TAN0201 y
								where x.INTERFACE_ID = y.INTERFACE_ID
							<!-- ) b on b.INTERFACE_ID = a.INTF_ID -->
							) b on b.INTEGRATION_ID = a.INTF_ID
							inner join (
								select
										  BUSINESS_ID
										, BUSINESS_NM
								from
										TIM0301
								<if test="scCategoryDetailId != null and scCategoryDetailId != ''">
								where 	BUSINESS_ID = #{scCategoryDetailId}
								</if>
							) c on c.BUSINESS_ID = b.BUSINESS_ID
							</if>
							<if test="scCategory != null and (scCategory eq 'system'.toString())">
							inner join (
								select
										  <!-- b1.INTERFACE_ID -->
										  b3.INTEGRATION_ID
										, b2.SYSTEM_ID
										, b2.SYSTEM_NM
										, b2.SYSTEM_CD
								from
										TAN0213 b1
										inner join TAN0201 b3 on b3.INTERFACE_ID = b1.INTERFACE_ID
										inner join (
											select
													  SYSTEM_ID
													, SYSTEM_NM
													, SYSTEM_CD
											from
													TIM0101
											where
													DEL_YN = 'N'
												and GRP_YN = 'N'
												<if test="scCategoryDetailId != null and scCategoryDetailId != ''">
												and SYSTEM_ID = #{scCategoryDetailId}
												</if>
										) b2 on b2.SYSTEM_ID = b1.SYSTEM_ID
								where
										b1.DEL_YN = 'N'
									<if test="scNodeType != null and scNodeType != ''">
									AND b1.NODE_TYPE = #{scNodeType}
									</if>
								group by
										  <!-- b1.INTERFACE_ID -->
										  b3.INTEGRATION_ID
										, b2.SYSTEM_ID
										, b2.SYSTEM_NM
										, b2.SYSTEM_CD
							<!-- ) b on b.INTERFACE_ID = a.INTF_ID -->
							) b on b.INTEGRATION_ID = a.INTF_ID
							</if>
					group by
							<if test="scCategory != null and (scCategory eq 'interface'.toString())">
							  a.INTF_ID
							, b.INTERFACE_NM
							</if>
							<if test="scCategory != null and (scCategory eq 'channel'.toString())">
							  b.CHANNEL_ID
							, c.CHANNEL_NM
							</if>
							<if test="scCategory != null and (scCategory eq 'process'.toString())">
							  b.BUSINESS_ID
							, c.BUSINESS_NM
							</if>
							<if test="scCategory != null and (scCategory eq 'system'.toString())">
							  b.SYSTEM_ID
							, b.SYSTEM_NM||'('||b.SYSTEM_CD||')'
							</if>
				) prev
				full outer JOIN (
					select
							  SUM(NVL(a.ST_FINISHED, 0)) + SUM(NVL(a.ST_PROCESSING, 0)) + SUM(NVL(a.ST_SEND_ERR, 0) + NVL(a.ST_RECV_ERR, 0)) AS TOTAL_CNT
							, SUM(NVL(a.ST_FINISHED, 0)) AS FINISHED_CNT
							, SUM(NVL(a.ST_PROCESSING, 0)) + SUM(NVL(a.ST_SEND_ERR, 0) + NVL(a.ST_RECV_ERR, 0)) AS ERROR_CNT
							, SUM(NVL(a.ST_COMPSIZE, 0) + NVL(a.ST_N_COMPSIZE, 0)) AS DATA_SIZE
							<if test="scCategory != null and (scCategory eq 'interface'.toString())">
							, a.INTF_ID as CATEGORY_ID
							, b.INTERFACE_NM as CATEGORY_NM
							</if>
							<if test="scCategory != null and (scCategory eq 'channel'.toString())">
							, b.CHANNEL_ID as CATEGORY_ID
							, c.CHANNEL_NM as CATEGORY_NM
							</if>
							<if test="scCategory != null and (scCategory eq 'process'.toString())">
							, b.BUSINESS_ID as CATEGORY_ID
							, c.BUSINESS_NM as CATEGORY_NM
							</if>
							<if test="scCategory != null and (scCategory eq 'system'.toString())">
							, b.SYSTEM_ID as CATEGORY_ID
							, b.SYSTEM_NM||'('||b.SYSTEM_CD||')' as CATEGORY_NM
							</if>
					from
							(
								select
										  aa.ST_YEAR
										, aa.ST_MONTH
										, aa.ST_DAY
										, aa.ST_FINISHED
										, aa.ST_PROCESSING
										, aa.ST_SEND_ERR
										, aa.ST_RECV_ERR
										, aa.ST_COMPSIZE
										, aa.ST_N_COMPSIZE
										, aa.INTF_ID
								from
										SI_STAT_INTF_HOUR aa
										<if test="isInterfaceAdmin == null or isInterfaceAdmin eq 'N'.toString()">
											<if test="isLinked != null and (isLinked eq 'YES'.toString())">
										<!-- inner join tan0219 bb on aa.intf_id = bb.interface_id and bb.del_yn = 'N' and bb.user_id = #{userId} -->
										inner join (
											select y.INTEGRATION_ID
											from tan0219 x, TAN0201 y
											where x.INTERFACE_ID = y.INTERFACE_ID
												and x.del_yn = 'N'
												and x.user_id = #{userId}
										) bb on aa.intf_id = bb.INTEGRATION_ID
											</if>
										</if>
								where 	1=1
								<if test="scCriteria != null and (scCriteria eq 'Days'.toString())">
									and aa.ST_YEAR = #{paramYearCurr}
									and aa.ST_MONTH = #{paramMonthCurr}
									and aa.ST_DAY = #{paramDayCurr}
								</if>
								<if test="scCriteria != null and (scCriteria eq 'Weeks'.toString())">
									and aa.ST_YEAR||aa.ST_MONTH||aa.ST_DAY <![CDATA[>=]]> #{paramFromDateCurr}
									and aa.ST_YEAR||aa.ST_MONTH||aa.ST_DAY <![CDATA[<=]]> #{paramToDateCurr}
								</if>
								<if test="scCriteria != null and (scCriteria eq 'Months'.toString())">
									and aa.ST_YEAR = #{paramYearCurr}
									and aa.ST_MONTH = #{paramMonthCurr}
								</if>
							) a
							<if test="scCategory != null and (scCategory eq 'interface'.toString())">
							inner join (
								select
										  <!-- INTERFACE_ID -->
										  INTEGRATION_ID
										, INTERFACE_NM
								from
										TAN0201
								where	1=1
								<if test="scCategoryDetailId != null and scCategoryDetailId != ''">
									<!-- and	INTERFACE_ID = #{scCategoryDetailId} -->
									and	INTEGRATION_ID = #{scCategoryDetailId}
								</if>
								<if test="scCategoryDetailNm != null and scCategoryDetailNm != ''">
									and	INTERFACE_NM like '%'||#{scCategoryDetailNm}||'%'
								</if>
							<!-- ) b on b.INTERFACE_ID = a.INTF_ID -->
							) b on b.INTEGRATION_ID = a.INTF_ID
							</if>
							<if test="scCategory != null and (scCategory eq 'channel'.toString())">
							inner join (
								select
										  <!-- INTERFACE_ID -->
										  INTEGRATION_ID
										, CHANNEL_ID
								from
										TAN0201
							<!-- ) b on b.INTERFACE_ID = a.INTF_ID -->
							) b on b.INTEGRATION_ID = a.INTF_ID
							inner join (
								select
										  CHANNEL_ID
										, CHANNEL_NM
								from
										TIM0002
								<if test="scCategoryDetailId != null and scCategoryDetailId != ''">
								where 	CHANNEL_ID = #{scCategoryDetailId}
								</if>
							) c on c.CHANNEL_ID = b.CHANNEL_ID
							</if>
							<if test="scCategory != null and (scCategory eq 'process'.toString())">
							inner join (
								select
										  <!-- x.INTERFACE_ID -->
										  y.INTEGRATION_ID
										, x.BUSINESS_ID
								from
										TAN0101 x, TAN0201 y
								where x.INTERFACE_ID = y.INTERFACE_ID
							<!-- ) b on b.INTERFACE_ID = a.INTF_ID -->
							) b on b.INTEGRATION_ID = a.INTF_ID
							inner join (
								select
										  BUSINESS_ID
										, BUSINESS_NM
								from
										TIM0301
								<if test="scCategoryDetailId != null and scCategoryDetailId != ''">
								where 	BUSINESS_ID = #{scCategoryDetailId}
								</if>
							) c on c.BUSINESS_ID = b.BUSINESS_ID
							</if>
							<if test="scCategory != null and (scCategory eq 'system'.toString())">
							inner join (
								select
										  <!-- b1.INTERFACE_ID -->
										  b3.INTEGRATION_ID
										, b2.SYSTEM_ID
										, b2.SYSTEM_NM
										, b2.SYSTEM_CD
								from
										TAN0213 b1
										inner join TAN0201 b3 on b3.INTERFACE_ID = b1.INTERFACE_ID
										inner join (
											select
													  SYSTEM_ID
													, SYSTEM_NM
													, SYSTEM_CD
											from
													TIM0101
											where
													DEL_YN = 'N'
												and GRP_YN = 'N'
												<if test="scCategoryDetailId != null and scCategoryDetailId != ''">
												and SYSTEM_ID = #{scCategoryDetailId}
												</if>
										) b2 on b2.SYSTEM_ID = b1.SYSTEM_ID
								where
										b1.DEL_YN = 'N'
									<if test="scNodeType != null and scNodeType != ''">
									AND b1.NODE_TYPE = #{scNodeType}
									</if>
								group by
										  <!-- b1.INTERFACE_ID -->
										  b3.INTEGRATION_ID
										, b2.SYSTEM_ID
										, b2.SYSTEM_NM
										, b2.SYSTEM_CD
							<!-- ) b on b.INTERFACE_ID = a.INTF_ID -->
							) b on b.INTEGRATION_ID = a.INTF_ID
							</if>
					group by
							<if test="scCategory != null and (scCategory eq 'interface'.toString())">
							  a.INTF_ID
							, b.INTERFACE_NM
							</if>
							<if test="scCategory != null and (scCategory eq 'channel'.toString())">
							  b.CHANNEL_ID
							, c.CHANNEL_NM
							</if>
							<if test="scCategory != null and (scCategory eq 'process'.toString())">
							  b.BUSINESS_ID
							, c.BUSINESS_NM
							</if>
							<if test="scCategory != null and (scCategory eq 'system'.toString())">
							  b.SYSTEM_ID
							, b.SYSTEM_NM||'('||b.SYSTEM_CD||')'
							</if>
				) curr on curr.CATEGORY_ID = prev.CATEGORY_ID
	</select>

	<!--
	기준조건별 인터페이스 기간병(비교) 상세 - 통계를 조회한다.
	public List<Map> getStatisticsInterfacePeriodForCompareDetail throws Exception;
	 -->
	<select id="getStatisticsInterfacePeriodForCompareDetail" parameterType="Map" resultType="java.util.LinkedHashMap">
		select
				  ymd.chk_date as "CHK_DATE"
				, st_data.CATEGORY_ID as "CATEGORY_ID"
				, st_data.CATEGORY_NM as "CATEGORY_NM"
		        , st_data.TOTAL_CNT as "TOTAL_CNT"
		        , st_data.FINISHED_CNT as "FINISHED_CNT"
		        , st_data.ERROR_CNT as "ERROR_CNT"
		        , st_data.DATA_SIZE as "DATA_SIZE"
		from
				(
					<if test="scCriteria != null and (scCriteria eq 'Days'.toString())">
					select
							to_char(to_date(#{paramChkDate}, 'yyyymmdd'), 'yyyymmdd')||CHK_HOUR as chk_date
					from 	(
							select '00' as CHK_HOUR from dual
				          union all select '01' as CHK_HOUR from dual
				          union all select '02' as CHK_HOUR from dual
				          union all select '03' as CHK_HOUR from dual
				          union all select '04' as CHK_HOUR from dual
				          union all select '05' as CHK_HOUR from dual
				          union all select '06' as CHK_HOUR from dual
				          union all select '07' as CHK_HOUR from dual
				          union all select '08' as CHK_HOUR from dual
				          union all select '09' as CHK_HOUR from dual
				          union all select '10' as CHK_HOUR from dual
				          union all select '11' as CHK_HOUR from dual
				          union all select '12' as CHK_HOUR from dual
				          union all select '13' as CHK_HOUR from dual
				          union all select '14' as CHK_HOUR from dual
				          union all select '15' as CHK_HOUR from dual
				          union all select '16' as CHK_HOUR from dual
				          union all select '17' as CHK_HOUR from dual
				          union all select '18' as CHK_HOUR from dual
				          union all select '19' as CHK_HOUR from dual
				          union all select '20' as CHK_HOUR from dual
				          union all select '21' as CHK_HOUR from dual
				          union all select '22' as CHK_HOUR from dual
				          union all select '23' as CHK_HOUR from dual
					)
					</if>
					<if test="scCriteria != null and (scCriteria eq 'Weeks'.toString())">
					select
							  to_char(to_date(sunday,'yyyymmdd') + (LEVEL-1),'yyyymmdd') as chk_date
					from
							(
								select
										to_char(trunc(DT,'D'),'yyyymmdd') as sunday
								from
										(
											select to_date(#{paramChkDate},'yyyymmdd') as DT
											from Dual
										)
							)
					connect by LEVEL <![CDATA[<=]]> 7
					</if>
					<if test="scCriteria != null and (scCriteria eq 'Months'.toString())">
					select
							to_char(to_Date(#{paramChkDate}, 'yyyymm') + (LEVEL-1), 'yyyymmdd') as chk_date
					from 	DUAL
					connect by LEVEL <![CDATA[<=]]> to_char(last_day(to_date(#{paramChkDate}, 'yyyymm')), 'dd')
					</if>
				) ymd
				left outer join
				(
					select
						<choose>
							<when test="scCriteria != null and (scCriteria eq 'Days'.toString())">
							  a.ST_YEAR||a.ST_MONTH||a.ST_DAY||a.ST_HOUR AS ST_DATE
							</when>
							<otherwise>
							  a.ST_YEAR||a.ST_MONTH||a.ST_DAY AS ST_DATE
							</otherwise>
						</choose>
							, SUM(NVL(a.ST_FINISHED, 0)) + SUM(NVL(a.ST_PROCESSING, 0)) + SUM(NVL(a.ST_SEND_ERR, 0) + NVL(a.ST_RECV_ERR, 0)) AS TOTAL_CNT
							, SUM(NVL(a.ST_FINISHED, 0)) AS FINISHED_CNT
							, SUM(NVL(a.ST_PROCESSING, 0)) + SUM(NVL(a.ST_SEND_ERR, 0) + NVL(a.ST_RECV_ERR, 0)) AS ERROR_CNT
							, SUM(NVL(a.ST_COMPSIZE, 0) + NVL(a.ST_N_COMPSIZE, 0)) AS DATA_SIZE
							<if test="scCategory != null and (scCategory eq 'interface'.toString())">
							, a.INTF_ID as CATEGORY_ID
							, b.INTERFACE_NM as CATEGORY_NM
							</if>
							<if test="scCategory != null and (scCategory eq 'channel'.toString())">
							, b.CHANNEL_ID as CATEGORY_ID
							, c.CHANNEL_NM as CATEGORY_NM
							</if>
							<if test="scCategory != null and (scCategory eq 'process'.toString())">
							, b.BUSINESS_ID as CATEGORY_ID
							, c.BUSINESS_NM as CATEGORY_NM
							</if>
							<if test="scCategory != null and (scCategory eq 'system'.toString())">
							, b.SYSTEM_ID as CATEGORY_ID
							, b.SYSTEM_NM||'('||b.SYSTEM_CD||')' as CATEGORY_NM
							</if>
					from
							(
								select
										  aa.ST_YEAR
										, aa.ST_MONTH
										, aa.ST_DAY
										<if test="scCriteria != null and (scCriteria eq 'Days'.toString())">
										, aa.ST_HOUR
										</if>
										, aa.ST_FINISHED
										, aa.ST_PROCESSING
										, aa.ST_SEND_ERR
										, aa.ST_RECV_ERR
										, aa.ST_COMPSIZE
										, aa.ST_N_COMPSIZE
										, aa.INTF_ID
								from
										SI_STAT_INTF_HOUR aa
										<if test="isInterfaceAdmin == null or isInterfaceAdmin eq 'N'.toString()">
											<if test="isLinked != null and (isLinked eq 'YES'.toString())">
										<!-- inner join tan0219 bb on aa.intf_id = bb.interface_id and bb.del_yn = 'N' and bb.user_id = #{userId} -->
										inner join (
											select y.INTEGRATION_ID
											from tan0219 x, TAN0201 y
											where x.INTERFACE_ID = y.INTERFACE_ID
												and x.del_yn = 'N'
												and x.user_id = #{userId}
										) bb on aa.intf_id = bb.INTEGRATION_ID
											</if>
										</if>
								where 	1=1
								<if test="scCriteria != null and (scCriteria eq 'Days'.toString())">
									and aa.ST_YEAR = #{paramYear}
									and aa.ST_MONTH = #{paramMonth}
									and aa.ST_DAY = #{paramDay}
								</if>
								<if test="scCriteria != null and (scCriteria eq 'Weeks'.toString())">
									and aa.ST_YEAR||aa.ST_MONTH||aa.ST_DAY <![CDATA[>=]]> #{paramFromDate}
									and aa.ST_YEAR||aa.ST_MONTH||aa.ST_DAY <![CDATA[<=]]> #{paramToDate}
								</if>
								<if test="scCriteria != null and (scCriteria eq 'Months'.toString())">
									and aa.ST_YEAR = #{paramYear}
									and aa.ST_MONTH = #{paramMonth}
								</if>
							) a
							<if test="scCategory != null and (scCategory eq 'interface'.toString())">
							inner join (
								select
										  <!-- INTERFACE_ID -->
										  INTEGRATION_ID
										, INTERFACE_NM
								from
										TAN0201
								<if test="scCategoryDetailId != null and scCategoryDetailId != ''">
								<!-- where 	INTERFACE_ID = #{scCategoryDetailId} -->
								where 	INTEGRATION_ID = #{scCategoryDetailId}
								</if>
							<!-- ) b on b.INTERFACE_ID = a.INTF_ID -->
							) b on b.INTEGRATION_ID = a.INTF_ID
							</if>
							<if test="scCategory != null and (scCategory eq 'channel'.toString())">
							inner join (
								select
										  <!-- INTERFACE_ID -->
										  INTEGRATION_ID
										, CHANNEL_ID
								from
										TAN0201
							<!-- ) b on b.INTERFACE_ID = a.INTF_ID -->
							) b on b.INTEGRATION_ID = a.INTF_ID
							inner join (
								select
										  CHANNEL_ID
										, CHANNEL_NM
								from
										TIM0002
								<if test="scCategoryDetailId != null and scCategoryDetailId != ''">
								where 	CHANNEL_ID = #{scCategoryDetailId}
								</if>
							) c on c.CHANNEL_ID = b.CHANNEL_ID
							</if>
							<if test="scCategory != null and (scCategory eq 'process'.toString())">
							inner join (
								select
										  <!-- x.INTERFACE_ID -->
										  y.INTEGRATION_ID
										, x.BUSINESS_ID
								from
										TAN0101 x, TAN0201 y
								where x.INTERFACE_ID = y.INTERFACE_ID
							<!-- ) b on b.INTERFACE_ID = a.INTF_ID -->
							) b on b.INTEGRATION_ID = a.INTF_ID
							inner join (
								select
										  BUSINESS_ID
										, BUSINESS_NM
								from
										TIM0301
								<if test="scCategoryDetailId != null and scCategoryDetailId != ''">
								where 	BUSINESS_ID = #{scCategoryDetailId}
								</if>
							) c on c.BUSINESS_ID = b.BUSINESS_ID
							</if>
							<if test="scCategory != null and (scCategory eq 'system'.toString())">
							inner join (
								select
										  <!-- b1.INTERFACE_ID -->
										  b3.INTEGRATION_ID
										, b2.SYSTEM_ID
										, b2.SYSTEM_NM
										, b2.SYSTEM_CD
								from
										TAN0213 b1
										inner join TAN0201 b3 on b3.INTERFACE_ID = b1.INTERFACE_ID
										inner join (
											select
													  SYSTEM_ID
													, SYSTEM_NM
													, SYSTEM_CD
											from
													TIM0101
											where
													DEL_YN = 'N'
												and GRP_YN = 'N'
												<if test="scCategoryDetailId != null and scCategoryDetailId != ''">
												and SYSTEM_ID = #{scCategoryDetailId}
												</if>
										) b2 on b2.SYSTEM_ID = b1.SYSTEM_ID
								where
										b1.DEL_YN = 'N'
									<if test="scNodeType != null and scNodeType != ''">
									AND b1.NODE_TYPE = #{scNodeType}
									</if>
								group by
										  <!-- b1.INTERFACE_ID -->
										  b3.INTEGRATION_ID
										, b2.SYSTEM_ID
										, b2.SYSTEM_NM
										, b2.SYSTEM_CD
							<!-- ) b on b.INTERFACE_ID = a.INTF_ID -->
							) b on b.INTEGRATION_ID = a.INTF_ID
							</if>
					group by
						<choose>
							<when test="scCriteria != null and (scCriteria eq 'Days'.toString())">
							  a.ST_YEAR||a.ST_MONTH||a.ST_DAY||a.ST_HOUR
							</when>
							<otherwise>
							  a.ST_YEAR||a.ST_MONTH||a.ST_DAY
							</otherwise>
						</choose>
							<if test="scCategory != null and (scCategory eq 'interface'.toString())">
							, a.INTF_ID
							, b.INTERFACE_NM
							</if>
							<if test="scCategory != null and (scCategory eq 'channel'.toString())">
							, b.CHANNEL_ID
							, c.CHANNEL_NM
							</if>
							<if test="scCategory != null and (scCategory eq 'process'.toString())">
							, b.BUSINESS_ID
							, c.BUSINESS_NM
							</if>
							<if test="scCategory != null and (scCategory eq 'system'.toString())">
							, b.SYSTEM_ID
							, b.SYSTEM_NM||'('||b.SYSTEM_CD||')'
							</if>
				) st_data on st_data.ST_DATE = ymd.chk_date
		order by ymd.chk_date asc
	</select>


	<!--
	기준조건별 장애 발생율 통계를 조회한다.
	public List<StatisticsInterfacePeriod> getStatisticsFailureRate throws Exception;
	 -->
	<select id="getStatisticsFailureRate" resultMap="getStatisticsFailureRateMapForList">
		SELECT
			  CATEGORY_ID
			, CATEGORY_NM
			, DATA_SIZE
			, TOTAL_CNT
			, ERROR_CNT
			, PROCESSING_CNT
			, FINISHED_CNT
		FROM (
			SELECT
				b.CATEGORY_ID,
			    b.CATEGORY_NM,
			    SUM(NVL(a.ST_COMPSIZE, 0) + NVL(a.ST_N_COMPSIZE, 0)) AS DATA_SIZE,
				(SUM(NVL(a.ST_SEND_ERR, 0) +  NVL(a.ST_RECV_ERR, 0))
			  		+ SUM(NVL(a.ST_PROCESSING, 0))
			  		+ SUM(NVL(a.ST_FINISHED, 0))) AS TOTAL_CNT,
				SUM(NVL(a.ST_SEND_ERR, 0) +  NVL(a.ST_RECV_ERR, 0)) AS ERROR_CNT,
				SUM(NVL(a.ST_PROCESSING, 0)) AS PROCESSING_CNT,
				SUM(NVL(a.ST_FINISHED, 0)) AS FINISHED_CNT
			FROM
				SI_STAT_INTF_HOUR a
				<if test="scCategory != null and (scCategory eq 'interface'.toString())">
				inner JOIN (
			    	SELECT
			        	  <!-- b1.INTERFACE_ID as CATEGORY_ID -->
			        	  b1.INTEGRATION_ID as CATEGORY_ID
			        	, b1.INTERFACE_NM as CATEGORY_NM
			        FROM
			        	TAN0201 b1
			        WHERE b1.DEL_YN = 'N'
			        <if test="scCategoryDetailNm != null and scCategoryDetailNm != ''">
                    	and b1.INTERFACE_NM like '%'||#{scCategoryDetailNm}||'%'
                    </if>
                    <if test="scCategoryDetailId != null and scCategoryDetailId != ''">
                    	<!-- and b1.INTERFACE_ID = #{scCategoryDetailId} -->
                    	and b1.INTEGRATION_ID = #{scCategoryDetailId}
                    </if>
			    ) b ON b.CATEGORY_ID = a.INTF_ID
				</if>
				<if test="scCategory != null and (scCategory eq 'process'.toString())">
				inner JOIN (
			        SELECT
			              <!-- d1.INTERFACE_ID -->
			              d2.INTEGRATION_ID
			            , d1.BUSINESS_ID
			        FROM
			            TAN0218 d1, TAN0201 d2
			        WHERE d1.INTERFACE_ID = d2.INTERFACE_ID
			        	and d1.DEL_YN = 'N'
			        	<if test="scNodeType != null and scNodeType != ''">
                    	AND d1.NODE_TYPE = #{scNodeType}
                    	</if>
                    GROUP BY
		            	  <!-- d1.INTERFACE_ID -->
		            	  d2.INTEGRATION_ID
		                , d1.BUSINESS_ID
			    <!-- ) d ON a.INTF_ID = d.INTERFACE_ID -->
			    ) d ON a.INTF_ID = d.INTEGRATION_ID
			    <choose>
			    	<when test="detailId != null and detailId != ''">
			    		<if test="searchMode != null and (searchMode eq 'DEFAULT'.toString())">
                inner JOIN ( SELECT c1.P_BIZ_ID, c1.C_BIZ_ID AS BUSINESS_ID   FROM TIM0302 c1   WHERE c1.DEL_YN = 'N'   AND c1.P_BIZ_ID = #{detailId} ) c ON d.BUSINESS_ID = c.BUSINESS_ID
                        </if>
                        <if test="searchMode != null and (searchMode eq 'DETAIL'.toString())">
                inner JOIN (
                	SELECT  c1.P_BIZ_ID, c1.C_BIZ_ID AS BUSINESS_ID
                	FROM   TIM0302 c1
                    	inner JOIN (
                      		SELECT  c21.C_BIZ_ID
                      		FROM    TIM0302 c21
                      		WHERE   c21.DEL_YN = 'N'
                        		AND   c21.P_BIZ_ID = #{detailId}
                        		AND   c21.DEPTH = 1
                  	) c2 ON c1.P_BIZ_ID = c2.C_BIZ_ID
                  	WHERE c1.DEL_YN = 'N'
                ) c ON d.BUSINESS_ID = c.BUSINESS_ID
                        </if>
			    inner JOIN ( SELECT b1.BUSINESS_ID  AS CATEGORY_ID, b1.BUSINESS_NM  AS CATEGORY_NM  FROM TIM0301 b1   WHERE b1.DEL_YN = 'N' ) b ON c.P_BIZ_ID = b.CATEGORY_ID
			    	</when>
			    	<otherwise>
			    inner JOIN ( SELECT c1.P_BIZ_ID, c1.C_BIZ_ID AS BUSINESS_ID   FROM TIM0302 c1   WHERE c1.DEL_YN = 'N' ) c ON d.BUSINESS_ID = c.BUSINESS_ID
				inner JOIN ( SELECT d1.BUSINESS_ID AS CATEGORY_ID , d1.BUSINESS_NM AS CATEGORY_NM   FROM TIM0301 d1   WHERE d1.DEL_YN = 'N'   AND d1.ROOT_YN = 'Y' ) b ON c.P_BIZ_ID = b.CATEGORY_ID
					</otherwise>
			    </choose>
			    </if>
				<if test="scCategory != null and (scCategory eq 'requirement'.toString())">
				inner JOIN (
				    SELECT
			           	  <!-- b1.INTERFACE_ID -->
			           	  b2.INTEGRATION_ID
			            , b1.REQUIREMENT_ID AS CATEGORY_ID
			            , b1.REQUIREMENT_NM AS CATEGORY_NM
			        FROM
			           	TAN0101 b1, TAN0201 b2
			        WHERE b1.INTERFACE_ID = b2.INTERFACE_ID
			           	and b1.DEL_YN = 'N'
			        <if test="scCategoryDetailNm != null and scCategoryDetailNm != ''">
                    	and b1.REQUIREMENT_NM like '%'||#{scCategoryDetailNm}||'%'
                    </if>
			    <!-- ) b ON a.INTF_ID = b.INTERFACE_ID -->
			    ) b ON a.INTF_ID = b.INTEGRATION_ID
				</if>
				<if test="scCategory != null and (scCategory eq 'channel'.toString())">
				inner JOIN (
	      			SELECT
	           			  <!-- b1.INTERFACE_ID -->
	           			  b1.INTEGRATION_ID
	               		, b2.CHANNEL_ID AS CATEGORY_ID
	               		, b2.CHANNEL_NM AS CATEGORY_NM
	           		FROM
	           			TAN0201 b1
	               		inner JOIN (SELECT CHANNEL_ID, CHANNEL_NM FROM TIM0002 WHERE DEL_YN='N') b2 ON b2.CHANNEL_ID = b1.CHANNEL_ID
	           		WHERE
	           			b1.DEL_YN = 'N'
	      		<!-- ) b ON a.INTF_ID = b.INTERFACE_ID -->
	      		) b ON a.INTF_ID = b.INTEGRATION_ID
	      		</if>
			    <if test="scCategory != null and (scCategory eq 'system'.toString())">
			    inner JOIN (
			    	SELECT
			        	  <!-- b1.INTERFACE_ID -->
			        	  b3.INTEGRATION_ID
			            , b2.SYSTEM_ID AS CATEGORY_ID
			            , b2.SYSTEM_NM||'('||b2.SYSTEM_CD||')' AS CATEGORY_NM
			        FROM
			         	TAN0213 b1
			         	inner join TAN0201 b3 on b3.INTERFACE_ID = b1.INTERFACE_ID
			            inner JOIN (
			            	SELECT
			            		  SYSTEM_ID
			            		, SYSTEM_NM
			            		, SYSTEM_CD
			            	FROM
			            		  TIM0101
			            	WHERE
			            		  DEL_YN = 'N'
			            		and grp_yn = 'N'
			            	<if test="scCategoryDetailId != null and scCategoryDetailId != ''">
                            	and SYSTEM_ID = #{scCategoryDetailId}
                            </if>
			            ) b2 ON b2.SYSTEM_ID = b1.SYSTEM_ID
			        WHERE
			         	b1.DEL_YN = 'N'
			         	<if test="scNodeType != null and scNodeType != ''">
                    	AND b1.NODE_TYPE = #{scNodeType}
                    	</if>
                    GROUP BY
		            	  <!-- b1.INTERFACE_ID -->
		            	  b3.INTEGRATION_ID
		                , b2.SYSTEM_ID
		                , b2.SYSTEM_NM||'('||b2.SYSTEM_CD||')'
			    <!-- ) b ON a.INTF_ID = b.INTERFACE_ID -->
			    ) b ON a.INTF_ID = b.INTEGRATION_ID
			    </if>
			    <if test="scCategory != null and (scCategory eq 'type'.toString())">
			    inner JOIN (
			    	SELECT
			        	  <!-- b1.INTERFACE_ID -->
			        	  b1.INTEGRATION_ID
			            , b2.CD AS CATEGORY_ID
			            , b2.NM AS CATEGORY_NM
			        FROM
			        	TAN0201 b1
			            inner JOIN (SELECT CD, NM FROM TSU0301 WHERE LEVEL1 = 'IM' AND LEVEL2 = '12' AND DEL_YN = 'N') b2 ON b2.cd = b1.DATA_PR_METHOD
			    <!-- ) b ON a.INTF_ID = b.INTERFACE_ID -->
			    ) b ON a.INTF_ID = b.INTEGRATION_ID
			    </if>
			WHERE 1=1
				AND a.ST_YEAR||a.ST_MONTH||a.ST_DAY||a.ST_HOUR <![CDATA[>=]]> #{scPeriodFrom}
				AND a.ST_YEAR||a.ST_MONTH||a.ST_DAY||a.ST_HOUR <![CDATA[<]]> #{scPeriodTo}
			GROUP BY
				b.CATEGORY_ID,
			    b.CATEGORY_NM
		)
		WHERE (ERROR_CNT + PROCESSING_CNT) <![CDATA[>]]> 0
		ORDER BY
			  ((ERROR_CNT + PROCESSING_CNT)/TOTAL_CNT) desc
	</select>
	<resultMap id="getStatisticsFailureRateMapForList" type="StatisticsFailureRate">
		<id property="categoryId"		column="CATEGORY_ID"/>
		<result property="categoryId"	column="CATEGORY_ID"/>
		<result property="categoryNm"	column="CATEGORY_NM"/>
		<result property="totalCnt" 	column="TOTAL_CNT"/>
		<result property="errorCnt" 	column="ERROR_CNT"/>
		<result property="processingCnt" 	column="PROCESSING_CNT"/>
		<result property="finishedCnt" 	column="FINISHED_CNT"/>
		<result property="dataSize" column="DATA_SIZE"/>
	</resultMap>


	<!--
	기준조건별 장애 발생 인터페이스를 조회한다.
	public List<Map> getStatisticsFailureInterfaceList throws Exception;
	 -->
	<select id="getStatisticsFailureInterfaceList" parameterType="Map" resultType="java.util.LinkedHashMap">
		SELECT
			  aaa.CATEGORY_ID as "categoryId"
			, aaa.CATEGORY_NM as "categoryNm"
			, aaa.INTF_ID as "integrationId"
			, aaa.ERROR_CNT as "errorCnt"
			, aaa.PROCESSING_CNT "processingCnt"
			, bbb.INTERFACE_NM as "interfaceNm"
			, bbb.INTERFACE_ID as "interfaceId"
		FROM (
			SELECT
				b.CATEGORY_ID,
			    b.CATEGORY_NM,
				SUM(NVL(a.ST_SEND_ERR, 0) +  NVL(a.ST_RECV_ERR, 0)) AS ERROR_CNT,
				SUM(NVL(a.ST_PROCESSING, 0)) AS PROCESSING_CNT,
				a.INTF_ID
			FROM
				SI_STAT_INTF_HOUR a
				<if test="scCategory != null and (scCategory eq 'interface'.toString())">
				inner JOIN (
			    	SELECT
			        	  <!-- b1.INTERFACE_ID as CATEGORY_ID -->
			        	  b1.INTEGRATION_ID as CATEGORY_ID
			        	, b1.INTERFACE_NM as CATEGORY_NM
			        FROM
			        	TAN0201 b1
			        WHERE b1.DEL_YN = 'N'
                    <if test="searchDetailKey != null and searchDetailKey != ''">
                    	<!-- and b1.INTERFACE_ID = #{searchDetailKey} -->
                    	and b1.INTEGRATION_ID = #{searchDetailKey}
                    </if>
			    ) b ON b.CATEGORY_ID = a.INTF_ID
				</if>
				<if test="scCategory != null and (scCategory eq 'process'.toString())">
				inner JOIN (
			        SELECT distinct
			              <!-- d1.INTERFACE_ID -->
			              d2.INTEGRATION_ID
			            , d1.BUSINESS_ID
			        FROM
			            TAN0218 d1, TAN0201 d2
			        WHERE d1.INTERFACE_ID = d2.INTERFACE_ID
			        	and d1.DEL_YN = 'N'
			        	<if test="scNodeType != null and scNodeType != ''">
                    	AND d1.NODE_TYPE = #{scNodeType}
                    	</if>
			    <!-- ) d ON a.INTF_ID = d.INTERFACE_ID -->
			    ) d ON a.INTF_ID = d.INTEGRATION_ID
			    inner join (
			    	select distinct C_BIZ_ID
			    	from TIM0302
			    	where DEL_YN = 'N'
			    	<if test="searchDetailKey != null and searchDetailKey != ''">
                   	and P_BIZ_ID = #{searchDetailKey}
                   	</if>
			    ) c on c.C_BIZ_ID = d.BUSINESS_ID
			    inner JOIN ( SELECT d1.BUSINESS_ID AS CATEGORY_ID , d1.BUSINESS_NM AS CATEGORY_NM   FROM TIM0301 d1   WHERE d1.DEL_YN = 'N' ) b ON c.C_BIZ_ID = b.CATEGORY_ID
			    </if>
				<if test="scCategory != null and (scCategory eq 'requirement'.toString())">
				inner JOIN (
				    SELECT
			           	  <!-- b1.INTERFACE_ID -->
			           	  b2.INTEGRATION_ID
			            , b1.REQUIREMENT_ID AS CATEGORY_ID
			            , b1.REQUIREMENT_NM AS CATEGORY_NM
			        FROM
			           	TAN0101 b1, TAN0201 b2
			        WHERE b1.INTERFACE_ID = b2.INTERFACE_ID
			           	and b1.DEL_YN = 'N'
			        <if test="scCategoryDetailNm != null and scCategoryDetailNm != ''">
                    	and b1.REQUIREMENT_NM like '%'||#{scCategoryDetailNm}||'%'
                    </if>
                    <if test="searchDetailKey != null and searchDetailKey != ''">
                    	and b1.REQUIREMENT_ID = #{searchDetailKey}
                   	</if>
			    <!-- ) b ON a.INTF_ID = b.INTERFACE_ID -->
			    ) b ON a.INTF_ID = b.INTEGRATION_ID
				</if>
				<if test="scCategory != null and (scCategory eq 'channel'.toString())">
				inner JOIN (
	      			SELECT
	           			  <!-- b1.INTERFACE_ID -->
	           			  b1.INTEGRATION_ID
	               		, b2.CHANNEL_ID AS CATEGORY_ID
	               		, b2.CHANNEL_NM AS CATEGORY_NM
	           		FROM
	           			TAN0201 b1
	               		inner JOIN (SELECT CHANNEL_ID, CHANNEL_NM FROM TIM0002 WHERE DEL_YN='N') b2 ON b2.CHANNEL_ID = b1.CHANNEL_ID
	           		WHERE
	           			b1.DEL_YN = 'N'
	           		<if test="searchDetailKey != null and searchDetailKey != ''">
                    	and b1.CHANNEL_ID = #{searchDetailKey}
                   	</if>
	      		<!-- ) b ON a.INTF_ID = b.INTERFACE_ID -->
	      		) b ON a.INTF_ID = b.INTEGRATION_ID
	      		</if>
			    <if test="scCategory != null and (scCategory eq 'system'.toString())">
			    inner JOIN (
			    	SELECT
			        	  <!-- b1.INTERFACE_ID -->
			        	  b3.INTEGRATION_ID
			            , b2.SYSTEM_ID AS CATEGORY_ID
			            , b2.SYSTEM_NM||'('||b2.SYSTEM_CD||')' AS CATEGORY_NM
			        FROM
			         	TAN0213 b1
			         	inner join TAN0201 b3 on b3.INTERFACE_ID = b1.INTERFACE_ID
			            inner JOIN (
			            	SELECT
			            		  SYSTEM_ID
			            		, SYSTEM_NM
			            		, SYSTEM_CD
			            	FROM
			            		  TIM0101
			            	WHERE
			            		  DEL_YN = 'N'
			            		and grp_yn = 'N'
			            	<if test="searchDetailKey != null and searchDetailKey != ''">
		                    	and SYSTEM_ID = #{searchDetailKey}
		                   	</if>
			            ) b2 ON b2.SYSTEM_ID = b1.SYSTEM_ID
			        WHERE
			         	b1.DEL_YN = 'N'
			         	<if test="scNodeType != null and scNodeType != ''">
                    	AND b1.NODE_TYPE = #{scNodeType}
                    	</if>
                    GROUP BY
		            	  <!-- b1.INTERFACE_ID -->
		            	  b3.INTEGRATION_ID
		                , b2.SYSTEM_ID
		                , b2.SYSTEM_NM||'('||b2.SYSTEM_CD||')'
			    <!-- ) b ON a.INTF_ID = b.INTERFACE_ID -->
			    ) b ON a.INTF_ID = b.INTEGRATION_ID
			    </if>
			    <if test="scCategory != null and (scCategory eq 'type'.toString())">
			    inner JOIN (
			    	SELECT
			        	  <!-- b1.INTERFACE_ID -->
			        	  b1.INTEGRATION_ID
			            , b2.CD AS CATEGORY_ID
			            , b2.NM AS CATEGORY_NM
			        FROM
			        	TAN0201 b1
			            inner JOIN (SELECT CD, NM FROM TSU0301 WHERE LEVEL1 = 'IM' AND LEVEL2 = '12' AND DEL_YN = 'N') b2 ON b2.cd = b1.DATA_PR_METHOD
			        where 1=1
			        <if test="searchDetailKey != null and searchDetailKey != ''">
                    	and b1.DATA_PR_METHOD = #{searchDetailKey}
                   	</if>
			    <!-- ) b ON a.INTF_ID = b.INTERFACE_ID -->
			    ) b ON a.INTF_ID = b.INTEGRATION_ID
			    </if>
			WHERE 1=1
				AND a.ST_YEAR||a.ST_MONTH||a.ST_DAY||a.ST_HOUR <![CDATA[>=]]> #{scPeriodFrom}
				AND a.ST_YEAR||a.ST_MONTH||a.ST_DAY||a.ST_HOUR <![CDATA[<]]> #{scPeriodTo}
			GROUP BY
				b.CATEGORY_ID,
			    b.CATEGORY_NM,
			    a.INTF_ID
		) aaa
		left outer join (
			select
				  INTERFACE_ID
				, INTERFACE_NM
				, INTEGRATION_ID
			from
				TAN0201
			where DEL_YN = 'N'
		<!-- ) bbb on bbb.INTERFACE_ID = aaa.INTF_ID -->
		) bbb on bbb.INTEGRATION_ID = aaa.INTF_ID
		where (aaa.ERROR_CNT + aaa.PROCESSING_CNT) <![CDATA[>]]> 0
		order by (aaa.ERROR_CNT + aaa.PROCESSING_CNT) desc
	</select>


	<!--
	기준조건별 장애 유형별 통계를 조회한다.
	public List<StatisticsFailureType> getStatisticsFailureType(Map arg) throws Exception;
	 -->
	<select id="getStatisticsFailureType" resultMap="getStatisticsFailureTypeMapForList">
		select
			  a.CD as FAILURE_TYPE_CD
			, (select NM from TOP0302 where CLASS_CD = a.CD) as FAILURE_TYPE_NM
			, (select DEPTH from TOP0302 where CLASS_CD = a.CD) as FAILURE_TYPE_DEPTH
			, SUM(NVL(b.CNT, 0)) as FAILURE_TYPE_CNT
		from
			(
				select
					  SUBSTR(a1.CLASS_CD, 0, #{scCdLen}) as CD
					, a1.CLASS_CD
					, a1.PARENT_CD
					, a1.DEPTH
					, a1.NM
				from
					TOP0302 a1
				<choose>
					<when test="scClassCd != null and scClassCd != ''">
				start with a1.PARENT_CD = #{scClassCd}
					</when>
					<otherwise>
				start with a1.PARENT_CD is null
					</otherwise>
				</choose>
				connect by prior a1.CLASS_CD = a1.PARENT_CD
			) a
			left outer join (
				select
					  b1.CLASS_CD
					, COUNT(b1.PROBLEM_ID) as CNT
				from
					TOP0301 b1
				where
					b1.DEL_YN = 'N'
					and b1.REG_DATE <![CDATA[>=]]> #{scPeriodFrom}
					and b1.REG_DATE <![CDATA[<]]> #{scPeriodTo}
				group by b1.CLASS_CD
			)b on a.CLASS_CD = b.CLASS_CD
		group by
			a.CD
	</select>
	<resultMap id="getStatisticsFailureTypeMapForList" type="StatisticsFailureType">
		<id property="failureTypeCd"			column="FAILURE_TYPE_CD"/>
		<result property="failureTypeNm"		column="FAILURE_TYPE_NM"/>
		<result property="failureTypeDepth" 	column="FAILURE_TYPE_DEPTH"/>
		<result property="failureTypeCnt" 		column="FAILURE_TYPE_CNT"/>
	</resultMap>



	<select id="getDevelopmentDailyStatusByChannel" resultType="java.util.LinkedHashMap">

		select
			 a.ST_DATE 		as "stDate"
			,a.CHANNEL_ID   as "channelId"
			,b.CHANNEL_NM   as "channelNm"
			,a.TYPE         as "type"
			,(select to_char(count(REQUIREMENT_ID)) from TSU0505 where ST_DATE = a.ST_DATE) as "totCnt"
			,(select to_char(count(REQUIREMENT_ID)) from TSU0505 where CHANNEL_ID = a.CHANNEL_ID and ST_DATE = a.ST_DATE) as "channelCnt"
			,to_char(trunc(100 * (select count(REQUIREMENT_ID) from TSU0505 where CHANNEL_ID = a.CHANNEL_ID and ST_DATE = a.ST_DATE) / (select count(REQUIREMENT_ID) from TSU0505 where ST_DATE = a.ST_DATE))) as "channelPer"
			,to_char(a.CNT) as "cnt"
			,to_char(trunc(100 * a.CNT/(select count(REQUIREMENT_ID) from TSU0505 where ST_DATE = a.ST_DATE and CHANNEL_ID = a.CHANNEL_ID))) as "per"
		from (

			SELECT
				ST_DATE,
				CHANNEL_ID,
				'1'									  AS TYPE,
				count(REQUIREMENT_ID) AS CNT
			 FROM TSU0505
			WHERE STATUS NOT IN ('G0', 'H0', 'I0') -- 개발완료, 테스트완료 이행완료건 제외
		      and ST_DATE <![CDATA[>=]]> #{startDate}
		      and ST_DATE <![CDATA[<=]]> #{endDate}
			GROUP BY ST_DATE , CHANNEL_ID
			UNION ALL
			SELECT
				ST_DATE,
				CHANNEL_ID,
				'2'									  AS TYPE,
				count(REQUIREMENT_ID) AS DEV_CNT
			 FROM TSU0505
			WHERE STATUS = 'G0' -- 개발완료
		      and ST_DATE <![CDATA[>=]]> #{startDate}
			  and ST_DATE <![CDATA[<=]]> #{endDate}
			GROUP BY ST_DATE , CHANNEL_ID
			UNION ALL
			SELECT
				ST_DATE,
				CHANNEL_ID,
				'3'									  AS TYPE,
				count(REQUIREMENT_ID) AS TEST_CNT
			 FROM TSU0505
			WHERE STATUS = 'H0' -- 테스트완료
		      and ST_DATE <![CDATA[>=]]> #{startDate}
		      and ST_DATE <![CDATA[<=]]> #{endDate}
			GROUP BY ST_DATE , CHANNEL_ID
			UNION ALL
			SELECT
				ST_DATE,
				CHANNEL_ID,
				'4'									  AS TYPE,
				count(REQUIREMENT_ID) AS MOVE_CNT
			 FROM TSU0505
			WHERE STATUS = 'I0' -- 이행완료건
		      and ST_DATE <![CDATA[>=]]> #{startDate}
		      and ST_DATE <![CDATA[<=]]> #{endDate}
			GROUP BY ST_DATE , CHANNEL_ID
		) a
		INNER JOIN TIM0002 b
		  on a.CHANNEL_ID = b.CHANNEL_ID
	<if test="channelId != null">
		  and a.CHANNEL_ID = #{channelId}
	</if>
		  and b.DEL_YN = 'N'
		order by a.TYPE, a.ST_DATE , b.CHANNEL_NM

	</select>

	<select id="getDevelopmentDailyStatusByResource" resultType="java.util.LinkedHashMap">

		select
			 a.ST_DATE 		 as "stDate"
			,a.RESOURCE_TYPE as "resourceCd"
			,b.NM   		 as "resourceNm"
			,a.TYPE          as "type"
			,(select to_char(count(REQUIREMENT_ID)) from TSU0505 where ST_DATE = a.ST_DATE) as "totCnt"
			,(select to_char(count(REQUIREMENT_ID)) from TSU0505 where RESOURCE_TYPE = a.RESOURCE_TYPE and ST_DATE = a.ST_DATE) as "resourceCnt"
			,to_char(trunc(100 * (select count(REQUIREMENT_ID) from TSU0505 where RESOURCE_TYPE = a.RESOURCE_TYPE and ST_DATE = a.ST_DATE) / (select count(REQUIREMENT_ID) from TSU0505 where ST_DATE = a.ST_DATE))) as "resourcePer"
			,to_char(a.CNT) as "cnt"
			,to_char(trunc(100 * a.CNT/(select count(REQUIREMENT_ID) from TSU0505 where ST_DATE = a.ST_DATE and RESOURCE_TYPE = a.RESOURCE_TYPE))) as "per"
		from (

			SELECT
				ST_DATE,
				RESOURCE_TYPE,
				'1'					  AS TYPE,
				count(REQUIREMENT_ID) AS CNT
			 FROM TSU0505
			WHERE STATUS NOT IN ('G0', 'H0', 'I0') -- 개발완료, 테스트완료 이행완료건 제외
			  and ST_DATE <![CDATA[>=]]> #{startDate}
			  and ST_DATE <![CDATA[<=]]> #{endDate}
			GROUP BY ST_DATE , RESOURCE_TYPE
			UNION ALL
			SELECT
				ST_DATE,
				RESOURCE_TYPE,
				'2'					  AS TYPE,
				count(REQUIREMENT_ID) AS DEV_CNT
			 FROM TSU0505
			WHERE STATUS = 'G0' -- 개발완료
			  and ST_DATE <![CDATA[>=]]> #{startDate}
			  and ST_DATE <![CDATA[<=]]> #{endDate}
			GROUP BY ST_DATE , RESOURCE_TYPE
			UNION ALL
			SELECT
				ST_DATE,
				RESOURCE_TYPE,
				'3'					  AS TYPE,
				count(REQUIREMENT_ID) AS TEST_CNT
			FROM TSU0505
			WHERE STATUS = 'H0' -- 테스트완료
			  and ST_DATE <![CDATA[>=]]> #{startDate}
			  and ST_DATE <![CDATA[<=]]> #{endDate}
			GROUP BY ST_DATE , RESOURCE_TYPE
			UNION ALL
			SELECT
				ST_DATE,
				RESOURCE_TYPE,
				'4'					  AS TYPE,
				count(REQUIREMENT_ID) AS MOVE_CNT
			 FROM TSU0505
			WHERE STATUS = 'I0' -- 이행완료건
			  and ST_DATE <![CDATA[>=]]> #{startDate}
			  and ST_DATE <![CDATA[<=]]> #{endDate}
			GROUP BY ST_DATE , RESOURCE_TYPE
		) a

		INNER JOIN TSU0301 b
		  on a.RESOURCE_TYPE = b.CD
		 and b.LEVEL1 = 'IM'
		 and b.LEVEL2 = '04'
		 and b.DEL_YN = 'N'

		<if test="resourceCd != null">
			and a.RESOURCE_TYPE = #{resourceCd}
		</if>
		order by a.TYPE,  a.ST_DATE , b.NM

	</select>


	<select id="getDevelopmentDailyStatusByProvider" resultType="java.util.LinkedHashMap">

		select
			 a.ST_DATE 		 as "stDate"
			,a.SYSTEM_ID 	 as "systemId"
			,b.SYSTEM_NM   	 as "systemNm"
			,a.TYPE          as "type"
			,(select to_char(count(REQUIREMENT_ID)) from TSU0505 where ST_DATE = a.ST_DATE) as "totCnt"
			,(select to_char(count(REQUIREMENT_ID)) from TSU0505 where SYSTEM_ID = a.SYSTEM_ID and ST_DATE = a.ST_DATE) as "systemCnt"
			,to_char(trunc(100 * (select count(REQUIREMENT_ID) from TSU0505 where SYSTEM_ID = a.SYSTEM_ID and ST_DATE = a.ST_DATE) / (select count(REQUIREMENT_ID) from TSU0505 where ST_DATE = a.ST_DATE))) as "systemPer"
			,to_char(a.CNT) as "cnt"
			,to_char(trunc(100 * a.CNT/(select count(REQUIREMENT_ID) from TSU0505 where ST_DATE = a.ST_DATE and SYSTEM_ID = a.SYSTEM_ID))) as "per"
		from (

			SELECT
				ST_DATE,
				SYSTEM_ID,
				'1'					  AS TYPE,
				count(REQUIREMENT_ID) AS CNT
			 FROM TSU0505
			WHERE STATUS NOT IN ('G0', 'H0', 'I0') -- 개발완료, 테스트완료 이행완료건 제외
			  and ST_DATE <![CDATA[>=]]> #{startDate}
			  and ST_DATE <![CDATA[<=]]> #{endDate}
			GROUP BY ST_DATE , SYSTEM_ID
			UNION ALL
			SELECT
				ST_DATE,
				SYSTEM_ID,
				'2'					  AS TYPE,
				count(REQUIREMENT_ID) AS DEV_CNT
			 FROM TSU0505
			WHERE STATUS = 'G0' -- 개발완료
			  and ST_DATE <![CDATA[>=]]> #{startDate}
			  and ST_DATE <![CDATA[<=]]> #{endDate}
			GROUP BY ST_DATE , SYSTEM_ID
			UNION ALL
			SELECT
				ST_DATE,
				SYSTEM_ID,
				'3'					  AS TYPE,
				count(REQUIREMENT_ID) AS TEST_CNT
			 FROM TSU0505
			WHERE STATUS = 'H0' -- 테스트완료
			  and ST_DATE <![CDATA[>=]]> #{startDate}
			  and ST_DATE <![CDATA[<=]]> #{endDate}
			GROUP BY ST_DATE , SYSTEM_ID
			UNION ALL
			SELECT
				ST_DATE,
				SYSTEM_ID,
				'4'					  AS TYPE,
				count(REQUIREMENT_ID) AS MOVE_CNT
			 FROM TSU0505
			WHERE STATUS = 'I0' -- 이행완료건
			  and ST_DATE <![CDATA[>=]]> #{startDate}
			  and ST_DATE <![CDATA[<=]]> #{endDate}
			GROUP BY ST_DATE , SYSTEM_ID
		) a
		INNER JOIN TIM0101 b
		 on a.SYSTEM_ID = b.SYSTEM_ID
		and b.DEL_YN = 'N'


		<if test="systemId != null">
			and a.SYSTEM_ID = #{systemId}
		</if>
		order by a.TYPE,  a.ST_DATE , b.SYSTEM_NM

	</select>


	<select id="getDevelopmentDailyStatusList" resultMap="requirementResultMapForList">

		select
			 a.REQUIREMENT_ID
			,a.REQUIREMENT_NM
			,a.STATUS
			,b.NM as STATUS_NM
			,a.BUSINESS_ID
			,a.BUSINESS_NM
			,a.BUSINESS_CD
			,a.INTERFACE_ID
			,a.INTERFACE_NM
			,a.INTEGRATION_ID
			,a.CHANNEL_ID
			,a.CHANNEL_NM
			,a.SYSTEM_ID
			,a.SYSTEM_NM
			,a.SYSTEM_CD
			,a.SEQ as SYS_SEQ
			,a.NODE_TYPE as SYS_NODE_TYPE
			,c.NM as SYS_NODE_TYPE_NM
			,a.SERVICE
			,a.RESOURCE_TYPE
			,d.NM as RESOURCE_NM
		from (
			select
				 a.REQUIREMENT_ID
				,a.REQUIREMENT_NM
				,a.STATUS
				,b.BUSINESS_ID
				,b.BUSINESS_NM
				,b.BUSINESS_CD
				,c.INTERFACE_ID
				,c.INTERFACE_NM
				,c.INTEGRATION_ID
				,c.SYSTEM_ID
				,c.SYSTEM_NM
				,c.SYSTEM_CD
				,c.SEQ
				,c.NODE_TYPE
				,c.SERVICE
				,c.RESOURCE_TYPE
				,e.CHANNEL_ID
				,e.CHANNEL_NM
			 from TAN0101 a
			inner join TIM0301 b on a.BUSINESS_ID = b.BUSINESS_ID
			left outer join (
				select
					 a.SYSTEM_ID
					,a.SYSTEM_NM
					,a.SYSTEM_CD
					,b.INTERFACE_ID
					,c.INTERFACE_NM
					,c.INTEGRATION_ID
					,b.SEQ
					,b.NODE_TYPE
					,b.SERVICE
					,b.RESOURCE_TYPE
				 from TAN0213 b
				inner join TIM0101 a on a.SYSTEM_ID = b.SYSTEM_ID and b.DEL_YN = 'N'
				inner join TAN0201 c on c.INTERFACE_ID = b.INTERFACE_ID

			) c on a.INTERFACE_ID = c.INTERFACE_ID
			left outer join TAN0201 d on d.INTERFACE_ID = a.INTERFACE_ID
			inner join TIM0002 e on d.CHANNEL_ID = e.CHANNEL_ID and e.DEL_YN = 'N'
		) a
		left outer join TSU0301 b on a.STATUS = b.CD and b.LEVEL1 = 'AN' and b.LEVEL2 = '01'
		left outer join TSU0301 c on a.NODE_TYPE = c.CD and c.LEVEL1 = 'IM' and c.LEVEL2 = '08'
		left outer join TSU0301 d on a.RESOURCE_TYPE = d.CD and d.LEVEL1 = 'IM' and d.LEVEL2 = '04'
		inner join TSU0505 f on a.REQUIREMENT_ID = f.REQUIREMENT_ID and f.ST_DATE = #{stDate}

		<if test="channelId != null">
		  and f.CHANNEL_ID = #{channelId}
		</if>

		<if test="systemId != null">
			and f.SYSTEM_ID = #{systemId}
		</if>

		<if test="resourceCd != null">
			and f.RESOURCE_TYPE = #{resourceCd}
		</if>

		order by a.CHANNEL_NM, 	a.BUSINESS_NM, 	a.REQUIREMENT_NM, a.INTERFACE_NM, a.STATUS
	</select>

	<resultMap id="requirementResultMapForList" type="Requirement">
		<id property="requirementId" 		column="REQUIREMENT_ID"/>
		<result property="requirementNm" 	column="REQUIREMENT_NM"/>
		<result property="status" 			column="STATUS"/>
		<result property="statusNm" 		column="STATUS_NM"/>

		<association property="business" javaType="Business">
			<id property="businessId" 		column="BUSINESS_ID"/>
			<result property="businessNm" 	column="BUSINESS_NM"/>
			<result property="businessCd" 	column="BUSINESS_CD"/>
		</association>

		<association property="interfaceInfo" javaType="Interface">
			<id property="interfaceId" 		column="INTERFACE_ID"/>
			<result property="integrationId" 	column="INTEGRATION_ID"/>
			<result property="interfaceNm" 	column="INTERFACE_NM"/>
			<association property="channel" javaType="Channel">
				<id property="channelId"		column="CHANNEL_ID"/>
				<result property="channelNm" 	column="CHANNEL_NM"/>
			</association>


			<collection property="systemList" ofType="System">
				<id property="systemId" 		column="SYSTEM_ID"/>
				<id property="seq" 				column="SYS_SEQ"/>
				<result property="systemCd" 	column="SYSTEM_CD"/>
				<result property="systemNm" 	column="SYSTEM_NM"/>
				<result property="nodeType" 	column="SYS_NODE_TYPE"/>
				<result property="nodeTypeNm" 	column="SYS_NODE_TYPE_NM"/>
				<result property="service" 		column="SERVICE"/>
				<result property="resourceCd" 	column="RESOURCE_TYPE"/>
				<result property="resourceNm" 	column="RESOURCE_NM"/>
			</collection>


			<collection property="senderSystemInfoList" ofType="DisplaySystemInfo">
				<discriminator javaType="string" column="SYS_NODE_TYPE">
					<case value="0" resultMap="displaySystemInfoResultMap"/>
				</discriminator>
			</collection>

			<collection property="receiverSystemInfoList" ofType="DisplaySystemInfo">
				<discriminator javaType="string" column="SYS_NODE_TYPE">
					<case value="2" resultMap="displaySystemInfoResultMap"/>
				</discriminator>
			</collection>

		</association>
	</resultMap>


	<resultMap type="DisplaySystemInfo" id="displaySystemInfoResultMap">
		<id property="systemId" 		column="SYSTEM_ID"/>
		<id property="seq" 				column="SYS_SEQ"/>
		<result property="systemCd" 	column="SYSTEM_CD"/>
		<result property="systemNm" 	column="SYSTEM_NM"/>
		<result property="nodeType" 	column="SYS_NODE_TYPE"/>
		<result property="nodeTypeNm" 	column="SYS_NODE_TYPE_NM"/>
		<result property="service" 		column="SERVICE"/>
		<result property="resourceCd" 	column="RESOURCE_TYPE"/>
		<result property="resourceNm" 	column="RESOURCE_NM"/>
		<result property="businessId" 	column="BZ_BUSINESS_ID"/>
		<result property="businessCd" 	column="BZ_BUSINESS_CD"/>
		<result property="businessNm" 	column="BZ_BUSINESS_NM"/>
	</resultMap>


	<!--
		월별 인터페이스 변화량 SQL
	 -->
	<select id="getMonthlyChangeInterfaceCount" resultType="java.util.LinkedHashMap">

		SELECT
		    A.CHANNEL_ID
		  , ( SELECT CHANNEL_NM FROM TIM0002 WHERE CHANNEL_ID = A.CHANNEL_ID ) AS CHANNEL_NM
		  , A.YMD
		  , SUM(NVL(B.ACCUMUL_CNT,0)) AS ACCUMUL_CNT
		  , SUM(NVL(B.REG_CNT,0)) AS REG_CNT
		  , SUM(NVL(B.DEL_CNT,0)) AS DEL_CNT
		  , SUM(NVL(B.CHK_CNT,0)) AS CHK_CNT
		FROM
		  (
		    SELECT
		      A.YMD, B.CHANNEL_ID
		    FROM
		      (
		        SELECT
		          TO_CHAR(ADD_MONTHS( TO_DATE( #{fromDate}, 'YYYYMM '),( LEVEL - 1 ) ), 'YYYYMM') AS YMD
		        FROM DUAL
		        CONNECT BY ADD_MONTHS( TO_DATE( #{fromDate}, 'YYYYMM' ),( LEVEL - 1 ) ) <![CDATA[<=]]> ADD_MONTHS( TO_DATE( #{toDate}, 'YYYYMM' ), + 0 )
		      ) A
		      CROSS JOIN
		      (
		        SELECT CHANNEL_ID
		        FROM TIM0002
		        WHERE DEL_YN = 'N'
		      ) B
		  ) A
		  LEFT OUTER JOIN TSU0509 B ON
		    A.YMD = B.ST_MONTH
		    AND A.CHANNEL_ID = B.CHANNEL_ID
		WHERE
			1 = 1
		<if test="channelId != null and channelId != ''">
			AND A.CHANNEL_ID = #{channelId}
		</if>
		GROUP BY A.CHANNEL_ID, A.YMD
		ORDER BY A.CHANNEL_ID, A.YMD
	</select>






	<select id="getStatisticsInterfacePeriodTotal" resultMap="StatisticsInterfacePeriodSummaryMap">
		SELECT
			  CATEGORY_ID
			, CATEGORY_NM
			, RANGE
			, DATA_SIZE
			, ERROR_CNT
			, PROCESSING_CNT
			, FINISHED_CNT
			, TOTAL_CNT
		FROM
			(
				SELECT
					  B.CATEGORY_ID
					, B.CATEGORY_NM
					, A.RANGE
					, NVL( SUM(A.DATA_SIZE), 0 ) AS DATA_SIZE
					, NVL( SUM(A.ERROR_CNT), 0 ) AS ERROR_CNT
					, NVL( SUM(A.PROCESSING_CNT), 0 ) AS PROCESSING_CNT
					, NVL( SUM(A.FINISHED_CNT), 0 ) AS FINISHED_CNT
					, NVL( SUM(A.TOTAL_CNT), 0 ) AS TOTAL_CNT
				FROM
					<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.period-total-main"/>
					<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.period-innerJoin-total-interface"/>
				GROUP BY B.CATEGORY_ID, B.CATEGORY_NM, A.RANGE
				ORDER BY CATEGORY_NM ASC
			)

		UNION ALL


		SELECT
			  '-' AS CATEGORY_ID
			, 'TOTAL-SUM' AS CATEGORY_NM
			, '-' AS RANGE
			, NVL( SUM(A.DATA_SIZE), 0 ) AS DATA_SIZE
			, NVL( SUM(A.ERROR_CNT), 0 ) AS ERROR_CNT
			, NVL( SUM(A.PROCESSING_CNT), 0 ) AS PROCESSING_CNT
			, NVL( SUM(A.FINISHED_CNT), 0 ) AS FINISHED_CNT
			, NVL( SUM(A.TOTAL_CNT), 0 ) AS TOTAL_CNT
		FROM
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.period-total-main"/>
			<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.period-innerJoin-total-interface"/>
	</select>



	<sql id="period-total-main">
					(
						<if test="scCriteriaType != null and (scCriteriaType eq 'hourly'.toString())">
						SELECT
							INTERFACE_ID
							, TR_DATE AS RANGE
							, NVL(DATA_SiZE, 0) AS DATA_SIZE
							, NVL(ERROR_CNT, 0) AS ERROR_CNT
							, NVL(PROCESS_CNT, 0) AS PROCESSING_CNT
							, NVL(SUCCESS_CNT, 0) AS FINISHED_CNT
							, NVL(ERROR_CNT, 0) + NVL(PROCESS_CNT, 0) + NVL(SUCCESS_CNT, 0) AS TOTAL_CNT
						FROM  TSU0803
						WHERE
							1=1
							AND TR_DATE BETWEEN #{scPeriodFrom} AND #{scPeriodTo}
						</if>
						<if test="scCriteriaType != null and (scCriteriaType eq 'daily'.toString())">
						SELECT
							INTERFACE_ID
							, TR_DAY AS RANGE
							, NVL(DATA_SiZE, 0) AS DATA_SIZE
							, NVL(ERROR_CNT, 0) AS ERROR_CNT
							, NVL(PROCESS_CNT, 0) AS PROCESSING_CNT
							, NVL(SUCCESS_CNT, 0) AS FINISHED_CNT
							, NVL(ERROR_CNT, 0) + NVL(PROCESS_CNT, 0) + NVL(SUCCESS_CNT, 0) AS TOTAL_CNT
						FROM  TSU0804
						WHERE
							1=1
							AND TR_DAY BETWEEN #{scPeriodFrom} AND #{scPeriodTo}
						</if>
						<if test="scCriteriaType != null and (scCriteriaType eq 'monthly'.toString())">
						SELECT
							INTERFACE_ID
							, TR_MONTH AS RANGE
							, NVL(DATA_SiZE, 0) AS DATA_SIZE
							, NVL(ERROR_CNT, 0) AS ERROR_CNT
							, NVL(PROCESS_CNT, 0) AS PROCESSING_CNT
							, NVL(SUCCESS_CNT, 0) AS FINISHED_CNT
							, NVL(ERROR_CNT, 0) + NVL(PROCESS_CNT, 0) + NVL(SUCCESS_CNT, 0) AS TOTAL_CNT
						FROM  TSU0805
						WHERE
							1=1
							AND TR_MONTH BETWEEN #{scPeriodFrom} AND #{scPeriodTo}
						</if>
						<if test="scCriteriaType != null and (scCriteriaType eq 'yearly'.toString())">
						SELECT
							INTERFACE_ID
							, SUBSTR(TR_MONTH,1,4) AS RANGE
							, NVL(SUM(DATA_SiZE), 0) AS DATA_SIZE
							, NVL(SUM(ERROR_CNT), 0) AS ERROR_CNT
							, NVL(SUM(PROCESS_CNT), 0) AS PROCESSING_CNT
							, NVL(SUM(SUCCESS_CNT), 0) AS FINISHED_CNT
							, NVL(SUM(ERROR_CNT), 0) + NVL(SUM(PROCESS_CNT), 0) + NVL(SUM(SUCCESS_CNT), 0) AS TOTAL_CNT
						FROM  TSU0805
						WHERE
							1=1
							AND SUBSTR(TR_MONTH,1,4) BETWEEN #{scPeriodFrom} AND #{scPeriodTo}
            			GROUP BY INTERFACE_ID, SUBSTR(TR_MONTH,1,4)
						</if>
					) A
	</sql>

	<sql id="period-innerJoin-total-interface">
					<if test="scCategory != null and (scCategory eq 'interface'.toString())">
					INNER JOIN
					(
						SELECT
							  A.INTEGRATION_ID AS CATEGORY_ID
							, A.INTERFACE_NM AS CATEGORY_NM
							, A.INTERFACE_ID
						FROM TAN0201 A
						<choose>
						<when test="isInterfaceAdmin != null and isInterfaceAdmin eq 'Y'.toString()">
						</when>
						<otherwise>
							INNER JOIN
							-----------------------------------------------
							-- 데이터 엑세스 권한 별 인터페이스 조회
							-----------------------------------------------
							(
								SELECT
									DISTINCT
									TSU0220.INTERFACE_ID
								FROM
									-----------------------------------------------
									-- 로그인 사용자 데이터 엑세스 권한 조회(공통)
									-----------------------------------------------
									(
										SELECT
											DISTINCT
											TSU0219.USER_ID   AS USER_ID,
											TSU0221.C_ROLE_ID AS ROLE_ID,
											TSU0221.DEPTH     AS DEPTH
										FROM
											(
												SELECT
													TSU0101.USER_ID,
													TSU0219.ROLE_ID
												FROM
													TSU0101 TSU0101
													INNER JOIN TSU0219 TSU0219 ON
														TSU0101.USER_ID = TSU0219.USER_ID
												WHERE
													1 = 1
													AND TSU0101.DEL_YN = 'N'
													AND TSU0101.USER_ID = #{userId}
											) TSU0219
												INNER JOIN TSU0221 TSU0221 ON
												TSU0219.ROLE_ID = TSU0221.P_ROLE_ID
										ORDER BY USER_ID, C_ROLE_ID
									) ACCESS_ROLE
									-----------------------------------------------
									-- 데이터 엑세스 권한 :: 인터페이스 맵핑 조인
									-----------------------------------------------
									INNER JOIN TSU0220 TSU0220 ON
										ACCESS_ROLE.ROLE_ID = TSU0220.ROLE_ID

								UNION

								-----------------------------------------------
								-- 로그인 사용자 본인이 등록한 인터페이스 목록 조회
								-----------------------------------------------
								SELECT
									INTERFACE_ID
								FROM
									TAN0201
								WHERE REG_USER = #{userId}
							) ACCESS_ROLE_INTF ON
								A.INTERFACE_ID = ACCESS_ROLE_INTF.INTERFACE_ID
						</otherwise>
						</choose>


						WHERE
							A.DEL_YN = 'N'
						<if test="scCategoryDetailNm != null and scCategoryDetailNm != ''">
							AND A.INTERFACE_NM like '%'||#{scCategoryDetailNm}||'%'
						</if>
						<if test="scCategoryDetailId != null and scCategoryDetailId != ''">
							AND A.INTEGRATION_ID like '%'||#{scCategoryDetailId}||'%'
						</if>


					) B
					ON A.INTERFACE_ID = B.INTERFACE_ID
					</if>
	</sql>
	<select id="getStatisticsInterfacePeriodTotalKICS-Year" resultType="java.util.Map">
		SELECT
  B.INTEGRATION_ID,
  B.INTERFACE_NM,
  GUBUN,
  YEAR2010,YEAR2011,YEAR2012,YEAR2013,YEAR2014,YEAR2015,YEAR2016,
  YEAR2017,YEAR2018,YEAR2019,YEAR2020,YEAR2021,YEAR2022,YEAR2023,
  YEAR2024,YEAR2025,YEAR2026,YEAR2027,YEAR2028,YEAR2029,YEAR2030
FROM (

    SELECT
         INTERFACE_ID
         , '1' AS SEQ
         , 'FINISHED' AS GUBUN
         , SUM(DECODE(RANGE1,'2010', TOTAL_CNT,0)) AS YEAR2010
         , SUM(DECODE(RANGE1,'2011', TOTAL_CNT,0)) AS YEAR2011
         , SUM(DECODE(RANGE1,'2012', TOTAL_CNT,0)) AS YEAR2012
         , SUM(DECODE(RANGE1,'2013', TOTAL_CNT,0)) AS YEAR2013
         , SUM(DECODE(RANGE1,'2014', TOTAL_CNT,0)) AS YEAR2014
         , SUM(DECODE(RANGE1,'2015', TOTAL_CNT,0)) AS YEAR2015
         , SUM(DECODE(RANGE1,'2016', TOTAL_CNT,0)) AS YEAR2016
         , SUM(DECODE(RANGE1,'2017', TOTAL_CNT,0)) AS YEAR2017
         , SUM(DECODE(RANGE1,'2018', TOTAL_CNT,0)) AS YEAR2018
         , SUM(DECODE(RANGE1,'2019', TOTAL_CNT,0)) AS YEAR2019
         , SUM(DECODE(RANGE1,'2020', TOTAL_CNT,0)) AS YEAR2020
         , SUM(DECODE(RANGE1,'2021', TOTAL_CNT,0)) AS YEAR2021
         , SUM(DECODE(RANGE1,'2022', TOTAL_CNT,0)) AS YEAR2022
         , SUM(DECODE(RANGE1,'2023', TOTAL_CNT,0)) AS YEAR2023
         , SUM(DECODE(RANGE1,'2024', TOTAL_CNT,0)) AS YEAR2024
         , SUM(DECODE(RANGE1,'2025', TOTAL_CNT,0)) AS YEAR2025
         , SUM(DECODE(RANGE1,'2026', TOTAL_CNT,0)) AS YEAR2026
         , SUM(DECODE(RANGE1,'2027', TOTAL_CNT,0)) AS YEAR2027
         , SUM(DECODE(RANGE1,'2028', TOTAL_CNT,0)) AS YEAR2028
         , SUM(DECODE(RANGE1,'2029', TOTAL_CNT,0)) AS YEAR2029
         , SUM(DECODE(RANGE1,'2030', TOTAL_CNT,0)) AS YEAR2030
         , SUM(TOTAL_CNT) AS YEAR_SUM
      FROM(
        	SELECT
            INTERFACE_ID
          , SUBSTR(TR_MONTH,1,4) AS RANGE1
          , SUM(NVL(SUCCESS_CNT, 0)) AS TOTAL_CNT
          FROM  TSU0805
          WHERE
           SUBSTR(TR_MONTH,1,4) BETWEEN '2010' AND '2030'
           GROUP BY INTERFACE_ID, SUBSTR(TR_MONTH,1,4)
        )
      GROUP BY  INTERFACE_ID
        UNION ALL
       SELECT
         INTERFACE_ID
         , '3' AS SEQ
         , 'ERROR'  AS GUBUN
         , SUM(DECODE(RANGE1,'2010', TOTAL_CNT,0)) AS YEAR2010
         , SUM(DECODE(RANGE1,'2011', TOTAL_CNT,0)) AS YEAR2011
         , SUM(DECODE(RANGE1,'2012', TOTAL_CNT,0)) AS YEAR2012
         , SUM(DECODE(RANGE1,'2013', TOTAL_CNT,0)) AS YEAR2013
         , SUM(DECODE(RANGE1,'2014', TOTAL_CNT,0)) AS YEAR2014
         , SUM(DECODE(RANGE1,'2015', TOTAL_CNT,0)) AS YEAR2015
         , SUM(DECODE(RANGE1,'2016', TOTAL_CNT,0)) AS YEAR2016
         , SUM(DECODE(RANGE1,'2017', TOTAL_CNT,0)) AS YEAR2017
         , SUM(DECODE(RANGE1,'2018', TOTAL_CNT,0)) AS YEAR2018
         , SUM(DECODE(RANGE1,'2019', TOTAL_CNT,0)) AS YEAR2019
         , SUM(DECODE(RANGE1,'2020', TOTAL_CNT,0)) AS YEAR2020
         , SUM(DECODE(RANGE1,'2021', TOTAL_CNT,0)) AS YEAR2021
         , SUM(DECODE(RANGE1,'2022', TOTAL_CNT,0)) AS YEAR2022
         , SUM(DECODE(RANGE1,'2023', TOTAL_CNT,0)) AS YEAR2023
         , SUM(DECODE(RANGE1,'2024', TOTAL_CNT,0)) AS YEAR2024
         , SUM(DECODE(RANGE1,'2025', TOTAL_CNT,0)) AS YEAR2025
         , SUM(DECODE(RANGE1,'2026', TOTAL_CNT,0)) AS YEAR2026
         , SUM(DECODE(RANGE1,'2027', TOTAL_CNT,0)) AS YEAR2027
         , SUM(DECODE(RANGE1,'2028', TOTAL_CNT,0)) AS YEAR2028
         , SUM(DECODE(RANGE1,'2029', TOTAL_CNT,0)) AS YEAR2029
         , SUM(DECODE(RANGE1,'2030', TOTAL_CNT,0)) AS YEAR2030
         , SUM(TOTAL_CNT) AS YEAR_SUM
      FROM(
        	SELECT
            INTERFACE_ID
          , SUBSTR(TR_MONTH,1,4) AS RANGE1
          , SUM(NVL(ERROR_CNT, 0)) AS TOTAL_CNT
          FROM  TSU0805
          WHERE
           SUBSTR(TR_MONTH,1,4) BETWEEN '2010' AND '2030'
           GROUP BY INTERFACE_ID, SUBSTR(TR_MONTH,1,4)
        )
      GROUP BY  INTERFACE_ID
    UNION ALL
    SELECT
         INTERFACE_ID
         , '2' AS SEQ
         ,'PROCESS'  AS GUBUN
         , SUM(DECODE(RANGE1,'2010', TOTAL_CNT,0)) AS YEAR2010
         , SUM(DECODE(RANGE1,'2011', TOTAL_CNT,0)) AS YEAR2011
         , SUM(DECODE(RANGE1,'2012', TOTAL_CNT,0)) AS YEAR2012
         , SUM(DECODE(RANGE1,'2013', TOTAL_CNT,0)) AS YEAR2013
         , SUM(DECODE(RANGE1,'2014', TOTAL_CNT,0)) AS YEAR2014
         , SUM(DECODE(RANGE1,'2015', TOTAL_CNT,0)) AS YEAR2015
         , SUM(DECODE(RANGE1,'2016', TOTAL_CNT,0)) AS YEAR2016
         , SUM(DECODE(RANGE1,'2017', TOTAL_CNT,0)) AS YEAR2017
         , SUM(DECODE(RANGE1,'2018', TOTAL_CNT,0)) AS YEAR2018
         , SUM(DECODE(RANGE1,'2019', TOTAL_CNT,0)) AS YEAR2019
         , SUM(DECODE(RANGE1,'2020', TOTAL_CNT,0)) AS YEAR2020
         , SUM(DECODE(RANGE1,'2021', TOTAL_CNT,0)) AS YEAR2021
         , SUM(DECODE(RANGE1,'2022', TOTAL_CNT,0)) AS YEAR2022
         , SUM(DECODE(RANGE1,'2023', TOTAL_CNT,0)) AS YEAR2023
         , SUM(DECODE(RANGE1,'2024', TOTAL_CNT,0)) AS YEAR2024
         , SUM(DECODE(RANGE1,'2025', TOTAL_CNT,0)) AS YEAR2025
         , SUM(DECODE(RANGE1,'2026', TOTAL_CNT,0)) AS YEAR2026
         , SUM(DECODE(RANGE1,'2027', TOTAL_CNT,0)) AS YEAR2027
         , SUM(DECODE(RANGE1,'2028', TOTAL_CNT,0)) AS YEAR2028
         , SUM(DECODE(RANGE1,'2029', TOTAL_CNT,0)) AS YEAR2029
         , SUM(DECODE(RANGE1,'2030', TOTAL_CNT,0)) AS YEAR2030
         , SUM(TOTAL_CNT) AS YEAR_SUM
      FROM(
        	SELECT
            INTERFACE_ID
          , SUBSTR(TR_MONTH,1,4) AS RANGE1
          , SUM(NVL(PROCESS_CNT, 0)) AS TOTAL_CNT
          FROM  TSU0805
          WHERE
           SUBSTR(TR_MONTH,1,4) BETWEEN '2010' AND '2030'
           GROUP BY INTERFACE_ID, SUBSTR(TR_MONTH,1,4)
        )
      GROUP BY  INTERFACE_ID

      ) A
		<include refid="pep.per.mint.database.mapper.su.StatisticsMapper.period-innerJoin-total-interface"/>
  	ORDER BY B.INTERFACE_ID, B.INTERFACE_NM, A.SEQ;
	</select>



	<!-- <select id="getStatisticsInterfaceOrgTotal" resultType="java.util.Map">
		select * from (select INTERFACE_ID, TR_MONTH, SUM(ERROR_CNT)+ SUM(SUCCESS_CNT)+ SUM(PROCESS_CNT) AS TR_COUNT from tsu0805 group by INTERFACE_ID,TR_MONTH)
		PIVOT(
  		SUM(TR_COUNT) FOR TR_MONTH IN(${searchP})
		)

	</select>
 -->

	<select id="getStatisticsInterfaceOrgYearTotal-old" resultType="java.util.Map">
       SELECT
         B.ORG_ID
         ,B.ORG_NM
         , SUM(DECODE(RANGE1,'2010', TOTAL_CNT,0)) AS YEAR2010
         , SUM(DECODE(RANGE1,'2011', TOTAL_CNT,0)) AS YEAR2011
         , SUM(DECODE(RANGE1,'2012', TOTAL_CNT,0)) AS YEAR2012
         , SUM(DECODE(RANGE1,'2013', TOTAL_CNT,0)) AS YEAR2013
         , SUM(DECODE(RANGE1,'2014', TOTAL_CNT,0)) AS YEAR2014
         , SUM(DECODE(RANGE1,'2015', TOTAL_CNT,0)) AS YEAR2015
         , SUM(DECODE(RANGE1,'2016', TOTAL_CNT,0)) AS YEAR2016
         , SUM(DECODE(RANGE1,'2017', TOTAL_CNT,0)) AS YEAR2017
         , SUM(DECODE(RANGE1,'2018', TOTAL_CNT,0)) AS YEAR2018
         , SUM(DECODE(RANGE1,'2019', TOTAL_CNT,0)) AS YEAR2019
         , SUM(DECODE(RANGE1,'2020', TOTAL_CNT,0)) AS YEAR2020
         , SUM(DECODE(RANGE1,'2021', TOTAL_CNT,0)) AS YEAR2021
         , SUM(DECODE(RANGE1,'2022', TOTAL_CNT,0)) AS YEAR2022
         , SUM(DECODE(RANGE1,'2023', TOTAL_CNT,0)) AS YEAR2023
         , SUM(DECODE(RANGE1,'2024', TOTAL_CNT,0)) AS YEAR2024
         , SUM(DECODE(RANGE1,'2025', TOTAL_CNT,0)) AS YEAR2025
         , SUM(DECODE(RANGE1,'2026', TOTAL_CNT,0)) AS YEAR2026
         , SUM(DECODE(RANGE1,'2027', TOTAL_CNT,0)) AS YEAR2027
         , SUM(DECODE(RANGE1,'2028', TOTAL_CNT,0)) AS YEAR2028
         , SUM(DECODE(RANGE1,'2029', TOTAL_CNT,0)) AS YEAR2029
         , SUM(DECODE(RANGE1,'2030', TOTAL_CNT,0)) AS YEAR2030
         , SUM(TOTAL_CNT) AS YEAR_SUM
       	FROM
        (
        	select
            	ORG_ID
				, SUBSTR(TR_MONTH,1,4) AS RANGE1
				, SUM(NVL(TR_CNT, 0)) AS TOTAL_CNT
			FROM  TSU0808
			WHERE
				1=1
              	AND SUBSTR(TR_MONTH,1,4) BETWEEN '2007' AND '2030'
            GROUP BY ORG_ID, SUBSTR(TR_MONTH,1,4)
        ) A
        INNER JOIN
		(
			SELECT
				ORG_ID
				,ORG_NM
			FROM TIM0401
			WHERE
				DEL_YN = 'N'
		) B
		ON A.ORG_ID = B.ORG_ID
  	GROUP BY B.ORG_ID, B.ORG_NM

	</select>

	<select id="getStatisticsInterfaceOrgYearTotal" resultType="java.util.Map">
  SELECT '2' AS SEQ,  'TOTAL' AS ORG_NM,
  	SUM(CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS' AND  A.ST_YEAR||A.ST_MONTH &gt;='201605')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END )   AS "SUM",
    SUM(CASE WHEN A.ST_YEAR='2010' THEN(A.ST_FINISHED) ELSE 0 END) AS YEAR2010,
    SUM(CASE WHEN A.ST_YEAR='2011' THEN(A.ST_FINISHED) ELSE 0 END) AS YEAR2011,
    SUM(CASE WHEN A.ST_YEAR='2012' THEN(A.ST_FINISHED) ELSE 0 END) AS YEAR2012,
    SUM(CASE WHEN A.ST_YEAR='2013' THEN(A.ST_FINISHED) ELSE 0 END) AS YEAR2013,
    SUM(CASE WHEN A.ST_YEAR='2014' THEN(A.ST_FINISHED) ELSE 0 END) AS YEAR2014,
    SUM(CASE WHEN A.ST_YEAR='2015' THEN(A.ST_FINISHED) ELSE 0 END) AS YEAR2015,
    SUM(CASE WHEN A.ST_YEAR='2016'
    		THEN
    		CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS' AND  A.ST_YEAR||A.ST_MONTH &gt;='201605')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
			ELSE 0 END) AS YEAR2016,
    SUM(CASE WHEN A.ST_YEAR='2017'
    		THEN
    		CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
			ELSE 0 END) AS YEAR2017,
    SUM(CASE WHEN A.ST_YEAR='2018'
    		THEN
    		CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
    		ELSE 0 END) AS YEAR2018,
    SUM(CASE WHEN A.ST_YEAR='2019'
    		THEN
    		CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
			ELSE 0 END) AS YEAR2019,
    SUM(CASE WHEN A.ST_YEAR='2020'
    		THEN
    		CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
			ELSE 0 END) AS YEAR2020,
    SUM(CASE WHEN A.ST_YEAR='2021'
    		THEN
    		CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
    		ELSE 0 END) AS YEAR2021,
    SUM(CASE WHEN A.ST_YEAR='2022'
    		THEN
    		CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
			ELSE 0 END) AS YEAR2022,
    SUM(CASE WHEN A.ST_YEAR='2023'
    		THEN
    		CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
			ELSE 0 END) AS YEAR2023,
    SUM(CASE WHEN A.ST_YEAR='2024'
    		THEN
    		CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
			ELSE 0 END) AS YEAR2024,
    SUM(CASE WHEN A.ST_YEAR='2025'
    		THEN
    		CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
			ELSE 0 END) AS YEAR2025,
    SUM(CASE WHEN A.ST_YEAR='2026'
    		THEN
    		CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
			ELSE 0 END) AS YEAR2026,
    SUM(CASE WHEN A.ST_YEAR='2027'
    		THEN
	    	CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
    		ELSE 0 END) AS YEAR2027,
    SUM(CASE WHEN A.ST_YEAR='2028'
    		THEN
	    	CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
			ELSE 0 END) AS YEAR2028,
    SUM(CASE WHEN A.ST_YEAR='2029'
	    	THEN
	    	CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
			ELSE 0 END) AS YEAR2029,
    SUM(CASE WHEN A.ST_YEAR='2030'
    		THEN
    		CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
			ELSE 0 END) AS YEAR2030
  FROM SI_STAT_INTF_DAY A, GROUPID B, INTFINFO C
  WHERE A.GROUP_ID = B.GROUP_ID
  AND A.GROUP_ID = C.GROUP_ID
  AND A.INTF_ID = C.INTF_ID
  AND ( B.GROUP_NM NOT LIKE  '%TEST%'  AND B.GROUP_NM NOT LIKE  '%DELETED%')  -- 테스트용 제외
  AND A.INTF_ID NOT LIKE '%DW%'  -- 통계사업용 제외
  AND A.ST_YEAR  &gt;='2010'
  AND A.ST_YEAR  &lt;='2030'
  UNION ALL
  SELECT  '1' AS SEQ,  B.GROUP_NM AS ORG_NM,
  	SUM(CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS' AND  A.ST_YEAR||A.ST_MONTH &gt;='201605')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END )   AS YEAR_SUM,
    SUM(CASE WHEN A.ST_YEAR='2010' THEN(A.ST_FINISHED) ELSE 0 END) AS YEAR2010,
    SUM(CASE WHEN A.ST_YEAR='2011' THEN(A.ST_FINISHED) ELSE 0 END) AS YEAR2011,
    SUM(CASE WHEN A.ST_YEAR='2012' THEN(A.ST_FINISHED) ELSE 0 END) AS YEAR2012,
    SUM(CASE WHEN A.ST_YEAR='2013' THEN(A.ST_FINISHED) ELSE 0 END) AS YEAR2013,
    SUM(CASE WHEN A.ST_YEAR='2014' THEN(A.ST_FINISHED) ELSE 0 END) AS YEAR2014,
    SUM(CASE WHEN A.ST_YEAR='2015' THEN(A.ST_FINISHED) ELSE 0 END) AS YEAR2015,
    SUM(CASE WHEN A.ST_YEAR='2016'
    		THEN
    		CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS' AND  A.ST_YEAR||A.ST_MONTH &gt;='201605')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
			ELSE 0 END) AS YEAR2016,
    SUM(CASE WHEN A.ST_YEAR='2017'
    		THEN
    		CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
			ELSE 0 END) AS YEAR2017,
    SUM(CASE WHEN A.ST_YEAR='2018'
    		THEN
    		CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
    		ELSE 0 END) AS YEAR2018,
    SUM(CASE WHEN A.ST_YEAR='2019'
    		THEN
    		CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
			ELSE 0 END) AS YEAR2019,
    SUM(CASE WHEN A.ST_YEAR='2020'
    		THEN
    		CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
			ELSE 0 END) AS YEAR2020,
    SUM(CASE WHEN A.ST_YEAR='2021'
    		THEN
    		CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
    		ELSE 0 END) AS YEAR2021,
    SUM(CASE WHEN A.ST_YEAR='2022'
    		THEN
    		CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
			ELSE 0 END) AS YEAR2022,
    SUM(CASE WHEN A.ST_YEAR='2023'
    		THEN
    		CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
			ELSE 0 END) AS YEAR2023,
    SUM(CASE WHEN A.ST_YEAR='2024'
    		THEN
    		CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
			ELSE 0 END) AS YEAR2024,
    SUM(CASE WHEN A.ST_YEAR='2025'
    		THEN
    		CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
			ELSE 0 END) AS YEAR2025,
    SUM(CASE WHEN A.ST_YEAR='2026'
    		THEN
    		CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
			ELSE 0 END) AS YEAR2026,
    SUM(CASE WHEN A.ST_YEAR='2027'
    		THEN
	    	CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
    		ELSE 0 END) AS YEAR2027,
    SUM(CASE WHEN A.ST_YEAR='2028'
    		THEN
	    	CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
			ELSE 0 END) AS YEAR2028,
    SUM(CASE WHEN A.ST_YEAR='2029'
	    	THEN
	    	CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
			ELSE 0 END) AS YEAR2029,
    SUM(CASE WHEN A.ST_YEAR='2030'
    		THEN
    		CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
			ELSE 0 END) AS YEAR2030
  FROM SI_STAT_INTF_DAY A, GROUPID B, INTFINFO C
  WHERE A.GROUP_ID = B.GROUP_ID
  AND A.GROUP_ID = C.GROUP_ID
  AND A.INTF_ID = C.INTF_ID
  AND ( B.GROUP_NM NOT LIKE  '%TEST%'   AND  B.GROUP_NM NOT LIKE  '%DELETED%')  -- 테스트용 제외
  AND A.INTF_ID NOT LIKE '%DW%'  -- 통계사업용 제외
  AND A.ST_YEAR  &gt;='2010'
  AND A.ST_YEAR  &lt;='2030'

  GROUP By B.GROUP_NM
  ORDER BY 1, 2, 3 ASC

	</select>

	<select id="getStatisticsInterfaceOrgMonthTotal-old" resultType="java.util.Map">
   	SELECT
         B.ORG_ID
         ,B.ORG_NM
         , SUM(DECODE(RANGE1,#{scPeriodFrom}||'01', TOTAL_CNT,0)) AS MONTHA1
         , SUM(DECODE(RANGE1,#{scPeriodFrom}||'02', TOTAL_CNT,0)) AS MONTHA2
         , SUM(DECODE(RANGE1,#{scPeriodFrom}||'03', TOTAL_CNT,0)) AS MONTHA3
         , SUM(DECODE(RANGE1,#{scPeriodFrom}||'04', TOTAL_CNT,0)) AS MONTHA4
         , SUM(DECODE(RANGE1,#{scPeriodFrom}||'05', TOTAL_CNT,0)) AS MONTHA5
         , SUM(DECODE(RANGE1,#{scPeriodFrom}||'06', TOTAL_CNT,0)) AS MONTHA6
         , SUM(DECODE(RANGE1,#{scPeriodFrom}||'07', TOTAL_CNT,0)) AS MONTHA7
         , SUM(DECODE(RANGE1,#{scPeriodFrom}||'08', TOTAL_CNT,0)) AS MONTHA8
         , SUM(DECODE(RANGE1,#{scPeriodFrom}||'09', TOTAL_CNT,0)) AS MONTHA9
         , SUM(DECODE(RANGE1,#{scPeriodFrom}||'10', TOTAL_CNT,0)) AS MONTHA10
         , SUM(DECODE(RANGE1,#{scPeriodFrom}||'11', TOTAL_CNT,0)) AS MONTHA11
         , SUM(DECODE(RANGE1,#{scPeriodFrom}||'12', TOTAL_CNT,0)) AS MONTHA12
         , SUM(DECODE(RANGE1,#{scPeriodMiddle}||'01', TOTAL_CNT,0)) AS MONTHB1
         , SUM(DECODE(RANGE1,#{scPeriodMiddle}||'02', TOTAL_CNT,0)) AS MONTHB2
         , SUM(DECODE(RANGE1,#{scPeriodMiddle}||'03', TOTAL_CNT,0)) AS MONTHB3
         , SUM(DECODE(RANGE1,#{scPeriodMiddle}||'04', TOTAL_CNT,0)) AS MONTHB4
         , SUM(DECODE(RANGE1,#{scPeriodMiddle}||'05', TOTAL_CNT,0)) AS MONTHB5
         , SUM(DECODE(RANGE1,#{scPeriodMiddle}||'06', TOTAL_CNT,0)) AS MONTHB6
         , SUM(DECODE(RANGE1,#{scPeriodMiddle}||'07', TOTAL_CNT,0)) AS MONTHB7
         , SUM(DECODE(RANGE1,#{scPeriodMiddle}||'08', TOTAL_CNT,0)) AS MONTHB8
         , SUM(DECODE(RANGE1,#{scPeriodMiddle}||'09', TOTAL_CNT,0)) AS MONTHB9
         , SUM(DECODE(RANGE1,#{scPeriodMiddle}||'10', TOTAL_CNT,0)) AS MONTHB10
         , SUM(DECODE(RANGE1,#{scPeriodMiddle}||'11', TOTAL_CNT,0)) AS MONTHB11
         , SUM(DECODE(RANGE1,#{scPeriodMiddle}||'12', TOTAL_CNT,0)) AS MONTHB12
         , SUM(DECODE(RANGE1,#{scPeriodTo}||'01', TOTAL_CNT,0)) AS MONTHC1
         , SUM(DECODE(RANGE1,#{scPeriodTo}||'02', TOTAL_CNT,0)) AS MONTHC2
         , SUM(DECODE(RANGE1,#{scPeriodTo}||'03', TOTAL_CNT,0)) AS MONTHC3
         , SUM(DECODE(RANGE1,#{scPeriodTo}||'04', TOTAL_CNT,0)) AS MONTHC4
         , SUM(DECODE(RANGE1,#{scPeriodTo}||'05', TOTAL_CNT,0)) AS MONTHC5
         , SUM(DECODE(RANGE1,#{scPeriodTo}||'06', TOTAL_CNT,0)) AS MONTHC6
         , SUM(DECODE(RANGE1,#{scPeriodTo}||'07', TOTAL_CNT,0)) AS MONTHC7
         , SUM(DECODE(RANGE1,#{scPeriodTo}||'08', TOTAL_CNT,0)) AS MONTHC8
         , SUM(DECODE(RANGE1,#{scPeriodTo}||'09', TOTAL_CNT,0)) AS MONTHC9
         , SUM(DECODE(RANGE1,#{scPeriodTo}||'10', TOTAL_CNT,0)) AS MONTHC10
         , SUM(DECODE(RANGE1,#{scPeriodTo}||'11', TOTAL_CNT,0)) AS MONTHC11
         , SUM(DECODE(RANGE1,#{scPeriodTo}||'12', TOTAL_CNT,0)) AS MONTHC12
         , SUM(TOTAL_CNT) AS YEAR_SUM
        FROM
		(
        	select
            	ORG_ID
				, TR_MONTH AS RANGE1
				, SUM(NVL(TR_CNT, 0)) AS TOTAL_CNT
			FROM  TSU0808
			WHERE
				1=1
            AND TR_MONTH between #{scPeriodFrom}||'01' AND #{scPeriodTo}||'12'
            GROUP BY ORG_ID,TR_MONTH
        ) A
          INNER JOIN
			(
			SELECT
				ORG_ID
				,ORG_NM
			FROM TIM0401
			WHERE
				DEL_YN = 'N'
		) B
		ON A.ORG_ID = B.ORG_ID
  	GROUP BY B.ORG_ID, B.ORG_NM

	</select>
	<select id="getStatisticsInterfaceOrgMonthTotal" resultType="java.util.Map">
    SELECT   '2' AS SEQ, 'TOTAL' AS ORG_NM,
  	SUM(CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS' AND  A.ST_YEAR||A.ST_MONTH &gt;='201605')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END )   AS  YEAR_SUM,
    SUM(CASE WHEN A.ST_YEAR||A.ST_MONTH=#{scPeriodTo}||'01'
    		THEN
    		CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS' AND  A.ST_YEAR||A.ST_MONTH &gt;='201605')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
			ELSE 0 END) AS MONTHC1,
    SUM(CASE WHEN A.ST_YEAR||A.ST_MONTH=#{scPeriodTo}||'02'
    		THEN
    		CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS' AND  A.ST_YEAR||A.ST_MONTH &gt;='201605')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
    		ELSE 0 END) AS MONTHC2,
    SUM(CASE WHEN A.ST_YEAR||A.ST_MONTH=#{scPeriodTo}||'03'
    		THEN
    		CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS' AND  A.ST_YEAR||A.ST_MONTH &gt;='201605')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
			ELSE 0 END) AS MONTHC3,
    SUM(CASE WHEN A.ST_YEAR||A.ST_MONTH=#{scPeriodTo}||'04'
    		THEN
    		CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS' AND  A.ST_YEAR||A.ST_MONTH &gt;='201605')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
    		ELSE 0 END) AS MONTHC4,
    SUM(CASE WHEN A.ST_YEAR||A.ST_MONTH=#{scPeriodTo}||'05'
    		THEN
			CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS' AND  A.ST_YEAR||A.ST_MONTH &gt;='201605')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
			ELSE 0 END) AS MONTHC5,
    SUM(CASE WHEN A.ST_YEAR||A.ST_MONTH=#{scPeriodTo}||'06'
    		THEN
    		CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS' AND  A.ST_YEAR||A.ST_MONTH &gt;='201605')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
			ELSE 0 END) AS MONTHC6,
    SUM(CASE WHEN A.ST_YEAR||A.ST_MONTH=#{scPeriodTo}||'07'
    		THEN
    		CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS' AND  A.ST_YEAR||A.ST_MONTH &gt;='201605')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
    		ELSE 0 END) AS MONTHC7,
    SUM(CASE WHEN A.ST_YEAR||A.ST_MONTH=#{scPeriodTo}||'08'
    		THEN
    		CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS' AND  A.ST_YEAR||A.ST_MONTH &gt;='201605')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
    		ELSE 0 END) AS MONTHC8,
    SUM(CASE WHEN A.ST_YEAR||A.ST_MONTH=#{scPeriodTo}||'09'
    		THEN
    		CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS' AND  A.ST_YEAR||A.ST_MONTH &gt;='201605')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
			ELSE 0 END) AS MONTHC9,
    SUM(CASE WHEN A.ST_YEAR||A.ST_MONTH=#{scPeriodTo}||'10'
    		THEN
    		CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS' AND  A.ST_YEAR||A.ST_MONTH &gt;='201605')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
    		ELSE 0 END) AS MONTHC10,
    SUM(CASE WHEN A.ST_YEAR||A.ST_MONTH=#{scPeriodTo}||'11'
    		THEN
    		CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS' AND  A.ST_YEAR||A.ST_MONTH &gt;='201605')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
			ELSE 0 END) AS MONTHC11,
    SUM(CASE WHEN A.ST_YEAR||A.ST_MONTH=#{scPeriodTo}||'12'
    		THEN
    		CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS' AND  A.ST_YEAR||A.ST_MONTH &gt;='201605')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
			ELSE 0 END) AS MONTHC12
  FROM SI_STAT_INTF_DAY A, GROUPID B, INTFINFO C
  WHERE A.GROUP_ID = B.GROUP_ID
  AND A.GROUP_ID = C.GROUP_ID
  AND A.INTF_ID = C.INTF_ID
  AND ( B.GROUP_NM NOT LIKE  '%TEST%'   AND  B.GROUP_NM NOT LIKE  '%DELETED%')  -- 테스트용 제외
  AND A.INTF_ID NOT LIKE '%DW%'
  AND A.ST_YEAR || A.ST_MONTH &gt;=#{scPeriodTo}||'01'
  AND A.ST_YEAR || A.ST_MONTH &lt;=#{scPeriodTo}||'12'
  UNION ALL
  SELECT  '1' AS SEQ, B.GROUP_NM AS ORG_NM,
  	SUM(CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS' AND  A.ST_YEAR||A.ST_MONTH &gt;='201605')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END )   AS YEAR_SUM,
    SUM(CASE WHEN A.ST_YEAR||A.ST_MONTH=#{scPeriodTo}||'01'
    		THEN
    		CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS' AND  A.ST_YEAR||A.ST_MONTH &gt;='201605')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
			ELSE 0 END) AS MONTHC1,
    SUM(CASE WHEN A.ST_YEAR||A.ST_MONTH=#{scPeriodTo}||'02'
    		THEN
    		CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS' AND  A.ST_YEAR||A.ST_MONTH &gt;='201605')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
			ELSE 0 END) AS MONTHC2,
    SUM(CASE WHEN A.ST_YEAR||A.ST_MONTH=#{scPeriodTo}||'03'
    		THEN
    		CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS' AND  A.ST_YEAR||A.ST_MONTH &gt;='201605')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
			ELSE 0 END) AS MONTHC3,
    SUM(CASE WHEN A.ST_YEAR||A.ST_MONTH=#{scPeriodTo}||'04'
    		THEN
    		CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS' AND  A.ST_YEAR||A.ST_MONTH &gt;='201605')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
			ELSE 0 END) AS MONTHC4,
    SUM(CASE WHEN A.ST_YEAR||A.ST_MONTH=#{scPeriodTo}||'05'
    		THEN
    		CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS' AND  A.ST_YEAR||A.ST_MONTH &gt;='201605')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
			ELSE 0 END) AS MONTHC5,
    SUM(CASE WHEN A.ST_YEAR||A.ST_MONTH=#{scPeriodTo}||'06'
    		THEN
    		CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS' AND  A.ST_YEAR||A.ST_MONTH &gt;='201605')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
			ELSE 0 END) AS MONTHC6,
    SUM(CASE WHEN A.ST_YEAR||A.ST_MONTH=#{scPeriodTo}||'07'
    		THEN
    		CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS' AND  A.ST_YEAR||A.ST_MONTH &gt;='201605')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
			 ELSE 0 END) AS MONTHC7,
    SUM(CASE WHEN A.ST_YEAR||A.ST_MONTH=#{scPeriodTo}||'08'
    		THEN
    		CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS' AND  A.ST_YEAR||A.ST_MONTH &gt;='201605')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
    		  ELSE 0 END) AS MONTHC8,
    SUM(CASE WHEN A.ST_YEAR||A.ST_MONTH=#{scPeriodTo}||'09'
    		THEN
    		CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS' AND  A.ST_YEAR||A.ST_MONTH &gt;='201605')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
    		 ELSE 0 END) AS MONTHC9,
    SUM(CASE WHEN A.ST_YEAR||A.ST_MONTH=#{scPeriodTo}||'10'
    		THEN
    		CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS' AND  A.ST_YEAR||A.ST_MONTH &gt;='201605')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
    		 ELSE 0 END) AS MONTHC10,
    SUM(CASE WHEN A.ST_YEAR||A.ST_MONTH=#{scPeriodTo}||'11'
    		THEN
    		 CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS' AND  A.ST_YEAR||A.ST_MONTH &gt;='201605')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
    		 ELSE 0 END) AS MONTHC11,
    SUM(CASE WHEN A.ST_YEAR||A.ST_MONTH=#{scPeriodTo}||'12'
    		 THEN
    		 CASE WHEN (SUBSTR(C.INTF_ID,1,6) ='MMSBAS' AND  A.ST_YEAR||A.ST_MONTH &gt;='201605')
    		 		THEN A.ST_FINISHED + A.ST_PROCESSING   ELSE A.ST_FINISHED END
    		 ELSE 0 END) AS MONTHC12
  FROM SI_STAT_INTF_DAY A, GROUPID B, INTFINFO C
  WHERE A.GROUP_ID = B.GROUP_ID
  AND A.GROUP_ID = C.GROUP_ID
  AND A.INTF_ID = C.INTF_ID
  AND ( B.GROUP_NM NOT LIKE  '%TEST%'   AND  B.GROUP_NM NOT LIKE  '%DELETED%')  -- 테스트용 제외
  AND A.INTF_ID NOT LIKE '%DW%'
  AND A.ST_YEAR || A.ST_MONTH &gt;=#{scPeriodTo}||'01'
  AND A.ST_YEAR || A.ST_MONTH &lt;=#{scPeriodTo}||'12'

  GROUP By B.GROUP_NM
  ORDER BY 1, 2, 3 ASC

	</select>



	<select id="getStatisticsInterfaceOrganizationTotal" resultType="java.util.Map">
	SELECT
	     CATEGORY_ID
         , CATEGORY_NM
         , SND_ORG_NM
		 , RCV_ORG_NM
         , SND_SYS_NM
         , RCV_SYS_NM
         , MONTHC1, MONTHC2, MONTHC3, MONTHC4, MONTHC5, MONTHC6
         , MONTHC7, MONTHC8, MONTHC9, MONTHC10, MONTHC11, MONTHC12, YEAR_SUM
    FROM (
         SELECT
	          CATEGORY_ID
	         , CATEGORY_NM
	         , B.INTERFACE_ID
	         , SUM(DECODE(RANGE1,#{scPeriodFrom}||'01', TOTAL_CNT,0)) AS MONTHC1
	         , SUM(DECODE(RANGE1,#{scPeriodFrom}||'02', TOTAL_CNT,0)) AS MONTHC2
	         , SUM(DECODE(RANGE1,#{scPeriodFrom}||'03', TOTAL_CNT,0)) AS MONTHC3
	         , SUM(DECODE(RANGE1,#{scPeriodFrom}||'04', TOTAL_CNT,0)) AS MONTHC4
	         , SUM(DECODE(RANGE1,#{scPeriodFrom}||'05', TOTAL_CNT,0)) AS MONTHC5
	         , SUM(DECODE(RANGE1,#{scPeriodFrom}||'06', TOTAL_CNT,0)) AS MONTHC6
	         , SUM(DECODE(RANGE1,#{scPeriodFrom}||'07', TOTAL_CNT,0)) AS MONTHC7
	         , SUM(DECODE(RANGE1,#{scPeriodFrom}||'08', TOTAL_CNT,0)) AS MONTHC8
	         , SUM(DECODE(RANGE1,#{scPeriodFrom}||'09', TOTAL_CNT,0)) AS MONTHC9
	         , SUM(DECODE(RANGE1,#{scPeriodFrom}||'10', TOTAL_CNT,0)) AS MONTHC10
	         , SUM(DECODE(RANGE1,#{scPeriodFrom}||'11', TOTAL_CNT,0)) AS MONTHC11
	         , SUM(DECODE(RANGE1,#{scPeriodFrom}||'12', TOTAL_CNT,0)) AS MONTHC12
	         , SUM(TOTAL_CNT) AS YEAR_SUM
	         FROM
	         (
	         	(
            		SELECT
						INTERFACE_ID
						, TR_MONTH AS RANGE1
						, NVL(ERROR_CNT, 0) + NVL(PROCESS_CNT, 0) + NVL(SUCCESS_CNT, 0) AS TOTAL_CNT
					FROM  TSU0805
					WHERE
						1=1
					AND SUBSTR(TR_MONTH,1,4)  = #{scPeriodFrom}
				) A
				INNER JOIN
				(
					SELECT
						  INTEGRATION_ID AS CATEGORY_ID
						, INTERFACE_NM AS CATEGORY_NM
						, INTERFACE_ID
					FROM TAN0201
					WHERE
						DEL_YN = 'N'
				) B
				ON A.INTERFACE_ID = B.INTERFACE_ID
				<choose>
				<when test="isInterfaceAdmin != null and isInterfaceAdmin eq 'Y'.toString()">
				</when>
				<otherwise>
					INNER JOIN
					-----------------------------------------------
					-- 데이터 엑세스 권한 별 인터페이스 조회
					-----------------------------------------------
					(
						SELECT
							DISTINCT
							TSU0220.INTERFACE_ID
						FROM
							-----------------------------------------------
							-- 로그인 사용자 데이터 엑세스 권한 조회(공통)
							-----------------------------------------------
							(
								SELECT
									DISTINCT
									TSU0219.USER_ID   AS USER_ID,
									TSU0221.C_ROLE_ID AS ROLE_ID,
									TSU0221.DEPTH     AS DEPTH
								FROM
									(
										SELECT
											TSU0101.USER_ID,
											TSU0219.ROLE_ID
										FROM
											TSU0101 TSU0101
											INNER JOIN TSU0219 TSU0219 ON
												TSU0101.USER_ID = TSU0219.USER_ID
										WHERE
											1 = 1
											AND TSU0101.DEL_YN = 'N'
											AND TSU0101.USER_ID = #{userId}
									) TSU0219
										INNER JOIN TSU0221 TSU0221 ON
										TSU0219.ROLE_ID = TSU0221.P_ROLE_ID
								ORDER BY USER_ID, C_ROLE_ID
							) ACCESS_ROLE
							-----------------------------------------------
							-- 데이터 엑세스 권한 :: 인터페이스 맵핑 조인
							-----------------------------------------------
							INNER JOIN TSU0220 TSU0220 ON
								ACCESS_ROLE.ROLE_ID = TSU0220.ROLE_ID

						UNION

						-----------------------------------------------
						-- 로그인 사용자 본인이 등록한 인터페이스 목록 조회
						-----------------------------------------------
						SELECT
							INTERFACE_ID
						FROM
							TAN0201
						WHERE REG_USER = #{userId}
					) ACCESS_ROLE_INTF ON
						A.INTERFACE_ID = ACCESS_ROLE_INTF.INTERFACE_ID
				</otherwise>
				</choose>
          )
          GROUP BY B.CATEGORY_ID, B. CATEGORY_NM, B.INTERFACE_ID
      ) SUM_01
      	---------------------
		-- 시스템 정보(CONSUMER-송신) 조인
		---------------------
		LEFT OUTER JOIN
		(
			SELECT INTERFACE_ID, wm_concat(SND_SYS_NM) as SND_SYS_NM , wm_concat(SND_ORG_NM) as SND_ORG_NM
			FROM (
		    	 SELECT
		        	 Z.INTERFACE_ID
			        , ( SELECT SYSTEM_NM FROM TIM0101 WHERE DEL_YN = 'N' AND SYSTEM_ID = Z.SYSTEM_ID )  AS  SND_SYS_NM
			        , ( SELECT A.ORG_NM FROM TIM0401 A, TIM0403 B  WHERE A.DEL_YN = 'N' AND A.ORG_ID = B.ORG_ID AND B.SYSTEM_ID = Z.SYSTEM_ID )  as SND_ORG_NM
			      FROM TAN0213 Z
			         LEFT OUTER JOIN TIM0101 X
		    	     ON X.DEL_YN = 'N'
		        	  AND Z.SYSTEM_ID = X.SYSTEM_ID
		      		WHERE
		        	Z.DEL_YN = 'N'
		        	AND Z.NODE_TYPE = '0'
   			)
			GROUP BY INTERFACE_ID
		) H ON SUM_01.INTERFACE_ID = H.INTERFACE_ID
	    ---------------------
	    -- 시스템 정보(PROVIDER-수신) 조인
		---------------------
		LEFT OUTER JOIN
		(
			SELECT INTERFACE_ID, wm_concat(RCV_SYS_NM) as RCV_SYS_NM , wm_concat(RCV_ORG_NM) as RCV_ORG_NM
			FROM (
				SELECT
				     Z.INTERFACE_ID
				    , ( SELECT SYSTEM_NM FROM TIM0101 WHERE DEL_YN = 'N' AND SYSTEM_ID = Z.SYSTEM_ID )  AS  RCV_SYS_NM
			        , ( SELECT A.ORG_NM FROM TIM0401 A, TIM0403 B  WHERE A.DEL_YN = 'N' AND A.ORG_ID = B.ORG_ID AND B.SYSTEM_ID = Z.SYSTEM_ID )  as RCV_ORG_NM
				FROM TAN0213 Z
				    LEFT OUTER JOIN TIM0101 X
				    ON X.DEL_YN = 'N'
				    AND Z.SYSTEM_ID = X.SYSTEM_ID
				WHERE
				    Z.DEL_YN = 'N'
				    AND NODE_TYPE = '2'
				)
			GROUP BY INTERFACE_ID
		) I ON SUM_01.INTERFACE_ID = I.INTERFACE_ID

	</select>


	<select id="getSubjectStatusGroupByChannelDev" resultType="java.util.Map">
  SELECT * FROM (
		select '2'  AS SEQ,  K.CHANNEL_NM ,  SUM(K.cnt) AS  TOTALCNT
		  ,SUM(CASE WHEN K.STATUS in ('A0','A1','B0','B1','B2','B3','B4','E0','E1','E2','E3','E4','F0','F1','F2','F3','F4')  THEN K.cnt ELSE 0 END) AS "INTF"
		  ,SUM(CASE WHEN K.STATUS in ('G0')  THEN K.cnt ELSE 0 END) AS "SIT2"
		  ,SUM(CASE WHEN K.STATUS in ('H0')  THEN K.cnt ELSE 0 END) AS "UAT"
		  ,SUM(CASE WHEN K.STATUS in ('I0')  THEN K.cnt ELSE 0 END) AS "E2E"
		  ,ROUND((SUM(CASE WHEN K.STATUS in ('A0','A1','B0','B1','B2','B3','B4','E0','E1','E2','E3','E4','F0','F1','F2','F3','F4')  THEN K.cnt ELSE 0 END)/ SUM(K.cnt))*100, 2 ) AS "INTF_PER"
		  ,ROUND((SUM(CASE WHEN K.STATUS in ('G0')  THEN K.cnt ELSE 0 END)/ SUM(K.cnt))*100, 2 ) AS "SIT2_PER"
		  ,ROUND((SUM(CASE WHEN K.STATUS in ('H0')  THEN K.cnt ELSE 0 END)/ SUM(K.cnt))*100, 2 ) AS "UAT_PER"
		  ,ROUND((SUM(CASE WHEN K.STATUS in ('I0')  THEN K.cnt ELSE 0 END)/ SUM(K.cnt))*100, 2 ) AS "E2E_PER"
		  ,ROUND((SUM(K.cnt)/ SUM(K.cnt))*100, 2 ) AS "TOT_PER"
		From(
			select  B.STATUS , C.CHANNEL_NM, count(*) as cnt
			From TAN0201 A
			INNER JOIN TAN0101  B ON  A.INTERFACE_ID = B.INTERFACE_ID
			INNER JOIN TIM0002 C ON A.CHANNEL_ID = C.CHANNEL_ID
      WHERE B.DEL_YN='N'
			GROUP BY B.STATUS, C.CHANNEL_NM
		) K
		group by K.CHANNEL_NM

    UNION
    	select '1'  AS SEQ,   'TOTAL' AS  CHANNEL_NM ,  SUM(K.cnt) AS  TOTALCNT
		  ,SUM(CASE WHEN K.STATUS in ('A0','A1','B0','B1','B2','B3','B4','E0','E1','E2','E3','E4','F0','F1','F2','F3','F4')  THEN K.cnt ELSE 0 END) AS "INTF"
		  ,SUM(CASE WHEN K.STATUS in ('G0')  THEN K.cnt ELSE 0 END) AS "SIT2"
		  ,SUM(CASE WHEN K.STATUS in ('H0')  THEN K.cnt ELSE 0 END) AS "UAT"
		  ,SUM(CASE WHEN K.STATUS in ('I0')  THEN K.cnt ELSE 0 END) AS "E2E"
		  ,ROUND((SUM(CASE WHEN K.STATUS in ('A0','A1','B0','B1','B2','B3','B4','E0','E1','E2','E3','E4','F0','F1','F2','F3','F4')  THEN K.cnt ELSE 0 END)/ SUM(K.cnt))*100, 2 ) AS "INTF_PER"
		  ,ROUND((SUM(CASE WHEN K.STATUS in ('G0')  THEN K.cnt ELSE 0 END)/ SUM(K.cnt))*100, 2 ) AS "SIT2_PER"
		  ,ROUND((SUM(CASE WHEN K.STATUS in ('H0')  THEN K.cnt ELSE 0 END)/ SUM(K.cnt))*100, 2 ) AS "UAT_PER"
		  ,ROUND((SUM(CASE WHEN K.STATUS in ('I0')  THEN K.cnt ELSE 0 END)/ SUM(K.cnt))*100, 2 ) AS "E2E_PER"
		  ,ROUND((SUM(K.cnt)/ SUM(K.cnt))*100, 2 ) AS "TOT_PER"
		From(
			select  B.STATUS , C.CHANNEL_NM, count(*) as cnt
			From TAN0201 A
			INNER JOIN TAN0101  B ON  A.INTERFACE_ID = B.INTERFACE_ID
			INNER JOIN TIM0002 C ON A.CHANNEL_ID = C.CHANNEL_ID
      WHERE B.DEL_YN='N'
			GROUP BY B.STATUS, C.CHANNEL_NM
		) K
		)
    ORDER BY 1 DESC
	</select>


</mapper>